[{"title":"SnackDown2021 Online Round1A题解","url":"/posts/c3c2c796.html","content":"<p><a href=\"http://www.codechef.com/SNCK1A21\">比赛链接</a></p>\n<h2 id=\"dancemoves\">DANCEMOVES</h2>\n<h3 id=\"题意\">题意</h3>\n<p>给你起点和终点，每次可以往前走两步或者往后走一步，问最少多少步能从起点走到终点</p>\n<h3 id=\"题解\">题解</h3>\n<p>分类讨论即可</p>\n<span id=\"more\"></span>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> T, x, y;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (x &gt;= y) </span><br><span class=\"line\">            cout &lt;&lt; x - y &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((y - x) % <span class=\"number\">2</span> == <span class=\"number\">0</span>)</span><br><span class=\"line\">            cout &lt;&lt; (y - x) / <span class=\"number\">2</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            cout &lt;&lt; (y + <span class=\"number\">3</span> - x) / <span class=\"number\">2</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"minlcm1\">MINLCM1</h2>\n<h3 id=\"题意-1\">题意</h3>\n<p>给定两个数x和k，你需要找两个位于<span class=\"math inline\">\\([x,\nx*k]\\)</span>内的不同的数i,j，问i和j的LCM的最大值和最小值分别是什么</p>\n<h3 id=\"题解-1\">题解</h3>\n<p>最大值很简单，只要i和j取最大的两个数即可，因为相邻的数互质，不会有比最大的两个数乘起来更大的</p>\n<p>最小值即为<span\nclass=\"math inline\">\\(2x\\)</span>，不妨设j较大，因为<span\nclass=\"math inline\">\\(\\frac j {GCD(i,j)} \\ge\n2\\)</span>，因此LCM最小为2i，i取最小值x即可</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> LL = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">LL T, x, k;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        cin &gt;&gt; x &gt;&gt; k;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"number\">2</span> * x &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; x * k * (x * k - <span class=\"number\">1</span>) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"rrr\">RRR</h2>\n<h3 id=\"题意-2\">题意</h3>\n<p>n个人进行循环赛，胜者2分，负者0分，不并列名次，问第k名最多得多少分</p>\n<h3 id=\"题解-2\">题解</h3>\n<p>第k名可以把比他排名低的人全赢了，而比他排名高的最多赢一半</p>\n<p>若超过一半可以计算出前k名的积分总量不对</p>\n<p>可以简单构造出一种赢一半的情况，即为每个人赢自身编号往后数的一半人</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> T, k, n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"number\">2</span> * (n - k + (k - <span class=\"number\">1</span>) / <span class=\"number\">2</span>) &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"eqbeauty\">EQBEAUTY</h2>\n<h3 id=\"题意-3\">题意</h3>\n<p>给定一个数组A，可以做任意次如下操作：给数组中一个数加一或减一</p>\n<p>用最少的操作次数使其能分为两个极差相等的数组，问最小操作次数</p>\n<h3 id=\"题解-3\">题解</h3>\n<p>首先将数组排序</p>\n<p>若有一个数组只有一个数，那另一个数组全部都相等，显然这种情况下只有一个数的那个数应当为最大的数或最小的数，而另一个数组均等于原数组（指去掉了一个数的A）的中位数</p>\n<p>若两个数组均不止一个数，显然一个数组最小值为a[1],可以枚举其最大值a[i],\n那么另一个数组最大值为a[n],最小值应为a[1]+a[n]-a[i],\n二分查找前后距离这个数最近的数暴力修改即可，需要判断是否能覆盖整个数组</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> LL = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        cin &gt;&gt; n;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            cin &gt;&gt; a[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"number\">0</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"built_in\">min</span>(a[<span class=\"number\">2</span>] - a[<span class=\"number\">1</span>], a[<span class=\"number\">3</span>] - a[<span class=\"number\">2</span>]) &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LL mn = <span class=\"number\">1e18</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> tar = a[n] + a[<span class=\"number\">1</span>] - a[i];</span><br><span class=\"line\">            <span class=\"keyword\">int</span> pos = <span class=\"built_in\">lower_bound</span>(a + <span class=\"number\">2</span>, a + n, tar) - a;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (pos != n &amp;&amp; (pos &lt; i || pos == i + <span class=\"number\">1</span>)) </span><br><span class=\"line\">                mn = <span class=\"built_in\">min</span>(mn, <span class=\"number\">0LL</span> + a[pos] - tar);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((pos - <span class=\"number\">1</span> &lt; i &amp;&amp; pos != <span class=\"number\">2</span>) || pos == i + <span class=\"number\">2</span>) </span><br><span class=\"line\">                mn = <span class=\"built_in\">min</span>(mn, <span class=\"number\">0LL</span> + tar - a[pos - <span class=\"number\">1</span>]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LL sum = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> tar = a[n / <span class=\"number\">2</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">            sum += <span class=\"built_in\">abs</span>(tar - a[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mn = <span class=\"built_in\">min</span>(mn, sum);</span><br><span class=\"line\">        sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">        tar = a[n / <span class=\"number\">2</span> + <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            sum += <span class=\"built_in\">abs</span>(tar - a[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mn = <span class=\"built_in\">min</span>(mn, sum);</span><br><span class=\"line\">        cout &lt;&lt; mn &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"binflip\">BINFLIP</h2>\n<h3 id=\"题意-4\">题意</h3>\n<p>给定一个长度为n的01串，其中前k个字符均为1</p>\n<p>你需要将其变为全0串</p>\n<p>操作如下：</p>\n<p>你的第i次操作可以翻转一个长度为<span\nclass=\"math inline\">\\(2^{i-1}\\)</span>的子串</p>\n<p>任何时候翻转的字符不能越界</p>\n<p>问能否成功，若能输出任意一种操作序列</p>\n<h3 id=\"题解-4\">题解</h3>\n<p>k为0输出Yes无需操作，由奇偶性可得出k为其他偶数均不行</p>\n<p>k为奇数的情况下，首先找出最少需要的操作次数cnt，显然cnt为<span\nclass=\"math inline\">\\(log_2k+1\\)</span>，下面构造一种用只用cnt次操作的方法</p>\n<p>首先算出<span class=\"math inline\">\\(\\frac {2^{cnt}-1-k}\n2\\)</span>,这些数是用来将0翻转为1的，这样将1翻转为0的数量才能等于k</p>\n<p>为了避免下标越界，只使用前k个位置即可</p>\n<p>具体为对于将1翻转为0的操作（除了最后一次）从1开始</p>\n<p>而将0翻转为1的操作以及最后一次将1翻转为0的操作从<span\nclass=\"math inline\">\\(k - 2 ^ {cnt - 1} + 1\\)</span>开始即可</p>\n<p>可以证明从<span class=\"math inline\">\\(k - 2 ^ {cnt - 1} +\n1\\)</span>开始的<span class=\"math inline\">\\(\\frac {2^{cnt}-1-k}\n2\\)</span>个位置均被翻转了三遍，其余位置翻转了一遍</p>\n<p>PS:\n这里有个小问题是我没有证明将1翻转为0的操作（除了最后一次）的结束点一定比0翻转为1的结束点更大（即代码中那句assert）,\n这个证明起来并不困难，就让读者自己想想吧</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> LL = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">gcd</span><span class=\"params\">(LL a, LL b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b == <span class=\"number\">0</span> ? a : <span class=\"built_in\">gcd</span>(b, a % b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> LL INFL = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"comment\">//-------------------end head--------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">LL T, k, n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">    cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (k == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl &lt;&lt; <span class=\"number\">0</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (k == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl &lt;&lt; <span class=\"number\">1</span> &lt;&lt; endl &lt;&lt; <span class=\"number\">1</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> lim = <span class=\"number\">1</span>, cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (lim &lt; k)</span><br><span class=\"line\">                lim *= <span class=\"number\">2</span>, cnt++;</span><br><span class=\"line\">            lim -= <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> delta = (lim - k) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> pos = <span class=\"number\">1</span>, neg = k - (<span class=\"number\">1</span> &lt;&lt; (cnt - <span class=\"number\">1</span>)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl &lt;&lt; cnt &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; cnt - <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (delta &gt;&gt; i &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    cout &lt;&lt; neg &lt;&lt; endl;</span><br><span class=\"line\">                    neg += <span class=\"number\">1</span> &lt;&lt; i;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    cout &lt;&lt; pos &lt;&lt; endl;</span><br><span class=\"line\">                    pos += <span class=\"number\">1</span> &lt;&lt; i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"built_in\">assert</span>(pos &gt;= neg);</span><br><span class=\"line\">            cout &lt;&lt; k - (<span class=\"number\">1</span> &lt;&lt; (cnt - <span class=\"number\">1</span>)) + <span class=\"number\">1</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["SnackDown"]},{"title":"SnackDown2021 Online Qualifiers题解","url":"/posts/db6c28c7.html","content":"<p><a href=\"https://www.codechef.com/SNCKQL21\">比赛链接</a></p>\n<h2 id=\"luckynum\">LUCKYNUM</h2>\n<p>输入三个数, 若有7输出YES，否则输出NO</p>\n<span id=\"more\"></span>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T, a, b, c;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a == <span class=\"number\">7</span> || b == <span class=\"number\">7</span> || c == <span class=\"number\">7</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"testseries\">TESTSERIES</h2>\n<p>输入5个数(只能是0/1/2),\n1比2多输出INDIA，反之输出ENGLAND，一样多输出DRAW</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> T;</span><br><span class=\"line\"><span class=\"keyword\">int</span> c[<span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        c[<span class=\"number\">0</span>] = c[<span class=\"number\">1</span>] = c[<span class=\"number\">2</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> x; </span><br><span class=\"line\">            cin &gt;&gt; x;</span><br><span class=\"line\">            c[x]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (c[<span class=\"number\">1</span>] &gt; c[<span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;INDIA&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (c[<span class=\"number\">1</span>] == c[<span class=\"number\">2</span>]) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;DRAW&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ENGLAND&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"maxdistkt\">MAXDISTKT</h2>\n<h3 id=\"题意\">题意</h3>\n<p>给定一个数组B, 要求输出一个数组A, 使得<span\nclass=\"math inline\">\\(A\\%B\\)</span>（对应位置取模）之后的数组的不同整数最多</p>\n<h3 id=\"题解\">题解</h3>\n<p>贪心，首先将B从小到大排序，然后<span\nclass=\"math inline\">\\(A\\%B\\)</span>应该是从小到大递增的（排除那些不能产生新数的位置）</p>\n<p>然后将A按原位置排序输出即可</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> LL = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">gcd</span><span class=\"params\">(LL a, LL b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b == <span class=\"number\">0</span> ? a : <span class=\"built_in\">gcd</span>(b, a % b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> LL INFL = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"comment\">//-------------------end head--------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node2</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val, id;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> node2 &amp;rhs) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id &lt; rhs.id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;a[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> val, id;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> node &amp;rhs) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val &lt; rhs.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;b[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;b[i].val);</span><br><span class=\"line\">            b[i].id = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(b + <span class=\"number\">1</span>, b + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (b[i].val &gt; cnt) &#123;</span><br><span class=\"line\">                a[i].val = b[i].val + cnt;</span><br><span class=\"line\">                cnt++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                a[i].val = b[i].val;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            a[i].id = b[i].id;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d%c&quot;</span>, a[i].val, <span class=\"string\">&quot; \\n&quot;</span>[i == n]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"mindiff1\">MINDIFF1</h2>\n<h3 id=\"题意-1\">题意</h3>\n<p>有一个简单无向图，你需要给每个点分配一个数字，且分配的数字是1-n的排列</p>\n<p>定义<span class=\"math inline\">\\(D_i\\)</span>为<span\nclass=\"math inline\">\\(i\\)</span>的满足<span\nclass=\"math inline\">\\(C_j&lt;C_i\\)</span>的邻居数量</p>\n<p>你需要最小化<span\nclass=\"math inline\">\\(D\\)</span>的极差，输出这个极差和对应的分配方案</p>\n<h3 id=\"题解-1\">题解</h3>\n<p>首先可以看出D的最小值是0（数字1在的那个节点），于是问题就变成了最小化D的最大值</p>\n<p>考虑如下分配方式：将当前最大的数字放在度数最小的节点上，然后删除这个节点</p>\n<p>正确性并不会证......</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> LL = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">gcd</span><span class=\"params\">(LL a, LL b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b == <span class=\"number\">0</span> ? a : <span class=\"built_in\">gcd</span>(b, a % b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> INF = <span class=\"number\">0x3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> LL INFL = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"comment\">//-------------------end head--------------</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">3e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> T, d[N], n, m, x, y, mx;</span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N];</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; G[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        mx = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            d[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            a[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">            G[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class=\"line\">            G[x].<span class=\"built_in\">push_back</span>(y);</span><br><span class=\"line\">            G[y].<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">            d[x]++;</span><br><span class=\"line\">            d[y]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        set&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; pq;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            pq.<span class=\"built_in\">insert</span>(pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;(d[i], i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!pq.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> u = pq.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">            a[u-&gt;second] = pq.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">            pq.<span class=\"built_in\">erase</span>(u);</span><br><span class=\"line\">            mx = <span class=\"built_in\">max</span>(mx, u-&gt;first);</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">auto</span> i: G[u-&gt;second]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (a[i] != <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"function\">pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; <span class=\"title\">x</span><span class=\"params\">(d[i], i)</span></span>;</span><br><span class=\"line\">                pq.<span class=\"built_in\">erase</span>(x);</span><br><span class=\"line\">                x.first--;</span><br><span class=\"line\">                d[i]--;</span><br><span class=\"line\">                pq.<span class=\"built_in\">insert</span>(x);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, mx);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d%c&quot;</span>, a[i], <span class=\"string\">&quot; \\n&quot;</span>[i == n]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"testseries-1\">TESTSERIES</h2>\n<h3 id=\"题意-2\">题意</h3>\n<p>给你三个串S1，S2，X，问你有多少对&lt;P,Q&gt;满足P是S1的前缀且Q是S2的前缀且P+Q是X的子串（P，Q可以为空串）</p>\n<h3 id=\"题解-2\">题解</h3>\n<p>考虑枚举P和Q的断点，显然Q用exkmp就可以搞定，那P是S1的前缀和X的后缀相匹配，可以按S1+#+X做kmp，但并不是只有nxt[i]满足条件，nxt[nxt[i]],\nnxt[nxt[nxt[i]]]...都是可以的，暴力跳nxt肯定会超时，还有一个问题是这样可能会导致重复计算，可以将每个P的长度对应的Q的长度记录下来然后最后统一对nxt取最大值</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * @Author: tusikalanse</span></span><br><span class=\"line\"><span class=\"comment\"> * @Date: 2021-10-21 09:06:48</span></span><br><span class=\"line\"><span class=\"comment\"> * @LastEditTime: 2021-10-21 10:04:41</span></span><br><span class=\"line\"><span class=\"comment\"> * @LastEditors: tusikalanse</span></span><br><span class=\"line\"><span class=\"comment\"> * @Description: </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> LL = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">3e6</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\">string s1, s2, x;</span><br><span class=\"line\"><span class=\"keyword\">int</span> nxt1[N], extend[N], T;</span><br><span class=\"line\"><span class=\"keyword\">int</span> nxt2[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">getnext</span><span class=\"params\">(string &amp;t, <span class=\"keyword\">int</span> nxt[])</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> len = t.<span class=\"built_in\">size</span>(), po, i = <span class=\"number\">0</span>, j;</span><br><span class=\"line\">  nxt[<span class=\"number\">0</span>] = len;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(t[i] == t[i + <span class=\"number\">1</span>] &amp;&amp; i + <span class=\"number\">1</span>  &lt; len) </span><br><span class=\"line\">    ++i;</span><br><span class=\"line\">  nxt[<span class=\"number\">1</span>] = i;</span><br><span class=\"line\">  po = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i = <span class=\"number\">2</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nxt[i - po] + i &lt; po + nxt[po])</span><br><span class=\"line\">      nxt[i] = nxt[i - po];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      j = po + nxt[po] - i;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(j &lt; <span class=\"number\">0</span>) j = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(i + j &lt; len &amp;&amp; t[j] == t[i + j])</span><br><span class=\"line\">        ++j;</span><br><span class=\"line\">      nxt[i] = j;</span><br><span class=\"line\">      po = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">exkmp</span><span class=\"params\">(string &amp;s, string &amp;t, <span class=\"keyword\">int</span> nxt[])</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> len = s.<span class=\"built_in\">size</span>(), po, i = <span class=\"number\">0</span>, j, l2 = t.<span class=\"built_in\">size</span>();</span><br><span class=\"line\">  <span class=\"built_in\">getnext</span>(t, nxt);</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(t[i] == s[i] &amp;&amp; i &lt; len &amp;&amp; i &lt; l2) </span><br><span class=\"line\">    ++i;</span><br><span class=\"line\">  extend[<span class=\"number\">0</span>] = i;</span><br><span class=\"line\">  po = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>; i &lt; len; ++i) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(nxt[i - po] + i &lt; po + extend[po])</span><br><span class=\"line\">      extend[i] = nxt[i - po];</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      j = po + extend[po] - i;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(j &lt; <span class=\"number\">0</span>) j = <span class=\"number\">0</span>;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(i + j &lt; len &amp;&amp; j &lt; l2 &amp;&amp; t[j] == s[i + j])</span><br><span class=\"line\">        ++j;</span><br><span class=\"line\">      extend[i] = j;</span><br><span class=\"line\">      po = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">kmp</span><span class=\"params\">(string&amp; s1, string&amp; s2, <span class=\"keyword\">int</span> nxt[])</span> </span>&#123;</span><br><span class=\"line\">  string s = s2 + <span class=\"string\">&#x27;#&#x27;</span> + s1;</span><br><span class=\"line\">  <span class=\"keyword\">int</span> n = s.<span class=\"built_in\">size</span>(), i = <span class=\"number\">0</span>, j = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  nxt[<span class=\"number\">0</span>] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (i &lt; n) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (j == <span class=\"number\">-1</span> || s[i] == s[j]) </span><br><span class=\"line\">      nxt[++i] = ++j;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">      j = nxt[j];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  ios::<span class=\"built_in\">sync_with_stdio</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  cin.<span class=\"built_in\">tie</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    cin &gt;&gt; T;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--) &#123;</span><br><span class=\"line\">        cin &gt;&gt; s1 &gt;&gt; s2 &gt;&gt; x;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> total = x.<span class=\"built_in\">size</span>() + s1.<span class=\"built_in\">size</span>() + s2.<span class=\"built_in\">size</span>() + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(nxt1, <span class=\"number\">0</span>, total * <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(nxt2, <span class=\"number\">0</span>, total * <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(extend, <span class=\"number\">0</span>, total * <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(ans, <span class=\"number\">0</span>, total * <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(<span class=\"keyword\">int</span>));</span><br><span class=\"line\">    <span class=\"built_in\">exkmp</span>(x, s2, nxt2);</span><br><span class=\"line\">    <span class=\"built_in\">kmp</span>(x, s1, nxt1);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= x.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">int</span> r = extend[i], l = nxt1[s1.<span class=\"built_in\">size</span>() + <span class=\"number\">1</span> + i];</span><br><span class=\"line\">      ans[l] = <span class=\"built_in\">max</span>(ans[l], r + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = s1.<span class=\"built_in\">size</span>(); i; --i) &#123;</span><br><span class=\"line\">      ans[nxt1[i]] = <span class=\"built_in\">max</span>(ans[nxt1[i]], ans[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    LL res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= s1.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">      res += ans[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; res &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["SnackDown"]},{"title":"hexo 使用 hexo-pangu-spacing 的坑","url":"/posts/a32bf05f.html","content":"<h1 id=\"tldr\">TLDR</h1>\n<p>不要使用<code>hexo-pangu-spacing</code>，可以由主题配置文件打开pangu</p>\n<h1 id=\"发现\">发现</h1>\n<p>这个坑是在写关于界面的时候发现的，当时想使用markdown中的<del>删除线</del>，然后发现发布的时候有一半波浪线变成了中文，让我深感疑惑</p>\n<span id=\"more\"></span>\n<h1 id=\"现象\">现象</h1>\n<p>一番测试之后发现，出现在中文后的波浪线就会变为中文符号，而那些保持为英文的符号会和紧邻的中文中出现一个空格</p>\n<p><strong>你好</strong></p>\n<p>会处理成</p>\n<p>** 你好 **</p>\n<p>而加了空格之后在html中是不会加粗的</p>\n<h1 id=\"排查\">排查</h1>\n<p>当时首先怀疑是不是pandoc解析的问题，加了一些log后发现pandoc拿到的data已经不对了。单独使用pandoc将md转为html也没有问题</p>\n<p>然后怀疑是不是pangu的问题，在主题配置文件中把pangu设为了false依然有这个问题，这让我直接排除了pangu这个正确答案</p>\n<h1 id=\"定位\">定位</h1>\n<p>经过一番加日志的操作，最终定位到了<code>node_modules/hexo/lib/hexo/post.js</code>文件中的如下代码</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> promise.then(<span class=\"function\"><span class=\"params\">content</span> =&gt;</span> &#123;</span><br><span class=\"line\">      data.content = content;</span><br><span class=\"line\">      <span class=\"comment\">// Run &quot;before_post_render&quot; filters</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> ctx.execFilter(<span class=\"string\">&#x27;before_post_render&#x27;</span>, data, &#123; <span class=\"attr\">context</span>: ctx &#125;);</span><br><span class=\"line\">    &#125;).then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      data.content = cacheObj.escapeCodeBlocks(data.content);</span><br><span class=\"line\">      <span class=\"comment\">// Escape all Nunjucks/Swig tags</span></span><br></pre></td></tr></table></figure>\n<p>我发现在<code>execFilter</code>之前<code>data</code>还是正确的，但之后就不正确了，说明问题出在<code>execFilter</code>中</p>\n<p>我搜索到了好几个<code>before_post_render</code>场景中出现的filter，最终发现问题出在<code>node_modules/hexo-pangu-spacing/index.js</code>的如下代码中</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo.extend.filter.register(<span class=\"string\">&#x27;before_post_render&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">  data.title = pangu.spacing(data.title);</span><br><span class=\"line\">  data.content = pangu.spacing(data.content);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>正是这句spacing导致了问题，注释掉之后就正常了</p>\n<p>看到这里有人可能会说不对啊之前把pangu关了不是没问题吗???</p>\n<p>我对此也产生了疑问，于是我把next主题配置中的pangu关了又试了一次，惊奇地发现关了之后居然输出了加在pangu里的日志!!!</p>\n<p>这说明主题配置中的pangu和<code>hexo-pangu-spacing</code>插件没有关系</p>\n<h1 id=\"解决\">解决</h1>\n<p>查阅相关pangu文档后发现pangu不支持直接对markdown使用</p>\n<p><a\nhref=\"https://github.com/vinta/pangu.js/issues/91\">github-pangu-issue91</a></p>\n<p><code>hexo-pangu-spacing</code>在render之前直接调用pangu是有问题的，于是我把这个插件卸载了</p>\n<p>如果要用pangu的话直接在主题配置文件里打开即可</p>\n<h1 id=\"经验\">经验</h1>\n<p>这番排查给了我一些找渲染问题的经验，在此记录如下</p>\n<ul>\n<li><p>可以使用hexo\nrender指令渲染文件（但在此例中没有用处，因为是filter而非renderer出了问题，所以单独渲染反而没有问题）</p></li>\n<li><p>generate时可以加上--debug参数获得更多日志</p></li>\n</ul>\n","categories":["hexo"]},{"title":"Rootless Docker安装","url":"/posts/65ac3c57.html","content":"<h2 id=\"脚本安装\">脚本安装</h2>\n<p>rootless docker至少需要docker20.10版本，用脚本安装即可</p>\n<p>安装脚本不能用root用户执行 <span id=\"more\"></span> <figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">curl -sSL https://get.docker.com/rootless | sh</span><br></pre></td></tr></table></figure></p>\n<h2\nid=\"新建docker用户组并将当前用户加入\">新建docker用户组并将当前用户加入</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo groupadd docker</span><br><span class=\"line\">sudo usermod -aG docker <span class=\"variable\">$USER</span></span><br><span class=\"line\">newgrp docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置环境变量\">设置环境变量</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">export</span> DOCKER_HOST=unix://<span class=\"variable\">$XDG_RUNTIME_DIR</span>/docker.sock &gt;&gt; ~/.zshrc </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:/home/`(whoami)`/bin &gt;&gt; ~/.zshrc  </span><br><span class=\"line\"><span class=\"built_in\">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动docker-daemon\">启动docker daemon</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl --user start docker</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置开机启动\">设置开机启动</h2>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">systemctl --user <span class=\"built_in\">enable</span> docker</span><br><span class=\"line\">loginctl enable-linger $(whoami)</span><br></pre></td></tr></table></figure>\n<p>至此Docker Engine已安装并启动，可以用docker run\nhello-world测试一下</p>\n","categories":["云原生"],"tags":["docker"]},{"title":"基于Duff's Device的C简易无栈协程实现","url":"/posts/fd9e80fc.html","content":"<p>参考 Simon Tatham 的文章<a\nhref=\"https://www.chiark.greenend.org.uk/~sgtatham/coroutines.html\">https://www.chiark.greenend.org.uk/~sgtatham/coroutines.html</a></p>\n<p>译文为<a\nhref=\"https://mthli.xyz/coroutines-in-c/\">https://mthli.xyz/coroutines-in-c/</a></p>\n<span id=\"more\"></span>\n<p>协程是一组序列化的子过程，与线程不同，协程的调度是由用户而非操作系统执行的，协程可以在任意时刻让出CPU（称为yield操作），下次调用时从上次yield的地方继续执行</p>\n<p>Simon Tatham利用Duff's\nDevice实现了一种简易的无栈协程，示例代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">function</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i, state = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\"><span class=\"keyword\">switch</span></span> (state) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">0</span>: </span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            state = <span class=\"number\">1</span>; </span><br><span class=\"line\">            <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">1</span>:;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>该函数的作用是第i次调用时返回i，最多10次（相同的函数功能可以通过一个statci变量实现，但本文是为了讨论协程），其核心部分为switch语句以及return前后两句，通过设置不同的state来保证下一次调用时从上次退出的地方继续执行（如果不明白switch为何能和for套在一起写可以自行搜索Duff's\nDevice）</p>\n<p>可以看出，每次调用return时设置的state必须不同，可以利用__LINE__宏来设置state，这样只要不在一行调用两次return即可</p>\n<p>以下是将其用宏封装的代码</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> crBegin static int state = 0; switch (state) &#123; case 0:</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> crReturn(x) do &#123; state = __LINE__; return x; case __LINE__:; &#125; while (0)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> crFinish &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f1</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    crBegin;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">crReturn</span>();</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">    crFinish;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">f2</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    crBegin;</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;x&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">crReturn</span>();</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;y&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;z&quot;</span>);</span><br><span class=\"line\">    crFinish;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"keyword\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">f1</span>();</span><br><span class=\"line\">    <span class=\"built_in\">f2</span>();</span><br><span class=\"line\">    <span class=\"built_in\">f1</span>();</span><br><span class=\"line\">    <span class=\"built_in\">f2</span>();</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<p>do while(0)是为了让crReturn与if else嵌套时不用考虑大括号问题</p>\n<p>这份代码运行后会依次输出1,2,x,3,y,z</p>\n<p>至此，一份用C实现的简易无栈协程就完成了，需要注意的是，因为switch内部不能任意定义变量，请在crBegin之前定义所需变量</p>\n<p>PS：这份代码仅供学习参考，如果你在实际生产代码中用了可能会被上司打死</p>\n"},{"title":"CentOS 多版本 GCC 共存","url":"/posts/5118b39d.html","content":"<p>用于解决需要多个GCC版本的场景，可以自定义各版本GCC的名称\n<span id=\"more\"></span>\n如何编译安装高版本GCC以及可能存在的动态链接库未替换问题参考以下两篇文章</p>\n<p><a\nhref=\"https://zhuanlan.zhihu.com/p/33026927\">https://zhuanlan.zhihu.com/p/33026927</a></p>\n<p><a\nhref=\"https://itbilu.com/linux/management/NymXRUieg.html\">https://itbilu.com/linux/management/NymXRUieg.html</a></p>\n<p>首先可以在~/.bashrc文件里添加这一句来添加你的GCC到PATH</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> PATH=PATH_TO_YOUR_GCC/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n<p>然后可以为你的gcc可执行文件添加一份软链接 例如你下载了个7.5版本的gcc\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo ln -s PATH_TO_YOUR_GCC/gcc PATH_TO_YOUR_GCC/gcc75</span><br></pre></td></tr></table></figure> 这样就可以直接用gcc75来调用7.5的GCC，g++也是如此操作</p>\n<p>如果需要多个版本的GCC可以分别编译然后加软链接</p>\n<p>PS:\n去年这个时候的我（指文章创建时间）居然连软链接都不会，写了个复制二进制文件的方法...</p>\n<p>PS2:\n这样做在cmake时可以直接使用如下语句指定编译器版本，而用alias重命名无法实现（会提示找不到编译器）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span>(CMAKE_C_COMPILER  <span class=\"string\">&quot;gcc75&quot;</span>)</span><br></pre></td></tr></table></figure>\n","categories":["linux"]},{"title":"2017杭电多校第一场","url":"/posts/10f44c60.html","content":"<p><a href=\"https://codeforces.com/gym/102253\">Gym 链接</a></p>\n<p>hdu6033-6044</p>\n<h2 id=\"a.-add-more-zero\">A. Add More Zero</h2>\n<p>每次询问给定一个<span class=\"math inline\">\\(n\\)</span>，要求输出<span\nclass=\"math inline\">\\(2^n-1\\)</span>的十进制位数减一 <span id=\"more\"></span>\n直接输出<span class=\"math inline\">\\((int)(n*log10(2))\\)</span>即可</p>\n<h2 id=\"b.-balala-power\">B. Balala Power!</h2>\n<p>'a'-'z'26个小写字母个代表0-25这些数中的一个（互不相同），你有<span\nclass=\"math inline\">\\(n\\)</span>个只含小写字母的字符串，你要安排'a'-'z'每个字母代表的数使得这些字符串代表的26进制数的总和最大且不含前导0</p>\n<p>可以将26个字母每个字母的出现次数统计出来（出现次数可以用高精度26进制数来存储，然后直接对vector排序就好了）需要注意的是前导0需要单独处理，复杂度<span\nclass=\"math inline\">\\(O(T26n\\log(26))\\)</span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>, mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, cas, l, vis[<span class=\"number\">26</span>];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; g[<span class=\"number\">26</span>];</span><br><span class=\"line\"><span class=\"keyword\">char</span> s[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n)) &#123;</span><br><span class=\"line\">\t\tans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; ++i) &#123;</span><br><span class=\"line\">\t\t\tg[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t\tg[i].<span class=\"built_in\">resize</span>(N);</span><br><span class=\"line\">\t\t\tvis[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(n--) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, s);</span><br><span class=\"line\">\t\t\tl = <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; l; ++i) </span><br><span class=\"line\">\t\t\t\tg[s[i] - <span class=\"string\">&#x27;a&#x27;</span>][l - i - <span class=\"number\">1</span>]++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(l != <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t\tvis[s[<span class=\"number\">0</span>] - <span class=\"string\">&#x27;a&#x27;</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; N - <span class=\"number\">1</span>; ++j) &#123;</span><br><span class=\"line\">\t\t\t\tg[i][j + <span class=\"number\">1</span>] += g[i][j] / <span class=\"number\">26</span>;</span><br><span class=\"line\">\t\t\t\tg[i][j] %= <span class=\"number\">26</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">reverse</span>(g[i].<span class=\"built_in\">begin</span>(), g[i].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> zero = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">26</span>; ++i) <span class=\"keyword\">if</span>(!vis[i]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(zero == <span class=\"number\">-1</span> || g[i] &lt; g[zero])</span><br><span class=\"line\">\t\t\t\tzero = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">swap</span>(g[<span class=\"number\">0</span>], g[zero]);</span><br><span class=\"line\">\t\t<span class=\"built_in\">sort</span>(g + <span class=\"number\">1</span>, g + <span class=\"number\">26</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">26</span>; ++i) </span><br><span class=\"line\">\t\t\t<span class=\"built_in\">reverse</span>(g[i].<span class=\"built_in\">begin</span>(), g[i].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">26</span>; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> base = i;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; N; ++j) &#123;</span><br><span class=\"line\">\t\t\t\tans = (ans + base * g[i][j]) % mod;</span><br><span class=\"line\">\t\t\t\tbase = base * <span class=\"number\">26</span> % mod; </span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case #%d: %lld\\n&quot;</span>, ++cas, ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"c.-colorful-tree\">C. Colorful Tree</h2>\n<p>有一个n个结点的树，每个结点有颜色，定义路径的权值为路径上的不同颜色数量，求所有路径的权值和</p>\n<p>反向考虑，对于每一种颜色考虑哪些路径这个颜色没有贡献，显然要求出不含这个颜色的连通块大小，那么树型dp即可，需要注意本题不能每个节点开map来存储，，否则会TLE,需要在dfs的过程中先行存储dfs之前的信息再做修改，这样所有颜色信息可以用一个数组来存储，复杂度<span\nclass=\"math inline\">\\(O(Tn)\\)</span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; G[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, c[N], cas, vis[N], sz[N], cnt, sum[N];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">gao</span><span class=\"params\">(<span class=\"keyword\">int</span> n)</span> </span>&#123;<span class=\"keyword\">return</span> <span class=\"number\">1LL</span> * n * (n - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">\tsz[rt] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i: G[rt]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i == fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> last = sum[c[rt]];</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs</span>(i, rt);</span><br><span class=\"line\">\t\tsz[rt] += sz[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> add = sum[c[rt]] - last;</span><br><span class=\"line\">\t\tans -= <span class=\"built_in\">gao</span>(sz[i] - add);</span><br><span class=\"line\">\t\ttot += sz[i] - add;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tsum[c[rt]] += tot + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(rt == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> col = <span class=\"number\">1</span>; col &lt;= n; ++col) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!vis[col]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\tans -= <span class=\"built_in\">gao</span>(sz[rt] - sum[col]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n)) &#123;</span><br><span class=\"line\">\t\tcnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;c[i]);</span><br><span class=\"line\">\t\t\tvis[c[i]] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t\tcnt += vis[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> a, b;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;a, &amp;b);</span><br><span class=\"line\">\t\t\tG[a].<span class=\"built_in\">push_back</span>(b);</span><br><span class=\"line\">\t\t\tG[b].<span class=\"built_in\">push_back</span>(a);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans = <span class=\"number\">1LL</span> * cnt * n * (n - <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case #%d: %lld\\n&quot;</span>, ++cas, ans);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\tG[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t\tsum[c[i]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\tvis[c[i]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"f.-function\">F. Function</h2>\n<p>给你两个长度分别为n, m的数组a, b, a是0-n-1的一个排列,\nb是0-m-1的一个排列，你要求一个函数<span\nclass=\"math inline\">\\(f\\)</span>, 使得<span class=\"math inline\">\\(f(i) =\nb_{f(a_i)}\\)</span>, 问你有多少种这样的<span\nclass=\"math inline\">\\(f\\)</span></p>\n<p>首先<span\nclass=\"math inline\">\\(i-&gt;a[i]\\)</span>建边，那么a一定是若干个环（可能有自环），同理b也是，找一找规律可以看出对于a中的一个环长为<span\nclass=\"math inline\">\\(x\\)</span>的环，它的每个点的值必须是b上的一个环长为<span\nclass=\"math inline\">\\(y\\)</span>的值,且<span\nclass=\"math inline\">\\(y\\)</span>是<span\nclass=\"math inline\">\\(x\\)</span>的因子，对于该环<span\nclass=\"math inline\">\\(x\\)</span>方案数加上<span\nclass=\"math inline\">\\(y\\)</span>，然后每个环之间方案数乘起来就好了，复杂度<span\nclass=\"math inline\">\\(O(Tn)\\)</span>(看看代码想一想为什么，保证没有快速幂的那个<span\nclass=\"math inline\">\\(\\log\\)</span>)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">10</span>, mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">qp</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) </span><br><span class=\"line\">\t\t\tres = res * a % mod;</span><br><span class=\"line\">\t\ta = a * a % mod;</span><br><span class=\"line\">\t\tn &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, a[N], b[N], vis[N], cas = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> cnta[N], cntb[N], ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m)) &#123;</span><br><span class=\"line\">\t\tans = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(cnta, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(<span class=\"keyword\">int</span>) * (n + <span class=\"number\">8</span>));</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(cntb, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(<span class=\"keyword\">int</span>) * (m + <span class=\"number\">8</span>));\t</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(<span class=\"keyword\">int</span>) * n);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(vis[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\tvis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> cnt = <span class=\"number\">1</span>, p = a[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(p != i) &#123;</span><br><span class=\"line\">\t\t\t\tcnt++;</span><br><span class=\"line\">\t\t\t\tvis[p] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tp = a[p];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcnta[cnt]++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(<span class=\"keyword\">int</span>) * m);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(vis[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\tvis[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> cnt = <span class=\"number\">1</span>, p = b[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(p != i) &#123;</span><br><span class=\"line\">\t\t\t\tcnt++;</span><br><span class=\"line\">\t\t\t\tvis[p] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tp = b[p];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcntb[cnt]++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!cnta[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= i; ++j) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(i % j == <span class=\"number\">0</span>) </span><br><span class=\"line\">\t\t\t\t\ttot += j * cntb[j];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tans = <span class=\"number\">1LL</span> * ans * <span class=\"built_in\">qp</span>(tot, cnta[i]) % mod;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case #%d: %d\\n&quot;</span>, ++cas, ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"h.-hints-of-sd0061\">H. Hints of sd0061</h2>\n<p>你有1e7个数（由数据生成器生成），<span\nclass=\"math inline\">\\(m\\)</span>次询问<span\nclass=\"math inline\">\\(b_{1..m}\\)</span>，每次询问第<span\nclass=\"math inline\">\\(b_i+1\\)</span>小的是哪个，其中<span\nclass=\"math inline\">\\(m\\le100\\)</span>,且保证$b_i+b_jb_k if b_ib_j,b_ib_k,\nb_j b_k $</p>\n<p>首先注意到<span\nclass=\"math inline\">\\(b\\)</span>的限制，这保证了不同的<span\nclass=\"math inline\">\\(b\\)</span>至多只有<span\nclass=\"math inline\">\\(\\log(1e7)\\)</span>这么多个（斐波那契数列），然后考虑库函数<span\nclass=\"math inline\">\\(nth\\_element\\)</span>,对询问进行从大到小处理，可以有效降低复杂度，复杂度<span\nclass=\"math inline\">\\(O(Tn)\\)</span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e7</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, cas = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> a[N], A, B, C;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> ans[<span class=\"number\">110</span>];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">qu</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> b, id;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> qu &amp;rhs) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> b &lt; rhs.b;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;q[<span class=\"number\">110</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> x = A, y = B, z = C;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">unsigned</span> <span class=\"title\">rng61</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">unsigned</span> t;</span><br><span class=\"line\">\tx = x ^ (x &lt;&lt; <span class=\"number\">16</span>);</span><br><span class=\"line\">\tx = x ^ (x &gt;&gt; <span class=\"number\">5</span>);</span><br><span class=\"line\">\tx = x ^ (x &lt;&lt; <span class=\"number\">1</span>);</span><br><span class=\"line\">\tt = x;</span><br><span class=\"line\">\tx = y;</span><br><span class=\"line\">\ty = z;</span><br><span class=\"line\">\tz = (t ^ x) ^ y;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> z;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%u%u%u&quot;</span>, &amp;n, &amp;m, &amp;A, &amp;B, &amp;C)) &#123;</span><br><span class=\"line\">\t\tx = A; y = B; z = C;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t\ta[i] = <span class=\"built_in\">rng61</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;q[i].b);</span><br><span class=\"line\">\t\t\tq[i].id = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">sort</span>(q + <span class=\"number\">1</span>, q + m + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tq[m + <span class=\"number\">1</span>].b = n - <span class=\"number\">1</span>; q[m + <span class=\"number\">1</span>].id = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">nth_element</span>(a, a + n - <span class=\"number\">1</span>, a + n);</span><br><span class=\"line\">\t\tans[<span class=\"number\">0</span>] = a[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = m; i; --i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(q[i].b == q[i + <span class=\"number\">1</span>].b) &#123;</span><br><span class=\"line\">\t\t\t\tans[q[i].id] = ans[q[i + <span class=\"number\">1</span>].id];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">nth_element</span>(a, a + q[i].b, a + q[i + <span class=\"number\">1</span>].b);</span><br><span class=\"line\">\t\t\tans[q[i].id] = a[q[i].b];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case #%d:&quot;</span>, ++cas);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot; %u&quot;</span>, ans[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"i.-i-curse-myself\">I. I curse myself</h2>\n<p>给你一颗<span class=\"math inline\">\\(n\\)</span>个点<span\nclass=\"math inline\">\\(m\\)</span>条边仙人掌，定义<span\nclass=\"math inline\">\\(V(k)\\)</span>为该仙人掌的第<span\nclass=\"math inline\">\\(k\\)</span>小生成树的权值(若生成树数量小于<span\nclass=\"math inline\">\\(k\\)</span>则为0)，求<span\nclass=\"math display\">\\[\\sum\\limits_{k=1}^{k=K}kV(k)\\]</span>, <span\nclass=\"math inline\">\\(2\\le n\\le 1000, n-1\\le m\\le2n-3, 1\\le\nK\\le1e5\\)</span></p>\n<p>首先仙人掌的最小生成树是每一个环去掉一条边，问题变成了有若干个集合，每个集合取一个数求前<span\nclass=\"math inline\">\\(K\\)</span>大的和分别是啥，这是一个经典问题（...我怎么不知道），可以证明单组样例的复杂度为<span\nclass=\"math inline\">\\(O(mK)\\)</span>，考虑如下合并算法:</p>\n<p>合并两个集合(数组)A, B, 将A从大到小排列，向大根堆中加入<span\nclass=\"math inline\">\\(A[0]+B[j]\\)</span>, 然后每次取出一个数<span\nclass=\"math inline\">\\(A[i]+B[j]\\)</span>, 向堆中加入<span\nclass=\"math inline\">\\(A[i+1]+B[j]\\)</span>,直到堆空或者取了<span\nclass=\"math inline\">\\(K\\)</span>个为止，复杂度为<span\nclass=\"math inline\">\\(O(K\\log(B.size))\\)</span>, 可以让每次合并是<span\nclass=\"math inline\">\\(B\\)</span>是新找到的环，那么总复杂度为<span\nclass=\"math inline\">\\(O(K\\sum\\log c_i),\nc_i\\)</span>为环长，然后经过数学推导可得出复杂度为<span\nclass=\"math inline\">\\(O(mK)\\)</span>, ps:如果合并时让<span\nclass=\"math inline\">\\(B\\)</span>是之前已合并的集合那么复杂度就是<span\nclass=\"math inline\">\\(O(mK\\log(K))\\)</span>了，会TLE</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; tmp, now;</span><br><span class=\"line\">vector&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; G[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> fa[N], dep[N], val[N], n, m, k, cas;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tot, ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> val, x, y;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> node &amp;rhs) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> val &lt; rhs.val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">merge</span><span class=\"params\">(vector&lt;<span class=\"keyword\">int</span>&gt; &amp;now, vector&lt;<span class=\"keyword\">int</span>&gt; &amp;rhs)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(now.<span class=\"built_in\">begin</span>(), now.<span class=\"built_in\">end</span>(), greater&lt;<span class=\"keyword\">int</span>&gt;());</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(rhs.<span class=\"built_in\">begin</span>(), rhs.<span class=\"built_in\">end</span>(), greater&lt;<span class=\"keyword\">int</span>&gt;());</span><br><span class=\"line\">\ttmp.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\tpriority_queue&lt;node&gt; pq;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; rhs.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">\t\tpq.<span class=\"built_in\">push</span>((node)&#123;now[<span class=\"number\">0</span>] + rhs[i], <span class=\"number\">0</span>, i&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(tmp.<span class=\"built_in\">size</span>() &lt; k &amp;&amp; !pq.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\tnode u = pq.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">\t\tpq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\ttmp.<span class=\"built_in\">push_back</span>(u.val);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(u.x + <span class=\"number\">1</span> &lt; now.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">\t\t\tpq.<span class=\"built_in\">push</span>((node)&#123;now[u.x + <span class=\"number\">1</span>] + rhs[u.y], u.x + <span class=\"number\">1</span>, u.y&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tnow = tmp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> pre, <span class=\"keyword\">int</span> depth, <span class=\"keyword\">int</span> value)</span> </span>&#123;</span><br><span class=\"line\">\tdep[rt] = depth;</span><br><span class=\"line\">\tfa[rt] = pre;</span><br><span class=\"line\">\tval[rt] = value;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; G[rt].<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">\t\tpair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; u = G[rt][i], tmp;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(u.first == pre) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(dep[u.first]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(dep[u.first] &lt; dep[rt]) &#123;</span><br><span class=\"line\">\t\t\t\tvector&lt;<span class=\"keyword\">int</span>&gt; v;</span><br><span class=\"line\">\t\t\t\tv.<span class=\"built_in\">push_back</span>(u.second);</span><br><span class=\"line\">\t\t\t\ttmp = <span class=\"built_in\">make_pair</span>(rt, val[rt]);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(tmp.first != u.first) &#123;</span><br><span class=\"line\">\t\t\t\t\tv.<span class=\"built_in\">push_back</span>(tmp.second);</span><br><span class=\"line\">\t\t\t\t\ttmp = <span class=\"built_in\">make_pair</span>(fa[tmp.first], val[fa[tmp.first]]);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">merge</span>(now, v);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs</span>(u.first, rt, depth + <span class=\"number\">1</span>, u.second);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tnow.<span class=\"built_in\">reserve</span>(<span class=\"number\">1000001</span>); tmp.<span class=\"built_in\">reserve</span>(<span class=\"number\">1000001</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m)) &#123;</span><br><span class=\"line\">\t\ttot = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> a, b, c;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class=\"line\">\t\t\tG[a].<span class=\"built_in\">push_back</span>(<span class=\"built_in\">make_pair</span>(b, c));</span><br><span class=\"line\">\t\t\tG[b].<span class=\"built_in\">push_back</span>(<span class=\"built_in\">make_pair</span>(a, c));</span><br><span class=\"line\">\t\t\ttot += c;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tnow.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\tnow.<span class=\"built_in\">push_back</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;k);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!dep[i])</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">dfs</span>(i, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; now.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">\t\t\tans += <span class=\"number\">1LL</span> * (i + <span class=\"number\">1</span>) * (tot - now[i]);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case #%d: %lld\\n&quot;</span>, ++cas, ans % (<span class=\"number\">1LL</span> &lt;&lt; <span class=\"number\">32</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\tG[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t\tdep[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"k.-kazaqs-socks\">K. KazaQ's socks</h2>\n<p><span\nclass=\"math inline\">\\(n\\)</span>双袜子，一开始每双都是干净的，每天早上会选一双编号最小的干净的穿，若是有一天晚上发现脏袜子数量等于<span\nclass=\"math inline\">\\(n-1\\)</span>则会洗了这些袜子，第二天晾干，第三天早上可用，给定<span\nclass=\"math inline\">\\(k\\)</span>，问第<span\nclass=\"math inline\">\\(k\\)</span>天穿的袜子编号</p>\n<p>打表发现规律是<span\nclass=\"math inline\">\\(1,2,3,....,n\\)</span>然后<span\nclass=\"math inline\">\\(1,2,3...,n-2,n-1,1,2,3....n-2,n\\)</span>开始循环，循环节长度为<span\nclass=\"math inline\">\\(2*(n-1)\\)</span>,直接求即可</p>\n<h2 id=\"l.-limited-permutation\">L. Limited Permutation</h2>\n<p>你有一个1-n的排列p, 有两个长为n的数组l, r,满足<span\nclass=\"math inline\">\\(\\min\\limits_{j = L}^Rp_j=p_i\\ iff\\ l_i\\le L\\le\ni\\le R\\le r_i\\)</span>,求满足条件的排列<span\nclass=\"math inline\">\\(p\\)</span>的数量<span class=\"math inline\">\\(1\\le\nn\\le 1e6\\)</span></p>\n<p>分析一下条件，意为<span class=\"math inline\">\\(p_i\\)</span>是<span\nclass=\"math inline\">\\(p_{l_i},p_{l_i+1},...p_{r_i}\\)</span>这些数中最小值且<span\nclass=\"math inline\">\\(p_i\\gt p_{l_i-1}, p_i\\gt p_{r_i+1}\\)</span></p>\n<p>考虑dfs(l ,r), 意为l到r放1 ~\nr-l+1的排列方案数，首先这些数中一定有且仅有一个数<span\nclass=\"math inline\">\\(i\\)</span>满足<span class=\"math inline\">\\(l_i=l,\nr_i=r\\)</span>(若没有或有多个则无解)，表示这些数中的最小值，然后它将<span\nclass=\"math inline\">\\((l, r)\\)</span>划分为两个区间<span\nclass=\"math inline\">\\((l, i-1)\\)</span>和<span\nclass=\"math inline\">\\((i+1, r)\\)</span>, 方案数要乘上<span\nclass=\"math inline\">\\(C(r-l,\ni-l)\\)</span>,需要注意无解情况的判断，复杂度<span\nclass=\"math inline\">\\(O(Tn\\log(n))\\)</span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e6</span> + <span class=\"number\">10</span>, mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> fac[N], facinv[N]; </span><br><span class=\"line\"><span class=\"keyword\">int</span> n, cas, l[N], r[N], ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">qp</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) </span><br><span class=\"line\">\t\t\tres = res * a % mod;</span><br><span class=\"line\">\t\ta = a * a % mod;</span><br><span class=\"line\">\t\tn &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tfac[<span class=\"number\">0</span>] = fac[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; N; ++i)</span><br><span class=\"line\">\t\tfac[i] = <span class=\"number\">1LL</span> * i * fac[i - <span class=\"number\">1</span>] % mod;</span><br><span class=\"line\">\tfacinv[N - <span class=\"number\">1</span>] = <span class=\"built_in\">qp</span>(fac[N - <span class=\"number\">1</span>], mod - <span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = N - <span class=\"number\">2</span>; ~i; --i) </span><br><span class=\"line\">\t\tfacinv[i] = <span class=\"number\">1LL</span> * facinv[i + <span class=\"number\">1</span>] * (i + <span class=\"number\">1</span>) % mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">C</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1LL</span> * fac[n] * facinv[m] % mod * facinv[n - m] % mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; mp[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\tvector&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt;::iterator s = <span class=\"built_in\">lower_bound</span>(mp[l].<span class=\"built_in\">begin</span>(), mp[l].<span class=\"built_in\">end</span>(), <span class=\"built_in\">make_pair</span>(r, <span class=\"number\">0</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(s == mp[l].<span class=\"built_in\">end</span>() || s-&gt;first != r) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s-&gt;second;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> pos = <span class=\"built_in\">find</span>(l, r);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pos == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(pos != l) ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pos == l) </span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs</span>(l + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pos == r)</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs</span>(l, r - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tans = <span class=\"number\">1LL</span> * ans * <span class=\"built_in\">C</span>(r - l, pos - l) % mod; </span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs</span>(l, pos - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs</span>(pos + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n)) &#123;</span><br><span class=\"line\">\t\tans = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;l[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;r[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\tmp[l[i]].<span class=\"built_in\">emplace_back</span>(r[i], i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) <span class=\"built_in\">sort</span>(mp[i].<span class=\"built_in\">begin</span>(), mp[i].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j + <span class=\"number\">1</span> &lt; mp[i].<span class=\"built_in\">size</span>(); ++j)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(mp[i][j].first == mp[i][j + <span class=\"number\">1</span>].first)</span><br><span class=\"line\">\t\t\t\t\tans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ans)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, n);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case #%d: %d\\n&quot;</span>, ++cas, ans);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) mp[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["杭电多校"]},{"title":"2019杭电多校第十场","url":"/posts/c167b3d6.html","content":"<p>这次终于不是苟上的首页了</p>\n<h2 id=\"valentines-day\">1003. Valentine's Day</h2>\n<p>solved at 01:02</p>\n<p><span class=\"math inline\">\\(n\\)</span>个物品,每个物品有<span\nclass=\"math inline\">\\(p_i\\)</span>的概率使你快乐,每个物品是否让你快乐是独立事件,你要选择一个子集,使得你快乐次数恰好为一的概率最大\n<span id=\"more\"></span>\n我并不是一个数学选手,读完之后就交给zggg了,然而zggg一直没搞出来,我突然想起来这题我好像去年做过?!一翻vjudge果然如此,改了一下读入就过了...</p>\n<p>就是选择的一定是<span\nclass=\"math inline\">\\(p\\)</span>最大的若干个(选了的物品的p值一定大于等于没选的),证明可以去看codeforces442B的官方题解</p>\n<h2 id=\"welcome-party\">1005. Welcome Party</h2>\n<p>solved at 01:24(+1)</p>\n<p>队友翻译后的题意:有n个物品<span\nclass=\"math inline\">\\((2&lt;=n&lt;=1e5)\\)</span>,每个物品有两个权值<span\nclass=\"math inline\">\\(a_i, b_i\\)</span>,\n你要将这些物品划分成两个非空集合A,\nB,使得A中物品的最大a值与B中物品的最大b值的差值的绝对值最小</p>\n<p>首先按a排序,然后从大到小枚举<span\nclass=\"math inline\">\\(a_i\\)</span>作为A中的最大值,那么a值更大的一定在集合B里,只要然后lower_bound在尚未枚举到的物品(a值小于等于当前枚举的物品)里找第一个大于等于当前枚举的a值的b值,然后再找它的前一个(最后一个小于当前枚举a值的),然后和已经枚举过了的物品的最大b值比较一下看哪些值可以作为最大b值更新答案即可,可以用multiset维护</p>\n<p>队友写的不放代码了</p>\n<h2 id=\"coins\">1008. Coins</h2>\n<p>sovled at 03:08(+2)</p>\n<p>有<span\nclass=\"math inline\">\\(n(1&lt;=n&lt;=1e5)\\)</span>组物品,每组物品有两个,价值分别为<span\nclass=\"math inline\">\\(a_i,\nb_i\\)</span>,你要选择k个物品最大化物品价值,限制条件是如果你选了某一组的b,那你必须选这一组的a,输出<span\nclass=\"math inline\">\\(2n\\)</span>个数,代表<span\nclass=\"math inline\">\\(k\\)</span>从<span\nclass=\"math inline\">\\(1\\)</span>到<span\nclass=\"math inline\">\\(2n\\)</span>的答案</p>\n<p>队友给了一个奇诡的贪心方案,对于一组物品,如果a大于等于b,则把a,b视为两个物品,否则将ab合并视为1个size为2权值为平均值的物品,将这若干个物品排序,然后每个<span\nclass=\"math inline\">\\(k\\)</span>单独处理</p>\n<p>对于一个<span\nclass=\"math inline\">\\(k\\)</span>,直接看后k个物品,即选择<span\nclass=\"math inline\">\\([2n-k+1,\n2n]\\)</span>区间内的物品,如果说这个区间是合法的,那么区间物品的值加起来就是答案</p>\n<p>如果这个区间不合法,即<span class=\"math inline\">\\(2n-k\\)</span>和<span\nclass=\"math inline\">\\(2n-k+1\\)</span>是一个size为2的物品,那么有两种情况,一种是选择这个size为2的物品,那么就要舍弃一个已选的物品,舍弃最小的一个就好了,可以舍弃的是所有独立物品和合并物品的b(不会导致不合法情况,因为你如果舍弃的是一个独立a那么它的对应b必然没有被选(否则因为它们是独立的,b肯定比a小,那么a不可能是最小的)),第二种是不选择这个物品,那么没选的里面找一个最大的,可以找所有的独立物品以及合并物品的a(同理也不会导致非法情况),要注意当前这个合并物品的a也可以取</p>\n<p>虽然不是我写的但还是放出来给大家感受一下这神奇的贪心</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> maxn=<span class=\"number\">1e5</span>+<span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a[maxn],b[maxn];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">ele</span>&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> val,sz;</span><br><span class=\"line\">    <span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> ele&amp; oth) <span class=\"keyword\">const</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> val&lt;oth.val;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector &lt;ele&gt; arr;</span><br><span class=\"line\">vector &lt;<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt; mmax;</span><br><span class=\"line\">vector &lt;<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt; ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">        arr.<span class=\"built_in\">clear</span>();ans.<span class=\"built_in\">clear</span>();mmax.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>;i&lt;=n;i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld%lld&quot;</span>,&amp;a[i],&amp;b[i]);</span><br><span class=\"line\">            a[i]*=<span class=\"number\">2</span>;b[i]*=<span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (a[i]&gt;=b[i]) arr.<span class=\"built_in\">push_back</span>(&#123;i,a[i],<span class=\"number\">1</span>&#125;),arr.<span class=\"built_in\">push_back</span>(&#123;i,b[i],<span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> arr.<span class=\"built_in\">push_back</span>(&#123;i,(a[i]+b[i])/<span class=\"number\">2</span>,<span class=\"number\">2</span>&#125;);</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(arr.<span class=\"built_in\">begin</span>(),arr.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;arr.<span class=\"built_in\">size</span>();i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[i].sz==<span class=\"number\">1</span>)tmp=arr[i].val;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> tmp=a[arr[i].id];</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (mmax.<span class=\"built_in\">size</span>()==<span class=\"number\">0</span>) mmax.<span class=\"built_in\">push_back</span>(tmp);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> mmax.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">max</span>(mmax[mmax.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>],tmp));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mmin=<span class=\"number\">1e18</span>;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=arr.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>;i&gt;=<span class=\"number\">0</span>;i--)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[i].sz==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                sum+=arr[i].val;</span><br><span class=\"line\">                ans.<span class=\"built_in\">push_back</span>(sum);</span><br><span class=\"line\">                mmin=<span class=\"built_in\">min</span>(mmin,arr[i].val);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp=<span class=\"number\">0</span>;</span><br><span class=\"line\">                tmp=sum-mmin+arr[i].val*<span class=\"number\">2</span>;</span><br><span class=\"line\">                tmp=<span class=\"built_in\">max</span>(tmp,sum+mmax[i]);</span><br><span class=\"line\">                ans.<span class=\"built_in\">push_back</span>(tmp);</span><br><span class=\"line\">                sum+=arr[i].val*<span class=\"number\">2</span>;ans.<span class=\"built_in\">push_back</span>(sum);</span><br><span class=\"line\">                mmin=<span class=\"built_in\">min</span>(mmin,b[arr[i].id]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;ans.<span class=\"built_in\">size</span>();i++) <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld%c&quot;</span>,ans[i]/<span class=\"number\">2</span>,<span class=\"string\">&quot; \\n&quot;</span>[i==ans.<span class=\"built_in\">size</span>()<span class=\"number\">-1</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"block-breaker\">1009. Block Breaker</h2>\n<p>solved at 00:37</p>\n<p>签到题,bfs即可</p>\n<h2 id=\"make-rounddog-happy\">1011. Make Rounddog Happy</h2>\n<p>solved at 04:20(+1)</p>\n<p>一个长为<span\nclass=\"math inline\">\\(n(1&lt;=n&lt;=3e5)\\)</span>的数列,定义一个区间是快乐的当且仅当这个区间的元素两两不同并且区间最大值减去区间长度小于等于<span\nclass=\"math inline\">\\(k\\)</span>(一个给定值), 求快乐的区间个数</p>\n<p>一开始没看到元素互异,那就是个单调栈裸题...</p>\n<p>对于位置<span class=\"math inline\">\\(i\\)</span>上的数<span\nclass=\"math inline\">\\(a_i\\)</span>, 处理出四个数,以<span\nclass=\"math inline\">\\(a_i\\)</span>为最大值的最左位置<span\nclass=\"math inline\">\\(l_i\\)</span>, 最右位置<span\nclass=\"math inline\">\\(r_i\\)</span>(这两个数组用单调栈线性求出), 以<span\nclass=\"math inline\">\\(a_i\\)</span>为左端点,能保证元素互异的最右位置<span\nclass=\"math inline\">\\(isl_i\\)</span>,以及为右端点的最左位置<span\nclass=\"math inline\">\\(isr_i\\)</span>(这两个数组用双指针线性求出)</p>\n<p>然后你要写这样一个函数calc(len, L,\nR)即某个给定的数左边有L个可以选,右边有R个(均不包括本身),\n必须选这个给定的数,要求区间长度大于等于len的方案数,这个函数一次调用应当是常数时间的(这个函数是我队友写的)</p>\n<p>考虑每个位置<span\nclass=\"math inline\">\\(i\\)</span>,它作为最大值能产生贡献的区间是<span\nclass=\"math inline\">\\([\\max(l_i, isr_i), \\min(r_i, isl_i)]\\)</span>, 以1\n2 3 6 5 1 2 3为例, 当前到是位置4(即数字6),\n枚举一边的端点计算贡献,以枚举左端点为例,左端点为1时能产生贡献的右端点是5,即把(1,\n2, 3, 6,\n5)能产生的贡献加到答案里去,然后考虑左端点为2,把(2,3,6,5,1)产生的贡献加到答案里,此时(2,3,6,5)的贡献被重复计算了,需要减掉,依次类推,最后以4位置的6为最大值的贡献就是<span\nclass=\"math inline\">\\(f(1,2,3,6,5)+f(2,3,6,5,1)-f(2,3,6,5)+f(3,6,5,1,2)-f(3,6,5,1)+f(6,5,1,2,3)-f(6,5,1,2)\\)</span></p>\n<p>如果你每次枚举的都是左端点,那么肯定会TLE,\n应当枚举左右两边较短的那一边,复杂度并不会分析,随机数据3e5大概总和是1.2e6次,我猜总复杂度是<span\nclass=\"math inline\">\\(nlogn\\)</span>的</p>\n<p>当然也可以用分治做</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">3e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> T, a[N], n, k, l[N], r[N], isl[N], isr[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> stk[N], top;</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt[N];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> v, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> L, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> R)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v &lt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (L + <span class=\"number\">1</span>) * (R + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L + R + <span class=\"number\">1</span> &lt; v) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    v--;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> l1 = <span class=\"built_in\">max</span>(v - R, <span class=\"number\">0LL</span>), l2 = L;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> l3 = <span class=\"built_in\">min</span>(v, l2);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (l3 + l1) * (l3 - l1 + <span class=\"number\">1</span>) / <span class=\"number\">2</span> + (l3 - l1 + <span class=\"number\">1</span>) * (R - v + <span class=\"number\">1</span>) + <span class=\"built_in\">max</span>(<span class=\"number\">0LL</span>, l2 - v) * (R + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class=\"line\">        ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]); cnt[a[i]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        top = <span class=\"number\">0</span>;</span><br><span class=\"line\">        a[<span class=\"number\">0</span>] = a[n + <span class=\"number\">1</span>] = <span class=\"number\">1e9</span>;</span><br><span class=\"line\">        stk[top++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>, j = <span class=\"number\">0</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(a[stk[top - <span class=\"number\">1</span>]] &lt; a[i]) top--;</span><br><span class=\"line\">            l[i] = stk[top - <span class=\"number\">1</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            stk[top++] = i;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(j &lt; n &amp;&amp; cnt[a[j + <span class=\"number\">1</span>]] == <span class=\"number\">0</span>) cnt[a[++j]]++;</span><br><span class=\"line\">        \tisl[i] = j;</span><br><span class=\"line\">        \tcnt[a[i]]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) cnt[a[i]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        top = <span class=\"number\">0</span>;</span><br><span class=\"line\">        stk[top++] = n + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n, j = n + <span class=\"number\">1</span>; i &gt;= <span class=\"number\">1</span>; --i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(a[stk[top - <span class=\"number\">1</span>]] &lt; a[i]) top--;</span><br><span class=\"line\">            r[i] = stk[top - <span class=\"number\">1</span>] - <span class=\"number\">1</span>;</span><br><span class=\"line\">            stk[top++] = i;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(j &gt; <span class=\"number\">1</span> &amp;&amp; cnt[a[j - <span class=\"number\">1</span>]] == <span class=\"number\">0</span>) cnt[a[--j]]++;</span><br><span class=\"line\">            isr[i] = j;</span><br><span class=\"line\">            cnt[a[i]]--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> len = a[i] - k;</span><br><span class=\"line\">            l[i] = <span class=\"built_in\">max</span>(l[i], isr[i]);</span><br><span class=\"line\">            r[i] = <span class=\"built_in\">min</span>(r[i], isl[i]);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l[i] + r[i] &gt; i * <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            \t<span class=\"keyword\">int</span> le = l[i], ri = <span class=\"built_in\">min</span>(r[i], isl[le]), pre = ri;</span><br><span class=\"line\">            \tans += <span class=\"built_in\">calc</span>(len, i - le, ri - i);</span><br><span class=\"line\">            \t<span class=\"keyword\">for</span>(le++; le &lt;= i; ++le) &#123;</span><br><span class=\"line\">            \t\tri = <span class=\"built_in\">min</span>(r[i], isl[le]);</span><br><span class=\"line\">            \t\tans += <span class=\"built_in\">calc</span>(len, i - le, ri - i);</span><br><span class=\"line\">            \t\tans -= <span class=\"built_in\">calc</span>(len, i - le, pre - i);</span><br><span class=\"line\">            \t\tpre = ri;</span><br><span class=\"line\">            \t&#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            \t<span class=\"keyword\">int</span> ri = r[i], le = <span class=\"built_in\">max</span>(l[i], isr[ri]), pre = le;</span><br><span class=\"line\">            \tans += <span class=\"built_in\">calc</span>(len, i - le, ri - i);</span><br><span class=\"line\">            \t<span class=\"keyword\">for</span>(ri--; ri &gt;= i; --ri) &#123;</span><br><span class=\"line\">            \t\tle = <span class=\"built_in\">max</span>(l[i], isr[ri]);</span><br><span class=\"line\">            \t\tans += <span class=\"built_in\">calc</span>(len, i - le, ri - i);</span><br><span class=\"line\">            \t\tans -= <span class=\"built_in\">calc</span>(len, i - pre, ri - i);</span><br><span class=\"line\">            \t\tpre = le;</span><br><span class=\"line\">            \t&#125; </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>多校打完了,是时候整理一波模板了,<del>和去年一样都是灰名并没有什么区别</del>,明显感受到这次多校曲线总体趋势是上升的,那么下半年加油吧</p>\n","categories":["算法"],"tags":["杭电多校"]},{"title":"2019杭电多校第九场","url":"/posts/44559612.html","content":"<p>熟悉的后半场挂机节奏，又苟进首页了，很快乐</p>\n<p>##1001. Rikka with Quicksort</p>\n<p>upsolved</p>\n<p>不是我做的,1e9调和级数分段打表 <span id=\"more\"></span> ## 1002. Rikka with\nCake</p>\n<p>solved at 01:11</p>\n<p>有一个矩形，给你很多射线（射线只有横平竖直的四个方向），问把矩形切成了多少块</p>\n<p>队友说答案是交点数加一，作为一个合格的工具人，当然是把队友的想法实现啦</p>\n<p>二维坐标离散化枚举纵坐标维护横坐标，常规套路，树状数组也可以做（我是线段树写习惯了根本没想起来还有树状数组）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">P</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x, y;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span> op[<span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;a[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b[N], totx, toty;</span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n, m, K;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; in[N], out[N], le[N], ri[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> sum[N &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">\tsum[rt] = sum[rt &lt;&lt; <span class=\"number\">1</span>] + sum[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">\t\tsum[rt] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">\t\tsum[rt] += val;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pos &lt;= mid) <span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, pos, val);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, pos, val);</span><br><span class=\"line\">\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R) </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sum[rt];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>, ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= mid) ans += <span class=\"built_in\">query</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, L, R);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(R &gt; mid) ans += <span class=\"built_in\">query</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, L, R);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\tans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;K);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= K; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%s&quot;</span>, &amp;a[i].x, &amp;a[i].y, a[i].op);</span><br><span class=\"line\">\t\t\tb[i] = a[i].x;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">sort</span>(b + <span class=\"number\">1</span>, b + K + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\ttotx = <span class=\"built_in\">unique</span>(b + <span class=\"number\">1</span>, b + K + <span class=\"number\">1</span>) - b - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= K; ++i) </span><br><span class=\"line\">\t\t\ta[i].x = <span class=\"built_in\">lower_bound</span>(b + <span class=\"number\">1</span>, b + totx + <span class=\"number\">1</span>, a[i].x) - b;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= K; ++i) </span><br><span class=\"line\">\t\t\tb[i] = a[i].y;</span><br><span class=\"line\">\t\t<span class=\"built_in\">sort</span>(b + <span class=\"number\">1</span>, b + K + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\ttoty = <span class=\"built_in\">unique</span>(b + <span class=\"number\">1</span>, b + K + <span class=\"number\">1</span>) - b - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= K; ++i) </span><br><span class=\"line\">\t\t\ta[i].y = <span class=\"built_in\">lower_bound</span>(b + <span class=\"number\">1</span>, b + toty + <span class=\"number\">1</span>, a[i].y) - b;</span><br><span class=\"line\">\t\t<span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, totx);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= K; ++i) </span><br><span class=\"line\">\t\t\tin[i].<span class=\"built_in\">clear</span>(), out[i].<span class=\"built_in\">clear</span>(), le[i].<span class=\"built_in\">clear</span>(), ri[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= K; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(a[i].op[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;U&#x27;</span>)</span><br><span class=\"line\">\t\t\t\tin[a[i].y].<span class=\"built_in\">push_back</span>(a[i].x);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[i].op[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;D&#x27;</span>) &#123;</span><br><span class=\"line\">\t\t\t\tout[a[i].y].<span class=\"built_in\">push_back</span>(a[i].x);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, totx, a[i].x, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(a[i].op[<span class=\"number\">0</span>] == <span class=\"string\">&#x27;L&#x27;</span>) </span><br><span class=\"line\">\t\t\t\tle[a[i].y].<span class=\"built_in\">push_back</span>(a[i].x);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tri[a[i].y].<span class=\"built_in\">push_back</span>(a[i].x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= toty; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> f: in[i])</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, totx, f, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> l = <span class=\"number\">0</span>, r = <span class=\"number\">1e9</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> f: le[i])</span><br><span class=\"line\">\t\t\t\tl = <span class=\"built_in\">max</span>(l, f);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> f: ri[i])</span><br><span class=\"line\">\t\t\t\tr = <span class=\"built_in\">min</span>(r, f);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(l &gt;= r) </span><br><span class=\"line\">\t\t\t\tans += sum[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(l != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\t\tans += <span class=\"built_in\">query</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, totx, <span class=\"number\">1</span>, l);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(r != <span class=\"number\">1e9</span>)</span><br><span class=\"line\">\t\t\t\t\tans += <span class=\"built_in\">query</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, totx, r, totx);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//cout &lt;&lt; &quot;ans = &quot; &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> f: out[i])</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, totx, f, <span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"rikka-with-mista\">1003. Rikka with Mista</h2>\n<p>upsolved</p>\n<p>至多40个数，对每一个子集求其所有数的和的十进制表示里<span\nclass=\"math inline\">\\(4\\)</span>的个数，对所有子集求和</p>\n<p>先折半，然后按十进制位考虑，双指针查询（不用多次排序，只要在一次完整的基数排序的过程中计算就好了）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> LL = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">num</span> &#123;</span></span><br><span class=\"line\">\tLL l, r;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">LL ans, base;</span><br><span class=\"line\">vector&lt;num&gt; x, y, A[<span class=\"number\">10</span>], B[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n, p, q, w[<span class=\"number\">50</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> now, <span class=\"keyword\">int</span> step, LL tmp, vector&lt;num&gt; &amp;x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(now == step) &#123;</span><br><span class=\"line\">\t\tx.<span class=\"built_in\">push_back</span>(&#123;tmp, <span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(now + <span class=\"number\">1</span>, step, tmp, x);</span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(now + <span class=\"number\">1</span>, step, tmp + w[now], x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">get0</span><span class=\"params\">(vector&lt;num&gt; &amp;A, vector&lt;num&gt; &amp;B, LL limit)</span> </span>&#123;</span><br><span class=\"line\">\tLL res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j = B.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; A.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(j &gt;= <span class=\"number\">0</span> &amp;&amp; A[i].r + B[j].r &gt;= limit) j--;</span><br><span class=\"line\">\t\tres += j + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">get1</span><span class=\"params\">(vector&lt;num&gt; &amp;A, vector&lt;num&gt; &amp;B, LL limit)</span> </span>&#123;</span><br><span class=\"line\">\tLL res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = (<span class=\"keyword\">int</span>)A.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; ~i; --i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(j &lt; B.<span class=\"built_in\">size</span>() &amp;&amp; A[i].r + B[j].r &lt; limit) j++;</span><br><span class=\"line\">\t\tres += (<span class=\"keyword\">int</span>)B.<span class=\"built_in\">size</span>() - j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">        ans = <span class=\"number\">0</span>; base = <span class=\"number\">1</span>;</span><br><span class=\"line\">        x.<span class=\"built_in\">clear</span>(); y.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) </span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class=\"line\">       \tp = n / <span class=\"number\">2</span>;</span><br><span class=\"line\">       \t<span class=\"built_in\">dfs</span>(<span class=\"number\">0</span>, p, <span class=\"number\">0</span>, x);</span><br><span class=\"line\">       \t<span class=\"built_in\">dfs</span>(p, n, <span class=\"number\">0</span>, y);</span><br><span class=\"line\">       \t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> bit = <span class=\"number\">1</span>; bit &lt;= <span class=\"number\">9</span>; ++bit) &#123;</span><br><span class=\"line\">       \t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">9</span>; ++i)</span><br><span class=\"line\">        \t\tA[i].<span class=\"built_in\">clear</span>(), B[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        \t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> f: x) </span><br><span class=\"line\">        \t\tA[f.l % <span class=\"number\">10</span>].<span class=\"built_in\">push_back</span>(&#123;f.l / <span class=\"number\">10</span>, f.r&#125;);</span><br><span class=\"line\">        \t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> f: y)</span><br><span class=\"line\">        \t\tB[f.l % <span class=\"number\">10</span>].<span class=\"built_in\">push_back</span>(&#123;f.l / <span class=\"number\">10</span>, f.r&#125;);</span><br><span class=\"line\">        \t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">9</span>; ++i) &#123;</span><br><span class=\"line\">        \t\t<span class=\"keyword\">int</span> j1 = (<span class=\"number\">14</span> - i) % <span class=\"number\">10</span>, j2 = (<span class=\"number\">13</span> - i) % <span class=\"number\">10</span>;</span><br><span class=\"line\">        \t\tans += <span class=\"built_in\">get0</span>(A[i], B[j1], base) + <span class=\"built_in\">get1</span>(A[i], B[j2], base);</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        \t<span class=\"keyword\">int</span> nowx = <span class=\"number\">0</span>, nowy = <span class=\"number\">0</span>;</span><br><span class=\"line\">        \t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">9</span>; ++i) &#123;</span><br><span class=\"line\">        \t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> f: A[i])</span><br><span class=\"line\">        \t\t\tx[nowx++] = (num)&#123;f.l, f.r + i * base&#125;;</span><br><span class=\"line\">        \t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> f: B[i])</span><br><span class=\"line\">        \t\t\ty[nowy++] = (num)&#123;f.l, f.r + i * base&#125;;</span><br><span class=\"line\">        \t&#125;</span><br><span class=\"line\">        \tbase *= <span class=\"number\">10</span>;</span><br><span class=\"line\">       \t&#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"rikka-with-game\">1005. Rikka with Game</h2>\n<p>solved at 00:16</p>\n<p>一个字符串，两个人轮流操作，每个人有两种操作，一是立即终止游戏，二是将一个位置的字符变成下一个字符<span\nclass=\"math inline\">\\((a-&gt;b, b-&gt;c, ..., z-&gt;a)\\)</span></p>\n<p>第一个人想最小化字典序，第二个人想最大化字典序，求最后的字符串</p>\n<p>想一想，发现是不考虑前缀<span\nclass=\"math inline\">\\(y\\)</span>,　如果首个字母是<span\nclass=\"math inline\">\\(z\\)</span>则变成<span\nclass=\"math inline\">\\(b\\)</span>，否则不变</p>\n<h2 id=\"rikka-with-coin\">1006. Rikka with Coin</h2>\n<p>solved at 00:51(+7)</p>\n<p>有10,20,50,100四种面额的硬币，有<span\nclass=\"math inline\">\\(n\\)</span>种商品，每种价格已知，求最少的硬币数使得硬币面额能恰好组成任意一种商品</p>\n<p>设最贵的为<span\nclass=\"math inline\">\\(w\\)</span>，面额100的要么是<span\nclass=\"math inline\">\\(w/100\\)</span>个要么少一个，前三种暴力枚举</p>\n<p>一开始max写成min了一直TLE...</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">110</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n, w[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans, tmp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[<span class=\"number\">22</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">judge</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> z, <span class=\"keyword\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(vis));</span><br><span class=\"line\">\tvis[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= x; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">20</span>; j &gt;= <span class=\"number\">1</span>; --j)</span><br><span class=\"line\">\t\t\tvis[j] |= vis[j - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= y; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">20</span>; j &gt;= <span class=\"number\">2</span>; --j)</span><br><span class=\"line\">\t\t\tvis[j] |= vis[j - <span class=\"number\">2</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= z; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">20</span>; j &gt;= <span class=\"number\">5</span>; --j)</span><br><span class=\"line\">\t\t\tvis[j] |= vis[j - <span class=\"number\">5</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">bool</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> t = w[i] % <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(t &lt;= <span class=\"number\">20</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(t + d * <span class=\"number\">10</span> &gt;= w[i] &amp;&amp; vis[t]) &#123;flag = <span class=\"literal\">true</span>; <span class=\"keyword\">break</span>;&#125;</span><br><span class=\"line\">\t\t\tt += <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!flag) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(w[i] % <span class=\"number\">10</span>)</span><br><span class=\"line\">\t\t\t\tflag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t\t\tw[i] /= <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!flag) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">sort</span>(w + <span class=\"number\">1</span>, w + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\ttmp = w[n] / <span class=\"number\">10</span>;</span><br><span class=\"line\">\t\tans = <span class=\"number\">1e9</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt;= <span class=\"number\">10</span>; ++a) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>; b &lt;= <span class=\"number\">5</span>; ++b) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt;= <span class=\"number\">2</span>; ++c) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> d = <span class=\"built_in\">max</span>(<span class=\"number\">0</span>, tmp - <span class=\"number\">1</span>); d &lt;= tmp; ++d) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">judge</span>(a, b, c, d)) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tans = <span class=\"built_in\">min</span>(ans, a + b + c + d);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"rikka-with-travel\">1007. Rikka with Travel</h2>\n<p>solved at 02:13</p>\n<p>给定一颗树，求满足存在一条点数为<span\nclass=\"math inline\">\\(i\\)</span>的路径和一条点数为<span\nclass=\"math inline\">\\(j\\)</span>的路径且两条路径不相交的点对<span\nclass=\"math inline\">\\((i, j)\\)</span>的数量<span\nclass=\"math inline\">\\((1&lt;=n&lt;=1e5)\\)</span></p>\n<p>我又是个工具人</p>\n<p>树形dp</p>\n<p>枚举一条边把树切成两半，然后两边分别求直径，假设为a, b, 那么<span\nclass=\"math inline\">\\((1&lt;=i&lt;=a\\&amp;\\&amp;1&lt;=j&lt;=b)\\)</span>的点对都满足条件(<span\nclass=\"math inline\">\\(i, j\\)</span>可以互换)</p>\n<p>考虑两遍dfs,\n第一遍处理出这个点的子树的直径，这个点往下延伸的最远的三个儿子以及长度，这个点的最大以及次大儿子直径</p>\n<p>第二遍dfs处理出挖掉这个点的子树之后树的直径，可以用之前处理出的信息维护出来</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> answer;</span><br><span class=\"line\"><span class=\"keyword\">int</span> v[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n, x, y;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; G[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> mx[N][<span class=\"number\">3</span>], p[N][<span class=\"number\">3</span>], ans[N][<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> mxson[N][<span class=\"number\">2</span>], ps[N][<span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">\tmx[rt][<span class=\"number\">0</span>] = <span class=\"number\">1</span>; mx[rt][<span class=\"number\">1</span>] = <span class=\"number\">-1e9</span>; mx[rt][<span class=\"number\">2</span>] = <span class=\"number\">-1e9</span>;</span><br><span class=\"line\">\tp[rt][<span class=\"number\">0</span>] = rt; p[rt][<span class=\"number\">1</span>] = <span class=\"number\">-1</span>; mx[rt][<span class=\"number\">2</span>] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\tans[rt][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tmxson[rt][<span class=\"number\">0</span>] = mxson[rt][<span class=\"number\">1</span>] = <span class=\"number\">-1e9</span>;</span><br><span class=\"line\">\tps[rt][<span class=\"number\">0</span>] = ps[rt][<span class=\"number\">1</span>] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v: G[rt]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(v == fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs</span>(v, rt);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mx[rt][<span class=\"number\">2</span>] &lt; mx[v][<span class=\"number\">0</span>] + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tmx[rt][<span class=\"number\">2</span>] = mx[v][<span class=\"number\">0</span>] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tp[rt][<span class=\"number\">2</span>] = v;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mx[rt][<span class=\"number\">2</span>] &gt; mx[rt][<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(mx[rt][<span class=\"number\">2</span>], mx[rt][<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(p[rt][<span class=\"number\">2</span>], p[rt][<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mx[rt][<span class=\"number\">1</span>] &gt; mx[rt][<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(mx[rt][<span class=\"number\">1</span>], mx[rt][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(p[rt][<span class=\"number\">1</span>], p[rt][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ans[v][<span class=\"number\">0</span>] &gt; mxson[rt][<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">\t\t\tmxson[rt][<span class=\"number\">1</span>] = ans[v][<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\tps[rt][<span class=\"number\">1</span>] = v;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mxson[rt][<span class=\"number\">1</span>] &gt; mxson[rt][<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(mxson[rt][<span class=\"number\">1</span>], mxson[rt][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(ps[rt][<span class=\"number\">1</span>], ps[rt][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans[rt][<span class=\"number\">0</span>] = <span class=\"built_in\">max</span>(ans[rt][<span class=\"number\">0</span>], ans[v][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tans[rt][<span class=\"number\">0</span>] = <span class=\"built_in\">max</span>(mx[rt][<span class=\"number\">0</span>] + mx[rt][<span class=\"number\">1</span>] - <span class=\"number\">1</span>, ans[rt][<span class=\"number\">0</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> fa, <span class=\"keyword\">int</span> tmp, <span class=\"keyword\">int</span> len)</span> </span>&#123;</span><br><span class=\"line\">\tans[rt][<span class=\"number\">1</span>] = tmp;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> v: G[rt]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(v == fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> new_tmp = tmp;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> new_len = len + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(p[rt][<span class=\"number\">0</span>] != v) &#123;</span><br><span class=\"line\">\t\t\tnew_len = <span class=\"built_in\">max</span>(new_len, mx[rt][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(p[rt][<span class=\"number\">1</span>] != v) &#123;</span><br><span class=\"line\">\t\t\tnew_len = <span class=\"built_in\">max</span>(new_len, mx[rt][<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tvector&lt;<span class=\"keyword\">int</span>&gt; vv;</span><br><span class=\"line\">\t\tvv.<span class=\"built_in\">push_back</span>(len + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(p[rt][<span class=\"number\">0</span>] != v)</span><br><span class=\"line\">\t\t\tvv.<span class=\"built_in\">push_back</span>(mx[rt][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(p[rt][<span class=\"number\">1</span>] != v)</span><br><span class=\"line\">\t\t\tvv.<span class=\"built_in\">push_back</span>(mx[rt][<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(p[rt][<span class=\"number\">2</span>] != v)</span><br><span class=\"line\">\t\t\tvv.<span class=\"built_in\">push_back</span>(mx[rt][<span class=\"number\">2</span>]);</span><br><span class=\"line\">\t\t<span class=\"built_in\">sort</span>(vv.<span class=\"built_in\">begin</span>(), vv.<span class=\"built_in\">end</span>(), greater&lt;<span class=\"keyword\">int</span>&gt;());</span><br><span class=\"line\">\t\tnew_tmp = <span class=\"built_in\">max</span>(new_tmp, vv[<span class=\"number\">0</span>] + vv[<span class=\"number\">1</span>] - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ps[rt][<span class=\"number\">0</span>] != v)</span><br><span class=\"line\">\t\t\tnew_tmp = <span class=\"built_in\">max</span>(new_tmp, mxson[rt][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(ps[rt][<span class=\"number\">1</span>] != v)</span><br><span class=\"line\">\t\t\tnew_tmp = <span class=\"built_in\">max</span>(new_tmp, mxson[rt][<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs2</span>(v, rt, new_tmp, new_len);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\tanswer = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) G[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class=\"line\">\t\t\tG[x].<span class=\"built_in\">push_back</span>(y);</span><br><span class=\"line\">\t\t\tG[y].<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs2</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(v, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(<span class=\"keyword\">int</span>) * (n + <span class=\"number\">3</span>));</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> a = ans[i][<span class=\"number\">0</span>], b = ans[i][<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\tv[a] = <span class=\"built_in\">max</span>(v[a], b);</span><br><span class=\"line\">\t\t\tv[b] = <span class=\"built_in\">max</span>(v[b], a);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n; i; --i)</span><br><span class=\"line\">\t\t\tv[i] = <span class=\"built_in\">max</span>(v[i], v[i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\tanswer += v[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, answer);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["杭电多校"]},{"title":"2019牛客多校第十场","url":"/posts/4d58ef8f.html","content":"<h2 id=\"a.-blackjack\">A. Blackjack</h2>\n<p>upsolved</p>\n<p>题目等价于询问有<span class=\"math inline\">\\(n\\)</span>个有权值<span\nclass=\"math inline\">\\(x_i\\)</span>的物品的一个随机排列，设<span\nclass=\"math inline\">\\(pos\\)</span>为第一个前缀权值和大于<span\nclass=\"math inline\">\\(a\\)</span>的位置，求<span\nclass=\"math inline\">\\(\\sum \\limits_{i = 1}^{pos}\nx_i&lt;=b\\)</span>的概率<span class=\"math inline\">\\((1 &lt;= n &lt;=\n500, 1 &lt;= a &lt; b &lt;= 500, \\sum x_i&gt;b)\\)</span>\n<span id=\"more\"></span></p>\n<p><span class=\"math inline\">\\(O(n)\\)</span>枚举使得前缀权值和大于<span\nclass=\"math inline\">\\(a\\)</span>的物品，设<span\nclass=\"math inline\">\\(dp[i][j][k]\\)</span>表示不考虑当前枚举的物品<span\nclass=\"math inline\">\\(p\\)</span>，前<span\nclass=\"math inline\">\\(i\\)</span>个物品使用<span\nclass=\"math inline\">\\(j\\)</span>个权值和为<span\nclass=\"math inline\">\\(k\\)</span>的方案数，显然满足<span\nclass=\"math inline\">\\(n = i,0 &lt;= j &lt; n,max(0, a - x_p + 1) &lt;= k\n&lt;= min(a, b - x_p)\\)</span>的dp值会贡献到答案里去</p>\n<p>注意到此时的<span\nclass=\"math inline\">\\(dp\\)</span>值算的仅仅是组合，你要计算排列，方案数就要乘上</p>\n<p><span class=\"math inline\">\\(j!*(n-j-1)!\\)</span></p>\n<p>如果每次枚举都重新计算背包，复杂度就是<span\nclass=\"math inline\">\\(O(n^4)\\)</span>了，可以考虑退背包，先计算出包含所有物品的背包，然后每次枚举时撤销当前物品，计算完了再还原，时间复杂度就降为<span\nclass=\"math inline\">\\(O(n^3)\\)</span>，空间复杂度可以利用滚动数组优化成<span\nclass=\"math inline\">\\(O(n^2)\\)</span></p>\n<p>做完6题的时候没什么时间了，如果时间足够这题应该还是能做出来的...</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">510</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">double</span> dp[<span class=\"number\">2</span>][N][N], p[N], ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, a, b, x[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;n, &amp;a, &amp;b);</span><br><span class=\"line\">\tdp[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x[i]);</span><br><span class=\"line\">\t\t<span class=\"built_in\">memcpy</span>(dp[i &amp; <span class=\"number\">1</span>], dp[(i &amp; <span class=\"number\">1</span>) ^ <span class=\"number\">1</span>], <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(dp[<span class=\"number\">0</span>]));</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = x[i]; k &lt;= b; ++k)</span><br><span class=\"line\">\t\t\t\tdp[i &amp; <span class=\"number\">1</span>][j][k] += dp[(i &amp; <span class=\"number\">1</span>) ^ <span class=\"number\">1</span>][j - <span class=\"number\">1</span>][k - x[i]];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tp[<span class=\"number\">1</span>] = <span class=\"number\">1.0</span> / n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i) </span><br><span class=\"line\">\t\tp[i] = p[i - <span class=\"number\">1</span>] * (i - <span class=\"number\">1</span>) / (n - i + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j) </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = x[i]; k &lt;= b; ++k)</span><br><span class=\"line\">\t\t\t\tdp[n &amp; <span class=\"number\">1</span>][j][k] -= dp[n &amp; <span class=\"number\">1</span>][j - <span class=\"number\">1</span>][k - x[i]];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"built_in\">max</span>(<span class=\"number\">0</span>, a - x[i] + <span class=\"number\">1</span>); k &lt;= a &amp;&amp; k + x[i] &lt;= b; ++k)</span><br><span class=\"line\">\t\t\t\tans += dp[n &amp; <span class=\"number\">1</span>][j][k] * p[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = n; j &gt;= <span class=\"number\">1</span>; --j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = b; k &gt;= x[i]; --k)</span><br><span class=\"line\">\t\t\t\tdp[n &amp; <span class=\"number\">1</span>][j][k] += dp[n &amp; <span class=\"number\">1</span>][j - <span class=\"number\">1</span>][k - x[i]];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.15f\\n&quot;</span>, ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"b.-coffee-chicken\">B. Coffee Chicken</h2>\n<p>solved at 00:13(+1)</p>\n<p>考虑一种像斐波那契数列那样的字符串，<span class=\"math inline\">\\(s[1]\n= &quot;COFFEE&quot;, S[2] = &quot;CHICKEN&quot;, s[i] = s[i - 2] + s[i\n- 1](i&gt;2)\\)</span></p>\n<p>每次给你<span class=\"math inline\">\\(n, k(1&lt;=n&lt;=500,\n1&lt;=k&lt;=1e12)\\)</span></p>\n<p>要求输出第<span class=\"math inline\">\\(n\\)</span>个字符串的第<span\nclass=\"math inline\">\\(k\\)</span>个到第<span\nclass=\"math inline\">\\(k+9\\)</span>个字符（没有则不输出）</p>\n<p>预处理出<span\nclass=\"math inline\">\\(500\\)</span>每个字符串的长度然后递归处理就好了，由于会爆掉<span\nclass=\"math inline\">\\(long long\\)</span>可以与<span\nclass=\"math inline\">\\(1e12+9\\)</span>取个min</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> MAX = <span class=\"number\">1e12</span> + <span class=\"number\">9</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> f[<span class=\"number\">510</span>], k;</span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n;</span><br><span class=\"line\"><span class=\"keyword\">char</span> s1[] = <span class=\"string\">&quot;COFFEE&quot;</span>, s2[] = <span class=\"string\">&quot;CHICKEN&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> num)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x == <span class=\"number\">1</span>) cout &lt;&lt; s1[num - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x == <span class=\"number\">2</span>) cout &lt;&lt; s2[num - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x &lt;= <span class=\"number\">2</span>) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f[x - <span class=\"number\">2</span>] &gt;= num) <span class=\"built_in\">get</span>(x - <span class=\"number\">2</span>, num);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">get</span>(x - <span class=\"number\">1</span>, num - f[x - <span class=\"number\">2</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tf[<span class=\"number\">1</span>] = <span class=\"number\">6</span>, f[<span class=\"number\">2</span>] = <span class=\"number\">7</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt;= <span class=\"number\">500</span>; ++i) </span><br><span class=\"line\">\t\tf[i] = <span class=\"built_in\">min</span>(MAX, f[i - <span class=\"number\">1</span>] + f[i - <span class=\"number\">2</span>]);</span><br><span class=\"line\">\tcin &gt;&gt; T;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\tcin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> i = k; i &lt; k + <span class=\"number\">10</span> &amp;&amp; i &lt;= f[n]; ++i)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">get</span>(n, i);</span><br><span class=\"line\">\t\tcout &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"d.-han-xin-and-his-troops\">D. Han Xin and His Troops</h2>\n<p>solved at 01:20(+1)</p>\n<p>韩信点兵问题，至多<span\nclass=\"math inline\">\\(100\\)</span>个同余式，不保证模数互质，判断无解或是没有小于等于<span\nclass=\"math inline\">\\(m\\)</span>的解或是输出最小的解，数字范围1e5</p>\n<p>抄了个excrt, 然后wa了，意识到可能会爆int,\n就用java改写，结果一个括号位置错了调了半天...</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.math.*;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">int</span> n;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> BigInteger m;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> BigInteger[] a = <span class=\"keyword\">new</span> BigInteger[<span class=\"number\">110</span>], r = <span class=\"keyword\">new</span> BigInteger[<span class=\"number\">110</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> BigInteger[] exgcd(BigInteger a, BigInteger b) &#123;</span><br><span class=\"line\">\t\tBigInteger[] res = <span class=\"keyword\">new</span> BigInteger[<span class=\"number\">3</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b.equals(BigInteger.ZERO)) &#123;</span><br><span class=\"line\">\t\t\tres[<span class=\"number\">0</span>] = a;</span><br><span class=\"line\">\t\t\tres[<span class=\"number\">1</span>] = BigInteger.ONE;</span><br><span class=\"line\">\t\t\tres[<span class=\"number\">2</span>] = BigInteger.ZERO;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tBigInteger[] tmp = exgcd(b, a.mod(b));</span><br><span class=\"line\">\t\tres[<span class=\"number\">0</span>] = tmp[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\tres[<span class=\"number\">1</span>] = tmp[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t\tres[<span class=\"number\">2</span>] = tmp[<span class=\"number\">1</span>].subtract(a.divide(b).multiply(tmp[<span class=\"number\">2</span>]));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> BigInteger <span class=\"title\">excrt</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tBigInteger M = a[<span class=\"number\">1</span>], R = r[<span class=\"number\">1</span>], x, y, d;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\tBigInteger[] rrr = exgcd(M, a[i]);</span><br><span class=\"line\">\t\t\td = rrr[<span class=\"number\">0</span>]; x = rrr[<span class=\"number\">1</span>]; y = rrr[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!(R.subtract(r[i]).mod(d)).equals(BigInteger.ZERO)) <span class=\"keyword\">return</span> BigInteger.valueOf(-<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\tx = (R.subtract(r[i]).divide(d).multiply(x)).mod(a[i]);</span><br><span class=\"line\">\t\t\tR = R.subtract(M.multiply(x));</span><br><span class=\"line\">\t\t\tM = M.divide(d).multiply(a[i]);</span><br><span class=\"line\">\t\t\tR = R.mod(M);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> R.mod(M).add(M).mod(M);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">\t\tScanner cin = <span class=\"keyword\">new</span> Scanner(System.in);</span><br><span class=\"line\">\t\tn = cin.nextInt();</span><br><span class=\"line\">\t\tm = cin.nextBigInteger();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\ta[i] = cin.nextBigInteger();</span><br><span class=\"line\">\t\t\tr[i] = cin.nextBigInteger();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tBigInteger res = excrt();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(res.equals(BigInteger.valueOf(-<span class=\"number\">1</span>))) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;he was definitely lying&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(res.compareTo(m) &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(<span class=\"string\">&quot;he was probably lying&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tSystem.out.println(res);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"e.-hilbert-sort\">E. Hilbert Sort</h2>\n<p>solved at 01:54</p>\n<p>队友做的</p>\n<h2 id=\"f.-popping-balloons\">F. Popping Balloons</h2>\n<p>solved at 03:51(+1)</p>\n<p>二维平面上有<span\nclass=\"math inline\">\\(n\\)</span>个点，你要选择三条横线和三条竖线，相邻横线（竖线）之间距离为定值<span\nclass=\"math inline\">\\(r\\)</span>，求这些线能穿过的最多点数<span\nclass=\"math inline\">\\((1&lt;=n, r&lt;=1e5, 0 &lt;= x, y &lt;=\n1e5)\\)</span></p>\n<p>考虑横线竖线只有一条，显然枚举竖线权值线段树维护某一横坐标的点数，枚举到竖线的时候先把这条竖线上的点丢出去计算完了再放回来就好了，三条也照做，只要考虑点能对哪些位置的线产生贡献就好了</p>\n<p>ps:可以不写权值线段树直接用multiset</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> lim = <span class=\"number\">1e5</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> mx[N &lt;&lt; <span class=\"number\">2</span>], n, r, x, y;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">\t\tmx[rt] += val;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pos &lt;= mid)</span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, pos, val);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, pos, val);</span><br><span class=\"line\">\tmx[rt] = <span class=\"built_in\">max</span>(mx[rt &lt;&lt; <span class=\"number\">1</span>], mx[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; c[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;r);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class=\"line\">\t\tx++, y++;</span><br><span class=\"line\">\t\tc[y].<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(y - r &gt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\tc[y - r].<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(y + r &lt;= lim)</span><br><span class=\"line\">\t\t\tc[y + r].<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, lim, x, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x - r &gt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, lim, x - r, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x + r &lt;= lim)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, lim, x + r, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y = <span class=\"number\">1</span>; y &lt;= lim; ++y) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i: c[y]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, lim, i, <span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i - r &gt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, lim, i - r, <span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i + r &lt;= lim)</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, lim, i + r, <span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans = <span class=\"built_in\">max</span>(ans, (<span class=\"keyword\">int</span>)c[y].<span class=\"built_in\">size</span>() + mx[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i: c[y]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, lim, i, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i - r &gt;= <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, lim, i - r, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i + r &lt;= lim)</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, lim, i + r, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"h.-stammering-chemists\">H. Stammering Chemists</h2>\n<p>solved at 00:25</p>\n<p>给你一个己烷的图表示，判断是哪一种己烷</p>\n<p>点度数看一看就好了...</p>\n<h2 id=\"j.-wood-processing\">J. Wood Processing</h2>\n<p>solved at 03:25(+2)</p>\n<p><span class=\"math inline\">\\(n\\)</span>块木板拼成<span\nclass=\"math inline\">\\(k\\)</span>块（所有的木板必须都参与），拼接的方式是横向粘在一起，纵向选择一个小于等于参与拼接的木板的高度的最小值的值，然后把所有木板砍成这个高度，砍掉的部分扔掉不能重新利用，木板不能旋转，求砍掉的部分最少的方案数<span\nclass=\"math inline\">\\((1&lt;=n&lt;=5000, 1&lt;=k&lt;=3000)\\)</span></p>\n<p>首先将木板按高度排序，显然最后的<span\nclass=\"math inline\">\\(k\\)</span>块木板一定是<span\nclass=\"math inline\">\\(k\\)</span>个连续区间</p>\n<p>设<span class=\"math inline\">\\(dp[i][j]\\)</span>表示前<span\nclass=\"math inline\">\\(i\\)</span>块木板拼成<span\nclass=\"math inline\">\\(j\\)</span>块的最小浪费值，则<span\nclass=\"math inline\">\\(dp[i][j] = \\min\\limits_{k=0}^{i-1}(dp[k][j - 1] +\nsum[i] - sum[k] - (sumw[i] - sumw[k]) * h[k + 1])\\)</span></p>\n<p>这个东西直接转移复杂度是<span\nclass=\"math inline\">\\(O(n^2k)\\)</span>的，但是可以用斜率优化成<span\nclass=\"math inline\">\\(O(nk)\\)</span></p>\n<p>(也可以用四边形不等式优化)</p>\n<p>因为while里一个括号位置错了调了一个小时...</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> LL = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">5010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">B</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> w, h;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> B &amp;rhs) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> h &lt; rhs.h;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;a[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, K;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> dp[N][<span class=\"number\">2010</span>], sum[N], sw[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> que[N], head, tail;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> LL <span class=\"title\">Y</span><span class=\"params\">(<span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> x)</span> </span>&#123;<span class=\"keyword\">return</span> dp[x][t - <span class=\"number\">1</span>] + sw[x] * a[x + <span class=\"number\">1</span>].h - sum[x];&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> LL <span class=\"title\">KY</span><span class=\"params\">(<span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">Y</span>(t, i) - <span class=\"built_in\">Y</span>(t, j);&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> LL <span class=\"title\">X</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;<span class=\"keyword\">return</span> a[x + <span class=\"number\">1</span>].h;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> LL <span class=\"title\">KX</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)</span> </span>&#123;<span class=\"keyword\">return</span> <span class=\"built_in\">X</span>(i) - <span class=\"built_in\">X</span>(j);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;K);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) </span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;a[i].w, &amp;a[i].h);</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">\ta[n + <span class=\"number\">1</span>].h = a[n + <span class=\"number\">1</span>].w = <span class=\"number\">1e7</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\tsum[i] = sum[i - <span class=\"number\">1</span>] + <span class=\"number\">1LL</span> * a[i].h * a[i].w;</span><br><span class=\"line\">\t\tsw[i] = sw[i - <span class=\"number\">1</span>] + a[i].w;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dp, <span class=\"number\">0x3f</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(dp));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) </span><br><span class=\"line\">\t\tdp[i][<span class=\"number\">1</span>] = sum[i] - a[<span class=\"number\">1</span>].h * sw[i];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">2</span>; k &lt;= K; ++k) &#123;</span><br><span class=\"line\">\t\thead = tail = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tdp[k][k] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tque[tail++] = k - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = k; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(head &lt; tail - <span class=\"number\">1</span> &amp;&amp; (__int128)<span class=\"built_in\">KY</span>(k, que[head + <span class=\"number\">1</span>], que[head]) &lt;= (__int128)sw[i] * <span class=\"built_in\">KX</span>(que[head + <span class=\"number\">1</span>], que[head])) head++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> j = que[head];</span><br><span class=\"line\">\t\t\tdp[i][k] = dp[j][k - <span class=\"number\">1</span>] + sum[i] - sum[j] - (sw[i] - sw[j]) * a[j + <span class=\"number\">1</span>].h;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(head &lt; tail - <span class=\"number\">1</span> &amp;&amp; (__int128)<span class=\"built_in\">KY</span>(k, que[tail - <span class=\"number\">1</span>], que[tail - <span class=\"number\">2</span>]) * <span class=\"built_in\">KX</span>(i, que[tail - <span class=\"number\">1</span>]) &gt;= (__int128)<span class=\"built_in\">KY</span>(k, i, que[tail - <span class=\"number\">1</span>]) * <span class=\"built_in\">KX</span>(que[tail - <span class=\"number\">1</span>], que[tail - <span class=\"number\">2</span>])) tail--;</span><br><span class=\"line\">\t\t\tque[tail++] = i; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, dp[n][K]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2019牛客多校结束了，<del>可是题还没补完</del></p>\n","categories":["算法"],"tags":["牛客多校"]},{"title":"2019牛客多校第九场","url":"/posts/c86aca4b.html","content":"<h2 id=\"a.-the-power-of-fibonacci\">A. The power of Fibonacci</h2>\n<p>upsolved</p>\n<p>求斐波那契数列的<span class=\"math inline\">\\(m\\)</span>次方的前<span\nclass=\"math inline\">\\(n\\)</span>项的和模1e9的值 <span id=\"more\"></span> <span\nclass=\"math inline\">\\((1&lt;=n&lt;=1e9, 1&lt;=m&lt;=1000)\\)</span></p>\n<p>首先要知道斐波那契数列模意义下是有循环节的，它的循环节也必定是它的<span\nclass=\"math inline\">\\(m\\)</span>次方的循环节</p>\n<p>然后把<span class=\"math inline\">\\(1e9\\)</span>拆成<span\nclass=\"math inline\">\\(2^9*5^9\\)</span>, 对<span\nclass=\"math inline\">\\(2^9\\)</span>和<span\nclass=\"math inline\">\\(5^9\\)</span>这两个模数分别找循环节，<span\nclass=\"math inline\">\\(2^9\\)</span>的循环节是768, <span\nclass=\"math inline\">\\(5^9\\)</span>的循环节是7812500</p>\n<p>这两个分别求出了然后拼起来就可以得到答案了</p>\n<p>ps:为什么快速幂的时候每次把模数(<span\nclass=\"math inline\">\\(2^9\\)</span>或<span\nclass=\"math inline\">\\(5^9\\)</span>)传进去的时间是直接把模数钉死为1e9的三倍啊...</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">8e6</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod[<span class=\"number\">2</span>] = &#123;<span class=\"number\">512</span>, <span class=\"number\">125</span> * <span class=\"number\">125</span> * <span class=\"number\">125</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> f[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> ans[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">qp</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> mod = <span class=\"number\">1000000000</span>)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\tres = <span class=\"number\">1LL</span> * res * a % mod;</span><br><span class=\"line\">\t\ta = <span class=\"number\">1LL</span> * a * a % mod;</span><br><span class=\"line\">\t\tn &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; <span class=\"number\">2</span>; ++k) &#123;</span><br><span class=\"line\">\t\tf[<span class=\"number\">0</span>] = <span class=\"number\">0</span>; f[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(; ; ++j) &#123;</span><br><span class=\"line\">\t\t\tf[j] = f[j - <span class=\"number\">1</span>] + f[j - <span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(f[j] &gt;= mod[k]) f[j] -= mod[k];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(f[j] == <span class=\"number\">0</span> &amp;&amp; f[j - <span class=\"number\">1</span>] == <span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; j; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> cnt = n / j + (n % j &gt;= i);</span><br><span class=\"line\">\t\t\tans[k] = (ans[k] + <span class=\"number\">1LL</span> * cnt * <span class=\"built_in\">qp</span>(f[i], m)) % mod[k];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ans[<span class=\"number\">1</span>] % mod[<span class=\"number\">0</span>] != ans[<span class=\"number\">0</span>]) ans[<span class=\"number\">1</span>] += mod[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans[<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"b.-quadratic-equation\">B. Quadratic equation</h2>\n<p>solved at 00:53</p>\n<p>队友做的，二次剩余，不会</p>\n<h2 id=\"d.-knapsack-cryptosystem\">D. Knapsack Cryptosystem</h2>\n<p>solved at 00:20</p>\n<p><span\nclass=\"math inline\">\\(n\\)</span>个物品，每个物品有重量，你要找到一个子集使得物品的重量和恰好为<span\nclass=\"math inline\">\\(s\\)</span><span\nclass=\"math inline\">\\((1&lt;=n&lt;=36)\\)</span>输入保证有唯一解</p>\n<p>折半搜索，先把考虑前一半，二进制状压把它们能组成的所有情况全部丢到<span\nclass=\"math inline\">\\(map\\)</span>里去，然后考虑后一半，每次二进制状压然后去<span\nclass=\"math inline\">\\(map\\)</span>里寻找解</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, p, q;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> s, a[<span class=\"number\">40</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> to[(<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">18</span>) + <span class=\"number\">10</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">map&lt;<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>, <span class=\"keyword\">int</span>&gt; pp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> msk = <span class=\"number\">2</span>;</span><br><span class=\"line\">\tto[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">17</span>; ++i) &#123;</span><br><span class=\"line\">\t\tto[msk] = i;</span><br><span class=\"line\">\t\tmsk *= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">print</span><span class=\"params\">(<span class=\"keyword\">int</span> maskp, <span class=\"keyword\">int</span> maskq)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; p; ++i) </span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, <span class=\"number\">1</span> &amp; (maskp &gt;&gt; i));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; q; ++i)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, <span class=\"number\">1</span> &amp; (maskq &gt;&gt; i));</span><br><span class=\"line\">\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; s;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">\t\tcin &gt;&gt; a[i];</span><br><span class=\"line\">\tp = n / <span class=\"number\">2</span>;</span><br><span class=\"line\">\tq = n - p;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">1</span> &lt;&lt; p); ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j; j -= j &amp; -j)</span><br><span class=\"line\">\t\t\ttmp += a[to[j &amp; -j]];</span><br><span class=\"line\">\t\tpp[tmp] = i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">1</span> &lt;&lt; q); ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j; j -= j &amp; -j) </span><br><span class=\"line\">\t\t\ttmp += a[to[j &amp; -j] + p];</span><br><span class=\"line\">\t\t<span class=\"keyword\">auto</span> it = pp.<span class=\"built_in\">lower_bound</span>(s - tmp);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(it-&gt;first + tmp == s) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">print</span>(it-&gt;second, i);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"e.-all-men-are-brothers\">E. All men are brothers</h2>\n<p>solved at 00:49</p>\n<p><span class=\"math inline\">\\(n\\)</span>个人，一开始互相都不认识，<span\nclass=\"math inline\">\\(m\\)</span>次操作，每次会让两个人互相认识，这种认识关系具有传递性和对称性，每次操作后要求输出选择<span\nclass=\"math inline\">\\(4\\)</span>个人互相都不认识的方案数</p>\n<p>并查集维护连通块大小即可</p>\n<p>考虑合并两个连通块，那么答案会比上一次的答案减少一些，减少的是这两个连通块各选一个，再从外面选不在同一个连通块里的两个的方案数，具体就不写了，看代码(sz指所有连通块大小的平方和)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, x, y;</span><br><span class=\"line\"><span class=\"keyword\">int</span> fa[N], size[N];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sz;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fa[x] == x ? x : <span class=\"built_in\">find</span>(fa[x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unite</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> fx = <span class=\"built_in\">find</span>(x), fy = <span class=\"built_in\">find</span>(y);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(fx != fy) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(size[fx] &lt; size[fy])</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(fx, fy);</span><br><span class=\"line\">\t\tfa[fy] = fx;</span><br><span class=\"line\">\t\tsize[fx] += size[fy];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= m; ++i)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\tfa[i] = i;</span><br><span class=\"line\">\t\tsize[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tans = <span class=\"number\">1ULL</span> * n * (n - <span class=\"number\">1</span>) / <span class=\"number\">2</span> * (n - <span class=\"number\">2</span>) / <span class=\"number\">3</span> * (n - <span class=\"number\">3</span>) / <span class=\"number\">4</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%llu\\n&quot;</span>, ans);</span><br><span class=\"line\">\tsz = n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">find</span>(x) == <span class=\"built_in\">find</span>(y)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%llu\\n&quot;</span>, ans);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> sx = size[<span class=\"built_in\">find</span>(x)], sy = size[<span class=\"built_in\">find</span>(y)];</span><br><span class=\"line\">\t\tans -= <span class=\"number\">1ULL</span> * sx * sy * (<span class=\"number\">1ULL</span> * (n - sx - sy) * (n - sx - sy) - (sz - <span class=\"number\">1LL</span> * sx * sx - <span class=\"number\">1LL</span> * sy * sy)) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tsz -= <span class=\"number\">1LL</span> * sx * sx;</span><br><span class=\"line\">\t\tsz -= <span class=\"number\">1LL</span> * sy * sy;</span><br><span class=\"line\">\t\tsz += <span class=\"number\">1LL</span> * (sx + sy) * (sx + sy);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%llu\\n&quot;</span>, ans);</span><br><span class=\"line\">\t\t<span class=\"built_in\">unite</span>(<span class=\"built_in\">find</span>(x), <span class=\"built_in\">find</span>(y));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"h.-cutting-bamboos\">H. Cutting Bamboos</h2>\n<p>solved at 03:11(+2)</p>\n<p>有<span class=\"math inline\">\\(n\\)</span>株竹子，每株有高度，<span\nclass=\"math inline\">\\(q\\)</span>次询问，每次询问一个区间<span\nclass=\"math inline\">\\(l, r\\)</span>，给定<span class=\"math inline\">\\(x,\ny\\)</span></p>\n<p>，指的是水平方向切了<span\nclass=\"math inline\">\\(y\\)</span>刀并且每一刀切下来的竹子总量相同且最后一刀高度为<span\nclass=\"math inline\">\\(0\\)</span>, 求第<span\nclass=\"math inline\">\\(x\\)</span>刀的高度</p>\n<p>首先每一刀切下来的总量相同，那么可以求出第<span\nclass=\"math inline\">\\(x\\)</span>刀到第<span\nclass=\"math inline\">\\(y\\)</span>到切下的总量，然后二分答案，查询当前高度下的竹子总量（小于等于刀的高度的就是竹子本身高度，大于的是刀的高度），那么相当于求区间小于<span\nclass=\"math inline\">\\(k\\)</span>的数的个数以及它们的和，可以用主席树实现，总复杂度<span\nclass=\"math inline\">\\(O(q\\log(n)(\\log(h) +\n50))\\)</span>(50是浮点数二分次数，可能不需要这么多)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l, r, cnt;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum;</span><br><span class=\"line\">&#125;Tree[N * <span class=\"number\">20</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> root[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">\troot[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tTree[<span class=\"number\">0</span>].l = Tree[<span class=\"number\">0</span>].r = Tree[<span class=\"number\">0</span>].cnt = Tree[<span class=\"number\">0</span>].sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">\tTree[++cnt] = Tree[rt];</span><br><span class=\"line\">\trt = cnt;</span><br><span class=\"line\">\tTree[rt].cnt++;</span><br><span class=\"line\">\tTree[rt].sum += num;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(num &lt;= mid)</span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(Tree[rt].l, l, mid, num);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(Tree[rt].r, mid + <span class=\"number\">1</span>, r, num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt; <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">int</span> num, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">make_pair</span>(Tree[j].cnt - Tree[i].cnt, Tree[j].sum - Tree[i].sum);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(num &lt;= mid) </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(Tree[i].l, Tree[j].l, num, l, mid);</span><br><span class=\"line\">\tpair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt; tmp = <span class=\"built_in\">query</span>(Tree[i].r, Tree[j].r, num, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">make_pair</span>(Tree[Tree[j].l].cnt - Tree[Tree[i].l].cnt + tmp.first, Tree[Tree[j].l].sum - Tree[Tree[i].l].sum + tmp.second);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, q, l, r, x, y;</span><br><span class=\"line\"><span class=\"keyword\">int</span> h[N];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sumh[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">double</span> height)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(height &lt; <span class=\"number\">1</span>) </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (r - l + <span class=\"number\">1</span>) * height;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> c; <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> s;</span><br><span class=\"line\">\t<span class=\"built_in\">tie</span>(c, s) = <span class=\"built_in\">query</span>(root[l - <span class=\"number\">1</span>], root[r], (<span class=\"keyword\">int</span>)height, <span class=\"number\">1</span>, <span class=\"number\">100000</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s + (r - l + <span class=\"number\">1</span> - c) * height;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;h[i]);</span><br><span class=\"line\">\t\troot[i] = root[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(root[i], <span class=\"number\">1</span>, <span class=\"number\">100000</span>, h[i]);</span><br><span class=\"line\">\t\tsumh[i] = sumh[i - <span class=\"number\">1</span>] + h[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;x, &amp;y);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> ll = <span class=\"number\">0</span>, rr = <span class=\"number\">1e5</span>, ans;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> tar = (<span class=\"number\">1.0</span> * y - x) / y * (sumh[r] - sumh[l - <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(ll &lt;= rr) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> mid = ll + rr &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(mid) &lt;= tar) &#123;</span><br><span class=\"line\">\t\t\t\tans = mid;</span><br><span class=\"line\">\t\t\t\tll = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\trr = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">double</span> o, lll = ans, rrr = ans + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> _ = <span class=\"number\">0</span>; _ &lt;= <span class=\"number\">50</span>; ++_) &#123;</span><br><span class=\"line\">\t\t\to = (lll + rrr) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(o) &lt;= tar) </span><br><span class=\"line\">\t\t\t\tlll = o;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\trrr = o;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%.15f\\n&quot;</span>, o);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"i.-km-and-m\">I. KM and M</h2>\n<p>upsolved</p>\n<p>给你<span class=\"math inline\">\\(N, M(1&lt;=N&lt;=1e18,\n1&lt;=M&lt;=1e11)\\)</span>，求<span\nclass=\"math display\">\\[\\sum\\limits_{k=1}^N((kM)\\&amp;M) mod\n(1e9+7)\\]</span></p>\n<p>按二进制位每一位考虑，考虑第<span\nclass=\"math inline\">\\(i\\)</span>位，那么一个数<span\nclass=\"math inline\">\\(x\\)</span>的贡献就是<span\nclass=\"math inline\">\\((2^i)\\&amp;x\\)</span>, 考虑<span\nclass=\"math inline\">\\(x\\)</span>的第<span\nclass=\"math inline\">\\(i\\)</span>位是否为<span\nclass=\"math inline\">\\(1\\)</span>，显然可以用<span\nclass=\"math inline\">\\(\\frac x {2^i} - 2 * \\frac x\n{2^{i+1}}\\)</span>表示</p>\n<p>那么对于<span class=\"math inline\">\\(N\\)</span>个数，第<span\nclass=\"math inline\">\\(i\\)</span>位为<span\nclass=\"math inline\">\\(1\\)</span>的就是<span class=\"math display\">\\[\\sum\n\\limits_{i=1}^{N} \\frac {M * i} {2^i} - 2*\\sum \\limits_{i=1}^{N} \\frac\n{M * i} {2^{i+1}}\\]</span></p>\n<p>这两个求和都是求等差数列除以一个数的和，可以用类欧几里得算法求解</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> LL = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>, inv2 = (mod + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">LL n, m, ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">calc</span><span class=\"params\">(LL a, LL b, LL c, LL n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!a) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a &gt;= c || b &gt;= c) &#123;</span><br><span class=\"line\">\t\tLL tmp = <span class=\"built_in\">calc</span>(a % c, b % c, c, n);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> (tmp + ((n % mod) * ((n + <span class=\"number\">1</span>) % mod) % mod * inv2 % mod) * ((a / c) % mod) % mod + ((n + <span class=\"number\">1</span>) % mod) * ((b / c) % mod) % mod) % mod;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tLL f = ((__int128)a * n + b) / c;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (((n % mod) * (f % mod) % mod - <span class=\"built_in\">calc</span>(c, c - b - <span class=\"number\">1</span>, a, f - <span class=\"number\">1</span>)) % mod + mod) % mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">40</span>; ++i) <span class=\"keyword\">if</span>(m &gt;&gt; i &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tLL res = ((<span class=\"built_in\">calc</span>(m, <span class=\"number\">0</span>, <span class=\"number\">1LL</span> &lt;&lt; i, n) - <span class=\"number\">2</span> * <span class=\"built_in\">calc</span>(m, <span class=\"number\">0</span>, <span class=\"number\">2LL</span> &lt;&lt; i, n)) % mod + mod) % mod;</span><br><span class=\"line\">\t\tans = (ans + (<span class=\"number\">1LL</span> &lt;&lt; i) % mod * res % mod) % mod;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"j.-symmetrical-painting\">J. Symmetrical Painting</h2>\n<p>solved at 01:38(+4)</p>\n<p>为什么map一直MLE啊.....</p>\n<p>二维平面上有n个矩形，每个矩形左下角是<span class=\"math inline\">\\((i -\n1, L_i)\\)</span>, 右上角是<span class=\"math inline\">\\((i,\nR_i)\\)</span>，矩形一开始全是黑色，平面不被矩形覆盖的地方是白色，你要把某些黑色区域涂白（一个矩形可以内部颜色不一样），使得黑色区域是一个轴对称图形并且对称轴平行于x轴，求最大黑色区域面积</p>\n<p>首先取得答案时的对称轴纵坐标要么是整数要么是<span\nclass=\"math inline\">\\(x.5\\)</span>，枚举对称轴，维护两个集合，一个代表当前枚举的对称轴在矩形下半部分，一个表示上半部分，每次对称轴往上移动0.5,第一个集合里每一个元素都会给答案贡献1,\n第二个集合贡献-1,\n然后可能会有第一个集合的矩形跳到第二个集合（到达中线），也可能有矩形进入第一个集合（到达下底），也可能有矩形从第二个集合出去（到达上底）</p>\n<p>实际上你并不需要真的维护集合，只需要知道集合的大小就可以了</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">3e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, L[N], R[N], md[N], m;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp, ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b[N * <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> in[N * <span class=\"number\">3</span>], change[N * <span class=\"number\">3</span>], out[N * <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;L[i], &amp;R[i]);</span><br><span class=\"line\">\t\tL[i] = <span class=\"number\">2</span> * L[i] - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tR[i] = <span class=\"number\">2</span> * R[i] - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tmd[i] = (<span class=\"number\">0LL</span> + L[i] + R[i]) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tb[<span class=\"number\">3</span> * i - <span class=\"number\">2</span>] = L[i];</span><br><span class=\"line\">\t\tb[<span class=\"number\">3</span> * i - <span class=\"number\">1</span>] = R[i];</span><br><span class=\"line\">\t\tb[<span class=\"number\">3</span> * i] = md[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttmp = ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(b + <span class=\"number\">1</span>, b + <span class=\"number\">3</span> * n + <span class=\"number\">1</span>);</span><br><span class=\"line\">\tm = <span class=\"built_in\">unique</span>(b + <span class=\"number\">1</span>, b + <span class=\"number\">3</span> * n + <span class=\"number\">1</span>) - b - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\tin[<span class=\"built_in\">lower_bound</span>(b + <span class=\"number\">1</span>, b + m + <span class=\"number\">1</span>, L[i]) - b]++;</span><br><span class=\"line\">\t\tchange[<span class=\"built_in\">lower_bound</span>(b + <span class=\"number\">1</span>, b + m + <span class=\"number\">1</span>, md[i]) - b]++;</span><br><span class=\"line\">\t\tout[<span class=\"built_in\">lower_bound</span>(b + <span class=\"number\">1</span>, b + m + <span class=\"number\">1</span>, R[i]) - b]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> down = <span class=\"number\">0</span>, up = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tdown += in[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\ttmp += <span class=\"number\">1LL</span> * (down - up) * (b[i] - b[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\tans = <span class=\"built_in\">max</span>(ans, tmp);</span><br><span class=\"line\">\t\tdown += in[i];</span><br><span class=\"line\">\t\tdown -= change[i];</span><br><span class=\"line\">\t\tup += change[i];</span><br><span class=\"line\">\t\tup -= out[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["牛客多校"]},{"title":"2019杭电多校第八场","url":"/posts/3e98b74d.html","content":"<p>这场又变得快乐了起来，首页最后一名，很快乐</p>\n<h2 id=\"acesrc-and-good-numbers\">1003. Acesrc and Good Numbers</h2>\n<p>solved at 02:48(+1)</p>\n<p>不是很懂，队友oeis了9个数列打个表就过了... <span id=\"more\"></span> ## 1004.\nAcesrc and Hunting</p>\n<p>solved at 04:16(+1)</p>\n<p>给你一个<span class=\"math inline\">\\(n \\ast m(1&lt;=n,\nm&lt;=100)\\)</span>的格点图，你可以任意选择起点，找到一条经过这<span\nclass=\"math inline\">\\(n \\ast\nm\\)</span>个点的汉密尔顿路，两点之间有边当且仅当它们的欧几里得距离在<span\nclass=\"math inline\">\\((1,3)\\)</span>之间（不包含）</p>\n<p>我们是这样做的，首先令<span class=\"math inline\">\\(n\\)</span>是<span\nclass=\"math inline\">\\(n,m\\)</span>中的较小值，然后一些较小的情况特判掉(<span\nclass=\"math inline\">\\(n\\)</span>为1的情况，n, m均为<span\nclass=\"math inline\">\\(2\\)</span>的情况，m为5的情况)</p>\n<p>然后把n分解成<span class=\"math inline\">\\(2 \\ast x+3 \\ast\ny\\)</span>其中<span class=\"math inline\">\\(y\\)</span>为0或1,\n把m分解成<span class=\"math inline\">\\(3p+4q\\)</span></p>\n<p>如果<span class=\"math inline\">\\(y\\)</span>为1,\n令3为最下面的横条（横坐标从左往右，纵坐标从下往上）</p>\n<p>然后你会得到若干个<span class=\"math inline\">\\(2 \\ast 3,2 \\ast 4,3\n\\ast 3,3 \\ast\n4\\)</span>的矩形，对于这些矩形，分别找到一种方案可以遍历矩形内所有的点并且起点是左下角终点是右上角</p>\n<p>然后从整个图的左下角开始（这时横条的长度可能是3或者是2)，从左往右处理当前横条，每次从小矩形的左下角遍历到右上角，再跳到右边的小矩形的左下角（这两点的距离是<span\nclass=\"math inline\">\\(\\sqrt　2\\)</span>或<span\nclass=\"math inline\">\\(\\sqrt\n5\\)</span>，都是可以的），直到当前横条处理完毕，然后从当前横条的右上角跳到上面一个横条的右上角（距离肯定是<span\nclass=\"math inline\">\\(2\\)</span>)，然后把刚才的方法倒过来葱油往左遍历完这一横条，然后就可以继续按上述方法处理上面的横条一直到处理完了</p>\n<p>一开始没输出YES wa了一发...</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> mp make_pair</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> X first</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Y second</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, f, T;</span><br><span class=\"line\">vector&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; ans;</span><br><span class=\"line\"></span><br><span class=\"line\">pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; p23[<span class=\"number\">6</span>] = &#123;<span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">2</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>)&#125;;</span><br><span class=\"line\">pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; p24[<span class=\"number\">8</span>] = &#123;<span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">2</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>)&#125;;</span><br><span class=\"line\">pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; p33[<span class=\"number\">9</span>] = &#123;<span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">2</span>, <span class=\"number\">1</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">2</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">2</span>, <span class=\"number\">0</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">2</span>, <span class=\"number\">2</span>)&#125;;</span><br><span class=\"line\">pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; p25[<span class=\"number\">10</span>] = &#123;<span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">2</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">4</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">4</span>)&#125;;</span><br><span class=\"line\">pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; p34[<span class=\"number\">12</span>] = &#123;<span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">2</span>, <span class=\"number\">1</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">2</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">2</span>, <span class=\"number\">0</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">2</span>, <span class=\"number\">2</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>)&#125;;</span><br><span class=\"line\">pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; p35[<span class=\"number\">15</span>] = &#123;<span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">2</span>, <span class=\"number\">1</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">2</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">2</span>, <span class=\"number\">0</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">2</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">1</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">2</span>, <span class=\"number\">2</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">3</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">4</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">0</span>, <span class=\"number\">4</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>), <span class=\"built_in\">mp</span>(<span class=\"number\">2</span>, <span class=\"number\">4</span>)&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">process</span><span class=\"params\">(<span class=\"keyword\">int</span> dx, <span class=\"keyword\">int</span> dy, <span class=\"keyword\">int</span> f, <span class=\"keyword\">int</span> sz, pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; a[])</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(f) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = sz - <span class=\"number\">1</span>; ~i; --i)</span><br><span class=\"line\">\t\t\tans.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">mp</span>(a[i].X + dx, a[i].Y + dy));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sz; ++i) </span><br><span class=\"line\">\t\t\tans.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">mp</span>(a[i].X + dx, a[i].Y + dy));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t\tf = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tans.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n &gt; m) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(n, m);</span><br><span class=\"line\">\t\t\tf ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n == <span class=\"number\">1</span> &amp;&amp; m == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;YES&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;1 1\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;NO&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n == <span class=\"number\">2</span> &amp;&amp; m == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;NO&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n == <span class=\"number\">2</span> &amp;&amp; m == <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">process</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, p25);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n == <span class=\"number\">3</span> &amp;&amp; m == <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">process</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">15</span>, p35);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n == <span class=\"number\">4</span> &amp;&amp; m == <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">process</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">10</span>, p25);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">process</span>(<span class=\"number\">3</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, p25);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(n == <span class=\"number\">5</span> &amp;&amp; m == <span class=\"number\">5</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">process</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">15</span>, p35);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">process</span>(<span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, p25);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> p, q;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(p = <span class=\"number\">0</span>; ; p++) &#123;</span><br><span class=\"line\">\t\t\t\t\tq = (m - <span class=\"number\">3</span> * p) / <span class=\"number\">4</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"number\">3</span> * p + <span class=\"number\">4</span> * q == m)</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> x = <span class=\"number\">1</span>, y = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= p; ++i) &#123;</span><br><span class=\"line\">\t\t\t\t\tx = <span class=\"number\">1</span>; y = <span class=\"number\">3</span> * (i - <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">process</span>(x, y, <span class=\"number\">0</span>, <span class=\"number\">9</span>, p33);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; ++i) &#123;</span><br><span class=\"line\">\t\t\t\t\tx = <span class=\"number\">1</span>; y = <span class=\"number\">3</span> * p + <span class=\"number\">4</span> * (i - <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">process</span>(x, y, <span class=\"number\">0</span>, <span class=\"number\">12</span>, p34);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(x = <span class=\"number\">5</span>; x &lt;= n; x += <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = q; i; --i) &#123;</span><br><span class=\"line\">\t\t\t\t\t\ty = <span class=\"number\">3</span> * p + <span class=\"number\">4</span> * (i - <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">process</span>(x - <span class=\"number\">1</span>, y, <span class=\"number\">1</span>, <span class=\"number\">8</span>, p24);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = p; i; --i) &#123;</span><br><span class=\"line\">\t\t\t\t\t\ty = <span class=\"number\">3</span> * (i - <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">process</span>(x - <span class=\"number\">1</span>, y, <span class=\"number\">1</span>, <span class=\"number\">6</span>, p23);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(x + <span class=\"number\">2</span> &lt;= n) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= p; ++i) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\ty = <span class=\"number\">3</span> * (i - <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"built_in\">process</span>(x + <span class=\"number\">1</span>, y, <span class=\"number\">0</span>, <span class=\"number\">6</span>, p23);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; ++i) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\ty = <span class=\"number\">3</span> * p + <span class=\"number\">4</span> * (i - <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"built_in\">process</span>(x + <span class=\"number\">1</span>, y, <span class=\"number\">0</span>, <span class=\"number\">8</span>, p24);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> p, q;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(p = <span class=\"number\">0</span>; ; p++) &#123;</span><br><span class=\"line\">\t\t\t\t\tq = (m - <span class=\"number\">3</span> * p) / <span class=\"number\">4</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"number\">3</span> * p + <span class=\"number\">4</span> * q == m)</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> x = <span class=\"number\">1</span>, y = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(; x &lt;= n; x += <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= p; ++i) &#123;</span><br><span class=\"line\">\t\t\t\t\t\ty = <span class=\"number\">3</span> * (i - <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">process</span>(x, y, <span class=\"number\">0</span>, <span class=\"number\">6</span>, p23);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; ++i) &#123;</span><br><span class=\"line\">\t\t\t\t\t\ty = <span class=\"number\">3</span> * p + <span class=\"number\">4</span> * (i - <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">process</span>(x, y, <span class=\"number\">0</span>, <span class=\"number\">8</span>, p24);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(x + <span class=\"number\">3</span> &lt;= n) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = q; i; --i) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\ty = <span class=\"number\">3</span> * p + <span class=\"number\">4</span> * (i - <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"built_in\">process</span>(x + <span class=\"number\">2</span>, y, <span class=\"number\">1</span>, <span class=\"number\">8</span>, p24);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = p; i; --i) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\ty = <span class=\"number\">3</span> * (i - <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"built_in\">process</span>(x + <span class=\"number\">2</span>, y, <span class=\"number\">1</span>, <span class=\"number\">6</span>, p23);</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;YES&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(f) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;t: ans) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>, t.Y, t.X);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;t: ans) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d %d\\n&quot;</span>, t.X, t.Y);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"acesrc-and-travel\">1006. Acesrc and Travel</h2>\n<p>solved at 03:06(+1)</p>\n<p>有一颗树，每个点有两个权值<span class=\"math inline\">\\(a,\nb\\)</span>，两个人<span class=\"math inline\">\\(A,\nB\\)</span>用它玩游戏，有一个棋子，一开始<span\nclass=\"math inline\">\\(A\\)</span>可以将棋子放在树上任意一个位置，然后<span\nclass=\"math inline\">\\(B,A\\)</span>轮流移动，每次棋子到达一个点<span\nclass=\"math inline\">\\(i\\)</span>(包括一开始放的位置)，<span\nclass=\"math inline\">\\(A\\)</span>会获得<span\nclass=\"math inline\">\\(a_i\\)</span>, <span\nclass=\"math inline\">\\(B\\)</span>会获得<span\nclass=\"math inline\">\\(b_i\\)</span>，棋子不能重复到达同一位置，两人都想使得自己获得的总和比对方的尽可能地大，两人均采用最佳策略，求最后的差值</p>\n<p>树型<span class=\"math inline\">\\(dp\\)</span></p>\n<p>第一遍<span\nclass=\"math inline\">\\(dfs\\)</span>，处理出从每一个点开始，只能往子树方向走的最大值次大值最小值次小值以及取得它们时走的是哪个儿子</p>\n<p>考虑到可能往父亲方向走是更优的，还需要第二遍<span\nclass=\"math inline\">\\(dfs\\)</span>处理（这是就需要记录的次大值以防父亲的最优方案是往当前位置走）</p>\n<p>注意到第二遍<span\nclass=\"math inline\">\\(dfs\\)</span>时如果处理到叶子节点则只能往上走</p>\n<p>tips:我的叫mx的数组实际上存的是最小值/次小值，mn是最大值/次大值</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; G[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N], b[N], T, n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mxa[N][<span class=\"number\">2</span>], mnb[N][<span class=\"number\">2</span>], ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> posmxa[N][<span class=\"number\">2</span>], posmnb[N][<span class=\"number\">2</span>], f[N], x, y, root;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">\tmxa[rt][<span class=\"number\">0</span>] = mxa[rt][<span class=\"number\">1</span>] = <span class=\"number\">1e18</span>;</span><br><span class=\"line\">\tmnb[rt][<span class=\"number\">0</span>] = mnb[rt][<span class=\"number\">1</span>] = <span class=\"number\">-1e18</span>;</span><br><span class=\"line\">\tposmxa[rt][<span class=\"number\">0</span>] = posmxa[rt][<span class=\"number\">1</span>] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\tposmnb[rt][<span class=\"number\">0</span>] = posmnb[rt][<span class=\"number\">1</span>] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\tf[rt] = fa;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j : G[rt]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(j == fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs</span>(j, rt);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mnb[j][<span class=\"number\">0</span>] + a[rt] - b[rt] &lt; mxa[rt][<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">\t\t\tmxa[rt][<span class=\"number\">1</span>] = mnb[j][<span class=\"number\">0</span>] + a[rt] - b[rt];</span><br><span class=\"line\">\t\t\tposmxa[rt][<span class=\"number\">1</span>] = j;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mxa[rt][<span class=\"number\">1</span>] &lt; mxa[rt][<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(mxa[rt][<span class=\"number\">1</span>], mxa[rt][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(posmxa[rt][<span class=\"number\">1</span>], posmxa[rt][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mxa[j][<span class=\"number\">0</span>] + a[rt] - b[rt] &gt; mnb[rt][<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">\t\t\tmnb[rt][<span class=\"number\">1</span>] = mxa[j][<span class=\"number\">0</span>] + a[rt] - b[rt];</span><br><span class=\"line\">\t\t\tposmnb[rt][<span class=\"number\">1</span>] = j;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mnb[rt][<span class=\"number\">1</span>] &gt; mnb[rt][<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(mnb[rt][<span class=\"number\">1</span>], mnb[rt][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(posmnb[rt][<span class=\"number\">1</span>], posmnb[rt][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(posmxa[rt][<span class=\"number\">0</span>] == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\tmxa[rt][<span class=\"number\">0</span>] = mnb[rt][<span class=\"number\">0</span>] = a[rt] - b[rt];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// printf(&quot;mx[%d][0], mx[%d][1], px[%d][0], px[%d][1] = %lld, %lld, %d, %d\\n&quot;, rt, rt, rt, rt, mxa[rt][0], mxa[rt][1], posmxa[rt][0], posmxa[rt][1]);</span></span><br><span class=\"line\">\t<span class=\"comment\">// printf(&quot;mn[%d][0], mn[%d][1], pn[%d][0], pn[%d][1] = %lld, %lld, %d, %d\\n&quot;, rt, rt, rt, rt, mnb[rt][0], mnb[rt][1], posmnb[rt][0], posmnb[rt][1]);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> fa)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(fa != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> val, tmp = fa;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(posmnb[fa][<span class=\"number\">0</span>] == rt) &#123;</span><br><span class=\"line\">\t\t\tval = mnb[fa][<span class=\"number\">1</span>] + a[rt] - b[rt];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tval = mnb[fa][<span class=\"number\">0</span>] + a[rt] - b[rt];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(val &lt; mxa[rt][<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">\t\t\tmxa[rt][<span class=\"number\">1</span>] = val;</span><br><span class=\"line\">\t\t\tposmxa[rt][<span class=\"number\">1</span>] = tmp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mxa[rt][<span class=\"number\">1</span>] &lt; mxa[rt][<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(mxa[rt][<span class=\"number\">1</span>], mxa[rt][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(posmxa[rt][<span class=\"number\">1</span>], posmxa[rt][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(posmxa[fa][<span class=\"number\">0</span>] == rt) &#123;</span><br><span class=\"line\">\t\t\tval = mxa[fa][<span class=\"number\">1</span>] + a[rt] - b[rt];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tval = mxa[fa][<span class=\"number\">0</span>] + a[rt] - b[rt];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(val &gt; mnb[rt][<span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">\t\t\tmnb[rt][<span class=\"number\">1</span>] = val;</span><br><span class=\"line\">\t\t\tposmnb[rt][<span class=\"number\">1</span>] = tmp;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mnb[rt][<span class=\"number\">1</span>] &gt; mnb[rt][<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(mnb[rt][<span class=\"number\">1</span>], mnb[rt][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(posmnb[rt][<span class=\"number\">1</span>], posmnb[rt][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// printf(&quot;mx[%d][0], mx[%d][1], px[%d][0], px[%d][1] = %lld, %lld, %d, %d\\n&quot;, rt, rt, rt, rt, mxa[rt][0], mxa[rt][1], posmxa[rt][0], posmxa[rt][1]);</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// printf(&quot;mn[%d][0], mn[%d][1], pn[%d][0], pn[%d][1] = %lld, %lld, %d, %d\\n&quot;, rt, rt, rt, rt, mnb[rt][0], mnb[rt][1], posmnb[rt][0], posmnb[rt][1]);</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(posmxa[rt][<span class=\"number\">0</span>] == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">swap</span>(mxa[rt][<span class=\"number\">0</span>], mxa[rt][<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t<span class=\"built_in\">swap</span>(posmxa[rt][<span class=\"number\">1</span>], posmxa[rt][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tans = <span class=\"built_in\">max</span>(ans, mxa[rt][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j : G[rt]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(j == fa) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs2</span>(j, rt);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\tans = <span class=\"number\">-1e18</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class=\"line\">\t\t\tG[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class=\"line\">\t\t\tG[x].<span class=\"built_in\">push_back</span>(y);</span><br><span class=\"line\">\t\t\tG[y].<span class=\"built_in\">push_back</span>(x);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n &lt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\tans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t\t\tans += a[i] - b[i];</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(G[i].<span class=\"built_in\">size</span>() &gt;= <span class=\"number\">2</span>)</span><br><span class=\"line\">\t\t\t\troot = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs</span>(root, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs2</span>(root, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"andy-and-maze\">1008. Andy and Maze</h2>\n<p>upsolved</p>\n<p>在一张无向图中找到一条经过<span\nclass=\"math inline\">\\(k\\)</span>个点（不含重复点）长为<span\nclass=\"math inline\">\\(k-1\\)</span>的路径，使得边权和最大<span\nclass=\"math inline\">\\(1&lt;=n,m&lt;=1e4,2&lt;=k&lt;=6\\)</span></p>\n<p>题解是随机染色，即给每一个点一个颜色，一共<span\nclass=\"math inline\">\\(k\\)</span>种，然后假设答案的路径上的每一个点颜色都不一样，状压<span\nclass=\"math inline\">\\(dp\\)</span>即可，假设正确的几率是<span\nclass=\"math inline\">\\(k!/k^k\\)</span>, 因为<span\nclass=\"math inline\">\\(k\\)</span>很小时限又很长(15s)，跑个几百次就好了</p>\n<p>还有一种做法是枚举起点每次<span class=\"math inline\">\\(dfs\\)</span>\n<span class=\"math inline\">\\(k\\)</span>层寻找答案，出题人说数据没造好\n，这种做法跑的飞快...</p>\n<h2 id=\"calabash-and-landlord\">1009. Calabash and Landlord</h2>\n<p>solved at 01:52(+5)</p>\n<p>给你两个横平竖直的矩形，问它们将平面分成了多少个区域</p>\n<p>离散化<span\nclass=\"math inline\">\\(dfs\\)</span>连通块数量就好了，再也不想分类讨论了....</p>\n<h2 id=\"quailty-and-ccpc\">1010. Quailty and CCPC</h2>\n<p>solved at 00:32(+2)</p>\n<p>队友做的，不懂</p>\n<h2 id=\"roundgod-and-milk-tea\">1011. Roundgod and Milk Tea</h2>\n<p>solved at 00:42(+1)</p>\n<p><span class=\"math inline\">\\(n\\)</span>个班，每个班有<span\nclass=\"math inline\">\\(a_i\\)</span>个人，一共制造了<span\nclass=\"math inline\">\\(b_i\\)</span>杯奶茶，每人最多喝一杯奶茶，不能喝自己班制造的奶茶，求最多有多少个人能喝上奶茶</p>\n<p>出题人说数据造弱了，并不知道自己是不是对的</p>\n<p>我就是两个指针一个从左往右扫<span\nclass=\"math inline\">\\(a\\)</span>一个从右往左扫<span\nclass=\"math inline\">\\(b\\)</span>直到相遇为止贪心做的...</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e6</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> aa, bb, ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n, a[N], b[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t\tans = aa = bb = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;a[i], &amp;b[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>, j = n;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(i &lt; j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(i &lt; j &amp;&amp; a[i]) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(b[j] &gt;= a[i]) &#123;</span><br><span class=\"line\">\t\t\t\t\tb[j] -= a[i];</span><br><span class=\"line\">\t\t\t\t\ttmp += a[i];</span><br><span class=\"line\">\t\t\t\t\ta[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\ta[i] -= b[j];</span><br><span class=\"line\">\t\t\t\t\ttmp += b[j];</span><br><span class=\"line\">\t\t\t\t\tb[j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t\tj--;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tans += tmp;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i == j) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\ti++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">// cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; j &lt;&lt; endl;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// cout &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>; k &lt; i; ++k) bb += b[k];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = i + <span class=\"number\">1</span>; k &lt;= n; ++k) aa += a[k];</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tmp = <span class=\"built_in\">min</span>(bb, a[i] * <span class=\"number\">1LL</span>);</span><br><span class=\"line\">\t\ta[i] -= tmp; bb -= tmp; ans += tmp;</span><br><span class=\"line\">\t\ttmp = <span class=\"built_in\">min</span>(aa, <span class=\"number\">1LL</span> * b[i]);</span><br><span class=\"line\">\t\tb[i] -= tmp; aa -= tmp; ans += tmp;</span><br><span class=\"line\">\t\tans += <span class=\"built_in\">min</span>(aa, bb);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["杭电多校"]},{"title":"2019杭电多校第七场","url":"/posts/c9f39f0e.html","content":"<p>咕咕了好久</p>\n<p>这场真实自闭</p>\n<h2 id=\"a-b-c\">1001. A + B = C</h2>\n<p>solve at 03:40(+12)</p>\n<p>给你A, B, C你要找到一种方案，在A, B, C后各自添加<span\nclass=\"math inline\">\\([0, 1e6]\\)</span>个零，使得<span\nclass=\"math inline\">\\(A+B=C\\)</span> <span id=\"more\"></span> 高精度问题</p>\n<p>首先在<span\nclass=\"math inline\">\\(C\\)</span>后面添加足够多的零使得<span\nclass=\"math inline\">\\(C\\)</span>的位数最多</p>\n<p>然后假设<span class=\"math inline\">\\(A\\)</span>是<span\nclass=\"math inline\">\\(AB\\)</span>中较大的，那么显然<span\nclass=\"math inline\">\\(A\\)</span>的位数要么和<span\nclass=\"math inline\">\\(C\\)</span>一样，要么少一位，对这两种情况分别做一次差，看差值是不是能够通过<span\nclass=\"math inline\">\\(B\\)</span>后面加上若干个零来得到</p>\n<p>如果没找到，再假设<span class=\"math inline\">\\(B\\)</span>是较大的</p>\n<p>最多做4次就能找到答案，复杂度<span\nclass=\"math inline\">\\(O(length)\\)</span></p>\n<p>注意一定不能用高精度乘法，要善于使用字符串结束符号来实现添加若干个0的效果，否则肯定超时</p>\n<p>我也不知道为什么错了那么多发，最后也不知道改了啥就过了。。。</p>\n<h2 id=\"final-exam\">1006. Final Exam</h2>\n<p>upsolved</p>\n<p>.自闭源泉</p>\n<p>题意是明天有一场考试有<span\nclass=\"math inline\">\\(n\\)</span>道题目共<span\nclass=\"math inline\">\\(m\\)</span>分，如果一道题目有<span\nclass=\"math inline\">\\(i\\)</span>分那么你今天至少花<span\nclass=\"math inline\">\\(i+1\\)</span>的时间取复习明天才能做对</p>\n<p>你不知道这些题目的分数分布，你的目标是无论如何至少做出<span\nclass=\"math inline\">\\(m\\)</span>道题，求最短复习时间</p>\n<p>首先考虑最坏情况，那就是你复习时间最少的<span\nclass=\"math inline\">\\(n-k+1\\)</span>道题，每道题的分值都恰好等于你的复习时间，并且你复习时间最多的<span\nclass=\"math inline\">\\(k-1\\)</span>道题分值全部为<span\nclass=\"math inline\">\\(0\\)</span></p>\n<p>那么答案显而易见，就是<span class=\"math inline\">\\(m + 1 + (k - 1) *\n(1 + m / (n - k + 1))\\)</span>,</p>\n<p><span class=\"math inline\">\\(m+1\\)</span>的意思是你复习时间最少的<span\nclass=\"math inline\">\\(n-k+1\\)</span>道题的总复习时间，这样至少做对一道题，后面的意思是复习时间最多的<span\nclass=\"math inline\">\\(k-1\\)</span>道题的复习时间均为<span\nclass=\"math inline\">\\(ceil((m + 1) / (n - k +\n1))\\)</span>（这样才能保证它们是复习时间较多的<span\nclass=\"math inline\">\\(k-1\\)</span>个</p>\n<h2 id=\"just-repeat\">1010. Just Repeat</h2>\n<p>solved at 04:12(+1)</p>\n<p>队友做的，说是排序贪心就完事了，不是很懂</p>\n<h2 id=\"kejin-player\">1011. Kejin Player</h2>\n<p>solved at 02:57(+3)</p>\n<p>同一个队友做的，说是忘了清零调了半天，不是很懂</p>\n","categories":["算法"],"tags":["杭电多校"]},{"title":"Codeforces 938G 线段树分治 线性基 可撤销并查集","url":"/posts/3b737d07.html","content":"<h1 id=\"codeforces-938g-shortest-path-queries\">Codeforces 938G Shortest\nPath Queries</h1>\n<p>一张连通图，三种操作</p>\n<p>1.给x和y之间加上边权为d的边，保证不会产生重边</p>\n<p>2.删除x和y之间的边，保证此边之前存在</p>\n<p>3.询问x到y的路径异或最小值 <span id=\"more\"></span> 保证图在任意时刻连通</p>\n<p>首先连通图路径异或相当于从x到y的任意一条路径再异或上若干个环得到的，只要在dfs过程中把非树边成的环丢到线性基里就好了，其他环一定可以通过这些环异或组合出来</p>\n<p>有加边删边操作怎么做呢？线段树时间分治！注意到不能保证在线段树的任意一个节点图是连通的，需要用可撤销并查集来维护，总复杂度<span\nclass=\"math inline\">\\(O(q\\log(n)\\log(q))\\)</span></p>\n<p>tips:其实线性基因为一次插入只有一个赋值操作也可以用同样的方式撤销，不一定要每次都复制一遍下传</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//segment tree divide and conquer</span></span><br><span class=\"line\"><span class=\"comment\">//linear base, dsu(rollback)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Linear_Base</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a[<span class=\"number\">30</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">Linear_Base</span>() &#123;<span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(a));&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">29</span>; ~i; --i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>((val &gt;&gt; i) &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(a[i] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\ta[i] = val;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tval ^= a[i];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">29</span>; ~i; --i)</span><br><span class=\"line\">\t\t\tval = <span class=\"built_in\">min</span>(val, val ^ a[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">pair&lt;<span class=\"keyword\">int</span>*, <span class=\"keyword\">int</span>&gt; save[N * <span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> top;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">change</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;address, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\tsave[top++] = <span class=\"built_in\">make_pair</span>(&amp;address, address);</span><br><span class=\"line\">\taddress = val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">rollback</span><span class=\"params\">(<span class=\"keyword\">int</span> st)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(st != top) &#123;</span><br><span class=\"line\">\t\ttop--;</span><br><span class=\"line\">\t\t*save[top].first = save[top].second;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x, y, d;</span><br><span class=\"line\">\t<span class=\"built_in\">edge</span>() &#123;x = y = d = <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">edge</span>(<span class=\"keyword\">int</span> _x, <span class=\"keyword\">int</span> _y, <span class=\"keyword\">int</span> _d) : <span class=\"built_in\">x</span>(_x), <span class=\"built_in\">y</span> (_y), <span class=\"built_in\">d</span>(_d) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">que</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x, y, id;</span><br><span class=\"line\">\t<span class=\"built_in\">que</span>() &#123;x = y = id = <span class=\"number\">0</span>;&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">que</span>(<span class=\"keyword\">int</span> _x, <span class=\"keyword\">int</span> _y, <span class=\"keyword\">int</span> _id) : <span class=\"built_in\">x</span>(_x), <span class=\"built_in\">y</span> (_y), <span class=\"built_in\">id</span>(_id) &#123;&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> ans[N], tot;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;edge&gt; G[N &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\">vector&lt;que&gt; Q[N &lt;&lt; <span class=\"number\">2</span>]; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> dsu[N], size[N], dis[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x == dsu[x] ? x : <span class=\"built_in\">find</span>(dsu[x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_dist</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x == dsu[x] ? <span class=\"number\">0</span> : dis[x] ^ <span class=\"built_in\">get_dist</span>(dsu[x]); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">unite</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">\td ^= <span class=\"built_in\">get_dist</span>(x);</span><br><span class=\"line\">\td ^= <span class=\"built_in\">get_dist</span>(y);</span><br><span class=\"line\">\tx = <span class=\"built_in\">find</span>(x);</span><br><span class=\"line\">\ty = <span class=\"built_in\">find</span>(y);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x == y) </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(size[x] &lt; size[y]) <span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">\t<span class=\"built_in\">change</span>(size[x], size[x] + size[y]);</span><br><span class=\"line\">\t<span class=\"built_in\">change</span>(dsu[y], x);</span><br><span class=\"line\">\t<span class=\"built_in\">change</span>(dis[y], d);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">const</span> edge &amp;x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;G[rt].<span class=\"built_in\">push_back</span>(x); <span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= mid) <span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, L, R, x);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(R &gt; mid) <span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, L, R, x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add_query</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">const</span> que &amp;x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) &#123;Q[rt].<span class=\"built_in\">push_back</span>(x); <span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pos &lt;= mid) <span class=\"built_in\">add_query</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, pos, x);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">add_query</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, pos, x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, Linear_Base Base)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> st = top;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> e : G[rt]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!<span class=\"built_in\">unite</span>(e.x, e.y, e.d)) &#123;</span><br><span class=\"line\">\t\t\tBase.<span class=\"built_in\">insert</span>(<span class=\"built_in\">get_dist</span>(e.x) ^ <span class=\"built_in\">get_dist</span>(e.y) ^ e.d);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> q : Q[rt]) </span><br><span class=\"line\">\t\t\tans[q.id] = Base.<span class=\"built_in\">query</span>(<span class=\"built_in\">get_dist</span>(q.x) ^ <span class=\"built_in\">get_dist</span>(q.y));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, Base);</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, Base);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">rollback</span>(st);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, q, op, x, y, d;</span><br><span class=\"line\">map&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;, pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; st;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) dsu[i] = i, size[i] = <span class=\"number\">1</span>, dis[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;d);</span><br><span class=\"line\">\t\tst[<span class=\"built_in\">make_pair</span>(x, y)] = <span class=\"built_in\">make_pair</span>(<span class=\"number\">1</span>, d);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;q);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;op, &amp;x, &amp;y);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;d);</span><br><span class=\"line\">\t\t\tst[<span class=\"built_in\">make_pair</span>(x, y)] = <span class=\"built_in\">make_pair</span>(i, d);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, q, st[<span class=\"built_in\">make_pair</span>(x, y)].first, i, <span class=\"built_in\">edge</span>(x, y, st[<span class=\"built_in\">make_pair</span>(x, y)].second));</span><br><span class=\"line\">\t\t\tst.<span class=\"built_in\">erase</span>(<span class=\"built_in\">make_pair</span>(x, y));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">add_query</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, q, i, <span class=\"built_in\">que</span>(x, y, ++tot));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> e: st) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, q, e.second.first, q, <span class=\"built_in\">edge</span>(e.first.first, e.first.second, e.second.second));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, q, <span class=\"built_in\">Linear_Base</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["线段树","codeforces","线性基"]},{"title":"2019牛客多校第八场","url":"/posts/b2a7eb14.html","content":"<h2 id=\"a.-all-one-matices\">A. All-one Matices</h2>\n<p>solved at 01:58(+2)</p>\n<p>求一个<span class=\"math inline\">\\(n \\ast m\\)</span>的<span\nclass=\"math inline\">\\(01\\)</span>矩阵的极大全<span\nclass=\"math inline\">\\(1\\)</span>子矩阵数目 <span id=\"more\"></span>\n悬线法处理出<span\nclass=\"math inline\">\\(d\\)</span>数组（从这个位置最多向上延伸多少个<span\nclass=\"math inline\">\\(1\\)</span>），然后单调栈处理出每个位置的<span\nclass=\"math inline\">\\(d\\)</span>能延伸的左右最远位置，<span\nclass=\"math inline\">\\(vis\\)</span>打标记的时候如果发现标记不是<span\nclass=\"math inline\">\\(i-1\\)</span>也不是<span\nclass=\"math inline\">\\(0\\)</span>说明这里之前有一个极大矩阵</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">3010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> a[N][N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> d[N][N], s[N][N], s2[N][N], n, m, vis[N][N], ans;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, a[i] + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; ++j) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(a[i][j] == <span class=\"string\">&#x27;0&#x27;</span>)</span><br><span class=\"line\">\t\t\t\td[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\td[i][j] = d[i - <span class=\"number\">1</span>][j] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\tstack&lt;<span class=\"keyword\">int</span>&gt; st;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(!st.<span class=\"built_in\">empty</span>()) st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\td[i][m + <span class=\"number\">1</span>] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\tst.<span class=\"built_in\">push</span>(m + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = m; j; --j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(d[i][st.<span class=\"built_in\">top</span>()] &gt;= d[i][j]) st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\ts[i][j] = st.<span class=\"built_in\">top</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tst.<span class=\"built_in\">push</span>(j);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\tstack&lt;<span class=\"keyword\">int</span>&gt; st;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(!st.<span class=\"built_in\">empty</span>()) st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\td[i][<span class=\"number\">0</span>] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\tst.<span class=\"built_in\">push</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; ++j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(d[i][st.<span class=\"built_in\">top</span>()] &gt;= d[i][j]) st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\ts2[i][j] = st.<span class=\"built_in\">top</span>() + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tst.<span class=\"built_in\">push</span>(j);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; ++j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(a[i][j] == <span class=\"string\">&#x27;0&#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> r = s[i][j], l = s2[i][j];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(vis[l][r] == i) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(vis[l][r] != i - <span class=\"number\">1</span> &amp;&amp; vis[l][r]) ans++;</span><br><span class=\"line\">\t\t\tvis[l][r] = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) </span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt;= m; ++j) </span><br><span class=\"line\">\t\t\tans += vis[i][j] != <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"b.-beauty-values\">B. Beauty Values</h2>\n<p>solved at 00:13</p>\n<p>定义beauty values为数组中不同的数的数量，求所有区间的beauty values\n之和</p>\n<p>期望的线性性</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, a[N];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; pos[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; N; ++i) pos[i].<span class=\"built_in\">push_back</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">\t\tpos[a[i]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt; pos[i].<span class=\"built_in\">size</span>(); ++j) &#123;</span><br><span class=\"line\">\t\t\tans += <span class=\"number\">1LL</span> * (pos[i][j] - pos[i][j - <span class=\"number\">1</span>]) * (n - pos[i][j] + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"c.-cdma\">C. CDMA</h2>\n<p>solved at 01:30</p>\n<p>构造一个<span class=\"math inline\">\\(m \\ast\nm\\)</span>的矩阵，元素均为正负一，要求满足任意两行的相应位置乘积之和为<span\nclass=\"math inline\">\\(0\\)</span>，<span\nclass=\"math inline\">\\(m\\)</span>为2的幂次</p>\n<p>首先手推出<span\nclass=\"math inline\">\\(m=2\\)</span>的解（其实样例已经给了），然后把它复制三边得到一个<span\nclass=\"math inline\">\\(4 \\ast 4\\)</span>的矩阵，把右下角的<span\nclass=\"math inline\">\\(2 \\ast 2\\)</span>个元素取反，就得到了<span\nclass=\"math inline\">\\(m=4\\)</span>的解，以此类推即可(我是用的<span\nclass=\"math inline\">\\(m=4\\)</span>作为初始矩阵往下推得)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> d[<span class=\"number\">4</span>][<span class=\"number\">4</span>] = &#123;</span><br><span class=\"line\">\t&#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span>, <span class=\"number\">-1</span>&#125;,</span><br><span class=\"line\">\t&#123;<span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>, <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">f</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">int</span> mod)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(mod == <span class=\"number\">4</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\tmod /= <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> (i &gt;= mod &amp;&amp; j &gt;= mod ? <span class=\"number\">-1</span> : <span class=\"number\">1</span>) * <span class=\"built_in\">f</span>(i % mod, j % mod, mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;m);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(m == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;1 1\\n1 -1&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; ++j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\t&quot;</span>, <span class=\"built_in\">f</span>(i, j, m) * d[i % <span class=\"number\">4</span>][j % <span class=\"number\">4</span>]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"d.-distance\">D. Distance</h2>\n<p>upsolved</p>\n<p>有一个三维空间，有两种操作，给一个点打上标记，或者查询给定点到所有已标记点中的最小曼哈顿距离，保证三维空间长宽高乘积不超过<span\nclass=\"math inline\">\\(1e5\\)</span></p>\n<p>可以定期重构<span\nclass=\"math inline\">\\(bfs\\)</span>，但是显然三维树状数组更短</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, h, q, op, x, y, z;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">BIT</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">lowbit</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;<span class=\"keyword\">return</span> x &amp; -x;&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">mmax</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x, <span class=\"keyword\">int</span> y)</span> </span>&#123;x = (x &gt; y ? x : y);&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> <span class=\"title\">index</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">int</span> k)</span> </span>&#123;<span class=\"keyword\">return</span> (i - <span class=\"number\">1</span>) * m * h + (j - <span class=\"number\">1</span>) * h + k;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> c[N];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;<span class=\"built_in\">memset</span>(c, <span class=\"number\">0xc0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(c));&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> z, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = x; i &lt;= n; i += <span class=\"built_in\">lowbit</span>(i)) </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = y; j &lt;= m; j += <span class=\"built_in\">lowbit</span>(j))</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = z; k &lt;= h; k += <span class=\"built_in\">lowbit</span>(k))</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">mmax</span>(c[<span class=\"built_in\">index</span>(i, j, k)], val);</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> z)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> res = <span class=\"number\">-1e9</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = x; i; i -= <span class=\"built_in\">lowbit</span>(i))</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = y; j; j -= <span class=\"built_in\">lowbit</span>(j))</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = z; k; k -= <span class=\"built_in\">lowbit</span>(k))</span><br><span class=\"line\">\t\t\t\t\tres = <span class=\"built_in\">max</span>(res, c[<span class=\"built_in\">index</span>(i, j, k)]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;T[<span class=\"number\">8</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;h, &amp;q);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">8</span>; ++i) T[i].<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;op, &amp;x, &amp;y, &amp;z);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> mask = <span class=\"number\">0</span>; mask &lt; <span class=\"number\">8</span>; ++mask) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> tx = x, ty = y, tz = z, vx = x, vy = y, vz = z;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(mask &amp; <span class=\"number\">1</span>) tx = n - tx + <span class=\"number\">1</span>, vx = -vx;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(mask &amp; <span class=\"number\">2</span>) ty = m - ty + <span class=\"number\">1</span>, vy = -vy;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(mask &amp; <span class=\"number\">4</span>) tz = h - tz + <span class=\"number\">1</span>, vz = -vz;</span><br><span class=\"line\">\t\t\t\tT[mask].<span class=\"built_in\">update</span>(tx, ty, tz, vx + vy + vz);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> res = <span class=\"number\">1e9</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> mask = <span class=\"number\">0</span>; mask &lt; <span class=\"number\">8</span>; ++mask) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> tx = x, ty = y, tz = z, vx = x, vy = y, vz = z;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(mask &amp; <span class=\"number\">1</span>) tx = n - tx + <span class=\"number\">1</span>, vx = -vx;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(mask &amp; <span class=\"number\">2</span>) ty = m - ty + <span class=\"number\">1</span>, vy = -vy;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(mask &amp; <span class=\"number\">4</span>) tz = h - tz + <span class=\"number\">1</span>, vz = -vz;</span><br><span class=\"line\">\t\t\t\tres = <span class=\"built_in\">min</span>(res, vx + vy + vz - T[mask].<span class=\"built_in\">query</span>(tx, ty, tz));</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, res);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"e.-explorer\">E. Explorer</h2>\n<p>upsolved</p>\n<p>无向图，每条边有上下界限制，只有在上下界之中的数字可以通过这条边，询问有多少种数字可以从<span\nclass=\"math inline\">\\(1\\)</span>走到<span\nclass=\"math inline\">\\(n\\)</span></p>\n<p>时间分治线段树+可撤销并查集</p>\n<p>把size限制看成时间限制就好了</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">int</span> u[N], v[N], l[N], r[N], b[N &lt;&lt; <span class=\"number\">1</span>], n, m, tot, fa[N], sz[N];</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; g[N &lt;&lt; <span class=\"number\">3</span>];</span><br><span class=\"line\">stack&lt;pair&lt;<span class=\"keyword\">int</span>*, <span class=\"keyword\">int</span>&gt;&gt; stk[<span class=\"number\">22</span>];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x== fa[x] ? x : <span class=\"built_in\">find</span>(fa[x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> id)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;g[rt].<span class=\"built_in\">push_back</span>(id); <span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L &lt;= mid) <span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, L, R, id);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(R &gt; mid) <span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, L, R, id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> dep)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!stk[dep].<span class=\"built_in\">empty</span>()) stk[dep].<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i: g[rt]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = <span class=\"built_in\">find</span>(u[i]), y = <span class=\"built_in\">find</span>(v[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x == y) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(sz[x] &lt; sz[y]) <span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">        stk[dep].<span class=\"built_in\">push</span>(<span class=\"built_in\">make_pair</span>(&amp;sz[x], sz[x]));</span><br><span class=\"line\">        stk[dep].<span class=\"built_in\">push</span>(<span class=\"built_in\">make_pair</span>(&amp;fa[y], fa[y]));</span><br><span class=\"line\">        sz[x] += sz[y];</span><br><span class=\"line\">        fa[y] = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">find</span>(<span class=\"number\">1</span>) == <span class=\"built_in\">find</span>(n))</span><br><span class=\"line\">            ans += b[r + <span class=\"number\">1</span>] - b[l];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, dep + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, dep + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!stk[dep].<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">        *(stk[dep].<span class=\"built_in\">top</span>().first) = stk[dep].<span class=\"built_in\">top</span>().second;</span><br><span class=\"line\">        stk[dep].<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;u[i], &amp;v[i], &amp;l[i], &amp;r[i]);</span><br><span class=\"line\">        b[<span class=\"number\">2</span> * i - <span class=\"number\">1</span>] = l[i];</span><br><span class=\"line\">        b[<span class=\"number\">2</span> * i] = ++r[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(b + <span class=\"number\">1</span>, b + <span class=\"number\">2</span> * m + <span class=\"number\">1</span>);</span><br><span class=\"line\">    tot = <span class=\"built_in\">unique</span>(b + <span class=\"number\">1</span>, b + <span class=\"number\">2</span> * m + <span class=\"number\">1</span>) - b - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">        l[i] = <span class=\"built_in\">lower_bound</span>(b + <span class=\"number\">1</span>, b + tot + <span class=\"number\">1</span>, l[i]) - b;</span><br><span class=\"line\">        r[i] = <span class=\"built_in\">lower_bound</span>(b + <span class=\"number\">1</span>, b + tot + <span class=\"number\">1</span>, r[i]) - b - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, tot, l[i], r[i], i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) fa[i] = i, sz[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, tot, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"g.-gemstones\">G. Gemstones</h2>\n<p>solved at 00:17</p>\n<p>签到题，用栈贪心即可</p>\n","categories":["算法"],"tags":["牛客多校"]},{"title":"2019牛客多校第七场","url":"/posts/45ccc357.html","content":"<p>荣膺全场罚时最高，为什么今天和昨天都是6题，今天的我却没有了昨天的快乐呢。。。</p>\n<h2 id=\"a.-string\">A. String</h2>\n<p>solve at 00:28</p>\n<p>给你一个<span class=\"math inline\">\\(01\\)</span>字符串<span\nclass=\"math inline\">\\(s\\)</span>，你要将它分割成数量尽可能少的若干个串，使得每个串都是它的所有循环同构串中字典序最小的<span\nclass=\"math inline\">\\((1&lt;=T&lt;=300, 1&lt;=|s|&lt;=200)\\)</span>\n<span id=\"more\"></span>\n看上去就感觉贪心是对的，就是每次尽可能选最长的符合条件的串，然后套一个最小表示法就过了</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n;</span><br><span class=\"line\"><span class=\"keyword\">char</span> s[<span class=\"number\">210</span>];</span><br><span class=\"line\">vector&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">min_represent</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">static</span> <span class=\"keyword\">char</span> ss[<span class=\"number\">210</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = l; i &lt;= r; ++i) &#123;</span><br><span class=\"line\">\t\tss[i - l] = s[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">1</span>, k = <span class=\"number\">0</span>, len = r - l + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i &lt; len &amp;&amp; j &lt; len &amp;&amp; k &lt; len) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> t = ss[(i+k) % len] - ss[(j+k) % len];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(t == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t++k;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(t &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\ti += k + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tj += k + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i == j)</span><br><span class=\"line\">\t\t\t\t++j;</span><br><span class=\"line\">\t\t\tk = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(i, j) == <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">judge</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l = <span class=\"number\">0</span>, r;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(l &lt; n) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(r = n - <span class=\"number\">1</span>; r &gt;= l; --r) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">min_represent</span>(l, r)) &#123;</span><br><span class=\"line\">\t\t\t\tans.<span class=\"built_in\">push_back</span>(&#123;l, r&#125;);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tl = r + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\tans.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, s);</span><br><span class=\"line\">\t\tn = <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">\t\t<span class=\"built_in\">judge</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ans.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = ans[i].first; j &lt;= ans[i].second; ++j)</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">putchar</span>(s[j]);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">putchar</span>(<span class=\"string\">&quot; \\n&quot;</span>[i + <span class=\"number\">1</span> == ans.<span class=\"built_in\">size</span>()]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"b.-irreducible-polynomial\">B. Irreducible Polynomial</h2>\n<p>solved at 04:50(+38)</p>\n<p>是的，这就是我们荣获罚时冠军的原因</p>\n<p>题意是给你一个多项式，询问这个多项式能否在实数域内因式分解</p>\n<p>然后我就口胡了一个假算法，即判断这个函数有没有零点（这是不对的，x<sup>4+2x</sup>2+1$没有实数域上的零点，然而显然可以因式分解）</p>\n<p>于是我们就写了模拟退火求最小值，牛顿迭代求零点等方法，调了无数次的参。。。</p>\n<p>正解是这样的：</p>\n<p>首先<span class=\"math inline\">\\(n\\)</span>次方程在复数域上有<span\nclass=\"math inline\">\\(n\\)</span>个根，若<span\nclass=\"math inline\">\\(f(\\omega)=0\\)</span>，则<span\nclass=\"math inline\">\\(f(\\overline \\omega)=0\\)</span>,\n即原函数可以提取出<span class=\"math inline\">\\((x-\\omega)(x-\\overline\n\\omega)\\)</span>，而这两个东西乘起来就没有虚数部分了，因此三次及以上的多项式在实数域上一定可以因式分解</p>\n<p>零次和一次显然不可以，二次看判别式。。。</p>\n<h2 id=\"c.-governing-sand\">C. Governing sand</h2>\n<p>solved at 02:51(+7)</p>\n<p>有<span\nclass=\"math inline\">\\(n\\)</span>种树，每种树有高度，数量以及砍伐代价，你要砍掉一些树使得最高的树的数量超过一半，求最小代价<span\nclass=\"math inline\">\\((1&lt;=n&lt;=1e5)\\)</span></p>\n<p>和杭电多校第三场的1007几乎一样，从小到大枚举高度线段树维护数量和代价就好了</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">GKP</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> h, c, p, cc;</span><br><span class=\"line\">&#125;a[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, b[N], m;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> cost[N &lt;&lt; <span class=\"number\">2</span>], cnt[N &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\tcost[rt] = cnt[rt] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> val, <span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">\t\tcnt[rt] += num;</span><br><span class=\"line\">\t\tcost[rt] += <span class=\"number\">1LL</span> * val * num;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pos &lt;= mid) <span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, pos, val, num);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, pos, val, num);</span><br><span class=\"line\">\tcost[rt] = cost[rt &lt;&lt; <span class=\"number\">1</span>] + cost[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>];</span><br><span class=\"line\">\tcnt[rt] = cnt[rt &lt;&lt; <span class=\"number\">1</span>] + cnt[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> num)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(num &lt;= <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> cost[rt] / cnt[rt] * num;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(cnt[rt &lt;&lt; <span class=\"number\">1</span>] &lt; num) <span class=\"keyword\">return</span> cost[rt &lt;&lt; <span class=\"number\">1</span>] + <span class=\"built_in\">query</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, num - cnt[rt &lt;&lt; <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;a[i].h, &amp;a[i].c, &amp;a[i].p);</span><br><span class=\"line\">\t\t\tb[i] = a[i].c;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">sort</span>(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>, [&amp;](GKP &amp;i, GKP &amp;j)&#123;<span class=\"keyword\">return</span> i.h &lt; j.h;&#125;);</span><br><span class=\"line\">\t\tsum[n + <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n; i; --i) &#123;</span><br><span class=\"line\">\t\t\tsum[i] = sum[i + <span class=\"number\">1</span>] + <span class=\"number\">1LL</span> * a[i].c * a[i].p;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans = <span class=\"number\">1e18</span>, cnt = <span class=\"number\">0</span>, tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">sort</span>(b + <span class=\"number\">1</span>, b + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tm = <span class=\"built_in\">unique</span>(b + <span class=\"number\">1</span>, b + n + <span class=\"number\">1</span>) - b - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tstack&lt;GKP&gt; s;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t\ta[i].cc = <span class=\"built_in\">lower_bound</span>(b + <span class=\"number\">1</span>, b + m + <span class=\"number\">1</span>, a[i].c) - b;</span><br><span class=\"line\">\t\t<span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, m);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\ttot += a[i].p;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(a[i].h == a[i - <span class=\"number\">1</span>].h) &#123;</span><br><span class=\"line\">\t\t\t\tcnt += a[i].p;</span><br><span class=\"line\">\t\t\t\ts.<span class=\"built_in\">push</span>(a[i]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\t\t\t\tGKP u = s.<span class=\"built_in\">top</span>(); s.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, m, u.cc, u.c, u.p);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\ts.<span class=\"built_in\">push</span>(a[i]);</span><br><span class=\"line\">\t\t\t\tcnt = a[i].p;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tans = <span class=\"built_in\">min</span>(ans, <span class=\"built_in\">query</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, m, tot - <span class=\"number\">2</span> * cnt + <span class=\"number\">1</span>) + sum[i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"d.-number\">D. Number</h2>\n<p>solved at 00:11</p>\n<p>给你一个<span class=\"math inline\">\\(n\\)</span>和一个<span\nclass=\"math inline\">\\(p\\)</span>，你要输出一个<span\nclass=\"math inline\">\\(n\\)</span>位数，且是<span\nclass=\"math inline\">\\(p\\)</span>的倍数</p>\n<p>如果<span class=\"math inline\">\\(n\\)</span>小于<span\nclass=\"math inline\">\\(p\\)</span>的位数则无解，否则直接输出<span\nclass=\"math inline\">\\(p\\)</span>，后面补上足够的<span\nclass=\"math inline\">\\(0\\)</span>即可</p>\n<h2 id=\"e.-find-the-median\">E. Find the median</h2>\n<p>upsolved</p>\n<p>你有一个初始为空的数列，<span\nclass=\"math inline\">\\(n(1&lt;=n&lt;=4e5)\\)</span>次操作，每次给定一个区间<span\nclass=\"math inline\">\\(L,\nR\\)</span>，你将区间里所有数加入到数列中，然后求数列的中位数（偶数个取较小值）</p>\n<p>将<span\nclass=\"math inline\">\\(R[i]\\)</span>全部自增1后离散化，会得到至多<span\nclass=\"math inline\">\\(2n\\)</span>个点，实际上每个点代表一个区间，代表的是大于等于当前这个点且小于后一个点的区间，对这些点建线段树，维护区间里数的总数以及区间被更新了多少次（非叶子节点的这个值只用于延迟更新，只有叶子节点的参与最终计算），然后支持查询第<span\nclass=\"math inline\">\\(k\\)</span>大的数就好了</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">4e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> x[N], y[N], A[<span class=\"number\">3</span>], B[<span class=\"number\">3</span>], C[<span class=\"number\">3</span>], M[<span class=\"number\">3</span>], L[N], R[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> num[N &lt;&lt; <span class=\"number\">1</span>], tot, n;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> pre[N &lt;&lt; <span class=\"number\">1</span>], now;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> lazy[N &lt;&lt; <span class=\"number\">3</span>], cnt[N &lt;&lt; <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum[N &lt;&lt; <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">\tsum[rt] = sum[rt &lt;&lt; <span class=\"number\">1</span>] + sum[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(lazy[rt]) &#123;</span><br><span class=\"line\">\t\tlazy[rt &lt;&lt; <span class=\"number\">1</span>] += lazy[rt];</span><br><span class=\"line\">\t\tlazy[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>] += lazy[rt];</span><br><span class=\"line\">\t\tcnt[rt &lt;&lt; <span class=\"number\">1</span>] += lazy[rt];</span><br><span class=\"line\">\t\tcnt[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>] += lazy[rt];</span><br><span class=\"line\">\t\tsum[rt &lt;&lt; <span class=\"number\">1</span>] += <span class=\"number\">1LL</span> * (pre[mid] - pre[l - <span class=\"number\">1</span>]) * lazy[rt];</span><br><span class=\"line\">\t\tsum[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>] += <span class=\"number\">1LL</span> * (pre[r] - pre[mid]) * lazy[rt];</span><br><span class=\"line\">\t\tlazy[rt] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class=\"line\">\t\tlazy[rt]++; cnt[rt]++;</span><br><span class=\"line\">\t\tsum[rt] += (pre[r] - pre[l - <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">pushdown</span>(rt, l, r);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= mid) </span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, L, R);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(R &gt; mid)</span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, L, R);</span><br><span class=\"line\">\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> k)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> num[l] + (k - <span class=\"number\">1</span>) / cnt[rt];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">pushdown</span>(rt, l, r);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(sum[rt &lt;&lt; <span class=\"number\">1</span>] &lt; k) <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, k - sum[rt &lt;&lt; <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, k);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; n;</span><br><span class=\"line\">\tcin &gt;&gt; x[<span class=\"number\">1</span>] &gt;&gt; x[<span class=\"number\">2</span>] &gt;&gt; A[<span class=\"number\">1</span>] &gt;&gt; B[<span class=\"number\">1</span>] &gt;&gt; C[<span class=\"number\">1</span>] &gt;&gt; M[<span class=\"number\">1</span>];</span><br><span class=\"line\">\tcin &gt;&gt; y[<span class=\"number\">1</span>] &gt;&gt; y[<span class=\"number\">2</span>] &gt;&gt; A[<span class=\"number\">2</span>] &gt;&gt; B[<span class=\"number\">2</span>] &gt;&gt; C[<span class=\"number\">2</span>] &gt;&gt; M[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(i &gt;= <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">\t\t\tx[i] = (<span class=\"number\">1LL</span> * A[<span class=\"number\">1</span>] * x[i - <span class=\"number\">1</span>] + <span class=\"number\">1LL</span> * B[<span class=\"number\">1</span>] * x[i - <span class=\"number\">2</span>] + C[<span class=\"number\">1</span>]) % M[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\ty[i] = (<span class=\"number\">1LL</span> * A[<span class=\"number\">2</span>] * y[i - <span class=\"number\">1</span>] + <span class=\"number\">1LL</span> * B[<span class=\"number\">2</span>] * y[i - <span class=\"number\">2</span>] + C[<span class=\"number\">2</span>]) % M[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tL[i] = <span class=\"built_in\">min</span>(x[i], y[i]) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tR[i] = <span class=\"built_in\">max</span>(x[i], y[i]) + <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tnum[i * <span class=\"number\">2</span> - <span class=\"number\">1</span>] = L[i];</span><br><span class=\"line\">\t\tnum[i * <span class=\"number\">2</span>] = R[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(num + <span class=\"number\">1</span>, num + <span class=\"number\">2</span> * n + <span class=\"number\">1</span>);</span><br><span class=\"line\">\ttot = <span class=\"built_in\">unique</span>(num + <span class=\"number\">1</span>, num + <span class=\"number\">2</span> * n + <span class=\"number\">1</span>) - num - <span class=\"number\">1</span>;</span><br><span class=\"line\">\tnum[tot + <span class=\"number\">1</span>] = num[tot];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class=\"line\">\t\tpre[i] = pre[i - <span class=\"number\">1</span>] + num[i + <span class=\"number\">1</span>] - num[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\tL[i] = <span class=\"built_in\">lower_bound</span>(num + <span class=\"number\">1</span>, num + tot + <span class=\"number\">1</span>, L[i]) - num;</span><br><span class=\"line\">\t\tR[i] = <span class=\"built_in\">lower_bound</span>(num + <span class=\"number\">1</span>, num + tot + <span class=\"number\">1</span>, R[i]) - num - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tnow += pre[R[i]] - pre[L[i] - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, tot, L[i], R[i]);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"built_in\">query</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, tot, (now + <span class=\"number\">1</span>) / <span class=\"number\">2</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"h.-pair\">H. Pair</h2>\n<p>solved at 04:18(+1)</p>\n<p>给你三个数<span class=\"math inline\">\\(A, B,\nC(1&lt;=A,B,C&lt;=1e9)\\)</span>, 求满足<span\nclass=\"math inline\">\\(1&lt;=i&lt;=A\\ \\&amp;\\&amp;\\ 1&lt;=j&lt;=B\\\n\\&amp;\\&amp; (i\\ and\\ j&gt;C\\ ||\\ i\\ xor\\ j&lt;C)\\)</span>的<span\nclass=\"math inline\">\\((i,j)\\)</span>对数量</p>\n<p>正着不太好求，我们反过来求<span class=\"math inline\">\\(i\\ and\\ j&lt;=C\n\\ \\&amp;\\&amp;\\ i\\ xor\\ j &gt;=C\\)</span>的数量</p>\n<p>考虑二进制数位<span\nclass=\"math inline\">\\(dp\\)</span>，从高位往低位考虑，一共有五维</p>\n<p>第一维表示已经填了几位，第二维表示当前已经填的位的<span\nclass=\"math inline\">\\(and\\)</span>是比<span\nclass=\"math inline\">\\(C\\)</span>大还是一样大，第三位表示已经填的位的<span\nclass=\"math inline\">\\(xor\\)</span>是比<span\nclass=\"math inline\">\\(C\\)</span>小还是一样大，第四五维表示已经填的数和<span\nclass=\"math inline\">\\(A,B\\)</span>的关系（是一样大还是已经更小了）后四维都是为<span\nclass=\"math inline\">\\(0\\)</span>表示相等</p>\n<p>转移的时候枚举当前位这两个数分别填<span\nclass=\"math inline\">\\(0\\)</span>还是<span\nclass=\"math inline\">\\(1\\)</span>，不合法的情况就不转移</p>\n<p>注意这样最后可能填的数是<span\nclass=\"math inline\">\\(0\\)</span>，而题目要求大于等于<span\nclass=\"math inline\">\\(1\\)</span>，考虑一下就好了</p>\n<p>复杂度<span class=\"math inline\">\\(O(T2^6\\log {1e9})\\)</span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> dp[<span class=\"number\">31</span>][<span class=\"number\">2</span>][<span class=\"number\">2</span>][<span class=\"number\">2</span>][<span class=\"number\">2</span>], ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, A, B, C, T, a[<span class=\"number\">33</span>], b[<span class=\"number\">33</span>], c[<span class=\"number\">33</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get_bit</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> aa[])</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">29</span>; ++i)</span><br><span class=\"line\">\t\taa[i] = (x &gt;&gt; i) &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcin &gt;&gt; T;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\tcin &gt;&gt; A &gt;&gt; B &gt;&gt; C;</span><br><span class=\"line\">\t\tans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(dp, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(dp));</span><br><span class=\"line\">\t\t<span class=\"built_in\">get_bit</span>(A, a);</span><br><span class=\"line\">\t\t<span class=\"built_in\">get_bit</span>(B, b);</span><br><span class=\"line\">\t\t<span class=\"built_in\">get_bit</span>(C, c);</span><br><span class=\"line\">\t\tdp[<span class=\"number\">30</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">30</span>; i; --i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> _a = <span class=\"number\">0</span>; _a &lt; <span class=\"number\">2</span>; ++_a) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> _b = <span class=\"number\">0</span>; _b &lt; <span class=\"number\">2</span>; ++_b) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> AandB = <span class=\"number\">0</span>; AandB &lt; <span class=\"number\">2</span>; ++AandB) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> AxorB = <span class=\"number\">0</span>; AxorB &lt; <span class=\"number\">2</span>; ++AxorB) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> AtmpA = <span class=\"number\">0</span>; AtmpA &lt; <span class=\"number\">2</span>; ++AtmpA) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> BtmpB = <span class=\"number\">0</span>; BtmpB &lt; <span class=\"number\">2</span>; ++BtmpB) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"keyword\">if</span>(AtmpA == <span class=\"number\">0</span> &amp;&amp; _a &gt; a[i - <span class=\"number\">1</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"keyword\">if</span>(BtmpB == <span class=\"number\">0</span> &amp;&amp; _b &gt; b[i - <span class=\"number\">1</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"keyword\">if</span>(AandB == <span class=\"number\">0</span> &amp;&amp; (_a &amp; _b) &gt; c[i - <span class=\"number\">1</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"keyword\">if</span>(AxorB == <span class=\"number\">0</span> &amp;&amp; (_a ^ _b) &lt; c[i - <span class=\"number\">1</span>]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"keyword\">int</span> newAandB = AandB | ((_a &amp; _b) &lt; c[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"keyword\">int</span> newAxorB = AxorB | ((_a ^ _b) &gt; c[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"keyword\">int</span> newAtmpA = AtmpA | (_a &lt; a[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t<span class=\"keyword\">int</span> newBtmpB = BtmpB | (_b &lt; b[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\tdp[i - <span class=\"number\">1</span>][newAandB][newAxorB][newAtmpA][newBtmpB] += dp[i][AandB][AxorB][AtmpA][BtmpB];</span><br><span class=\"line\">\t\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t&#125;\t\t</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans = <span class=\"number\">1LL</span> * A * B;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> a = <span class=\"number\">0</span>; a &lt; <span class=\"number\">2</span>; ++a)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> b = <span class=\"number\">0</span>; b &lt; <span class=\"number\">2</span>; ++b)</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt; <span class=\"number\">2</span>; ++c) </span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> d = <span class=\"number\">0</span>; d &lt; <span class=\"number\">2</span>; ++d)</span><br><span class=\"line\">\t\t\t\t\t\tans -= dp[<span class=\"number\">0</span>][a][b][c][d];</span><br><span class=\"line\">\t\tans += <span class=\"built_in\">max</span>(<span class=\"number\">0</span>, A - C + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tans += <span class=\"built_in\">max</span>(<span class=\"number\">0</span>, B - C + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tcout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"j.-ab-problem\">J. A+B problem</h2>\n<p>solve at 00:07</p>\n<p>定义<span class=\"math inline\">\\(f(x)\\)</span>为把<span\nclass=\"math inline\">\\(x\\)</span>各位数倒过来的数，给你<span\nclass=\"math inline\">\\(A, B\\)</span>, 求<span\nclass=\"math inline\">\\(f(f(A) + f(B))\\)</span></p>\n<p>牛客能交python好评</p>\n","categories":["算法"],"tags":["牛客多校"]},{"title":"2019杭电多校第六场","url":"/posts/1bf3e891.html","content":"<p>过了6题，特别爽</p>\n<h2 id=\"nonsense-time\">1002. Nonsense Time</h2>\n<p>solved at 02:55</p>\n<p>有一个<span class=\"math inline\">\\(1-n\\)</span>的排列<span\nclass=\"math inline\">\\(p\\)</span>, 一开始<span\nclass=\"math inline\">\\(p\\)</span>所有位置全部无效，每次给出一个数<span\nclass=\"math inline\">\\(k_i\\)</span>，意味着<span\nclass=\"math inline\">\\(k_i\\)</span>这个位置的数开始有效，每次使一个数有效就输出当前有效序列的LIS长度，<span\nclass=\"math inline\">\\((1&lt;=n&lt;=5e4)\\)</span>，保证数据是随机生成的\n<span id=\"more\"></span>\n倒过来考虑，相当于从完整的序列中删去数字，如果删的数字不在LIS中那么显然结果不变，如果在LIS中就重新跑一边LIS</p>\n<p>这里有一个结论（知乎搜的）：<span\nclass=\"math inline\">\\(1-n\\)</span>的排列的LIS的期望长度是<span\nclass=\"math inline\">\\(\\theta(\\sqrt n)\\)</span>级别的，所以只会跑<span\nclass=\"math inline\">\\(\\sqrt n\\)</span>次LIS, 总复杂度<span\nclass=\"math inline\">\\(O(n\\sqrt n \\log(n))\\)</span>，时限长达14s,\n肯定可以过</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">5e4</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> p[N], k[N], n, T, ans[N], now;</span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[N], vis[N], valid[N], b[N], pre[N], pos[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">lis</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(<span class=\"keyword\">int</span>) * (n + <span class=\"number\">5</span>));</span><br><span class=\"line\">\tnow = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> m = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(valid[i]) &#123;</span><br><span class=\"line\">\t\t\tdp[i] = <span class=\"built_in\">lower_bound</span>(b, b + m + <span class=\"number\">1</span>, p[i]) - b;</span><br><span class=\"line\">\t\t\tb[dp[i]] = p[i];</span><br><span class=\"line\">\t\t\tm = <span class=\"built_in\">max</span>(m, dp[i]);</span><br><span class=\"line\">\t\t\tpre[i] = pos[b[dp[i] - <span class=\"number\">1</span>]];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> pp = pos[b[m]];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(pp) &#123;</span><br><span class=\"line\">\t\tvis[pp] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tpp = pre[pp];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tnow = m;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;p[i]);</span><br><span class=\"line\">\t\t\tvalid[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tpos[p[i]] = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;k[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">lis</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n; i; --i) &#123;</span><br><span class=\"line\">\t\t\tans[i] = now;</span><br><span class=\"line\">\t\t\tvalid[k[i]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(vis[k[i]] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">lis</span>();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d%c&quot;</span>, ans[i], <span class=\"string\">&quot; \\n&quot;</span>[i == n]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"snowy-smile\">1005. Snowy Smile</h2>\n<p>solve at 00:32(+1)</p>\n<p>差了三分钟痛失一血...</p>\n<p>二维平面上有<span\nclass=\"math inline\">\\(n\\)</span>个点，每个点有权值，你可以选择一个矩形，获得矩形区域内所有点的权值，求你能获得的最大值<span\nclass=\"math inline\">\\((1&lt;=n&lt;=2000)\\)</span></p>\n<p>一看就是先离散化坐标然后枚举下边界再枚举上边界线段树维护最大子段和的套路，<span\nclass=\"math inline\">\\(2000\\)</span>看上去就是个<span\nclass=\"math inline\">\\(n^2\\log(n)\\)</span>的复杂度</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> LL = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2010</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, tx, ty, T;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x[N], y[N], w[N], b[N];</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; id[N];</span><br><span class=\"line\">LL ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tree</span> &#123;</span></span><br><span class=\"line\">    LL sum, rmx, lmx, mx;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tag;</span><br><span class=\"line\">&#125;sgt[N &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">    sgt[rt].sum = sgt[rt &lt;&lt; <span class=\"number\">1</span>].sum + sgt[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum;</span><br><span class=\"line\">    sgt[rt].mx = <span class=\"built_in\">max</span>(sgt[rt &lt;&lt; <span class=\"number\">1</span>].mx, sgt[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].mx);</span><br><span class=\"line\">    sgt[rt].lmx = <span class=\"built_in\">max</span>(sgt[rt &lt;&lt; <span class=\"number\">1</span>].lmx, sgt[rt &lt;&lt; <span class=\"number\">1</span>].sum + sgt[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].lmx);</span><br><span class=\"line\">    sgt[rt].rmx = <span class=\"built_in\">max</span>(sgt[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].rmx, sgt[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum + sgt[rt &lt;&lt; <span class=\"number\">1</span>].rmx);</span><br><span class=\"line\">    sgt[rt].mx = <span class=\"built_in\">max</span>(sgt[rt].mx, sgt[rt &lt;&lt; <span class=\"number\">1</span>].rmx + sgt[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].lmx);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\tsgt[rt].tag = <span class=\"number\">0</span>;</span><br><span class=\"line\">    sgt[rt].sum = sgt[rt].lmx = sgt[rt].rmx = sgt[rt].mx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\tsgt[rt].tag = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">\t\tsgt[rt].mx += val;</span><br><span class=\"line\">        sgt[rt].sum = sgt[rt].lmx = sgt[rt].rmx = sgt[rt].mx;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pos &lt;= mid)</span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, pos, val);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, pos, val);</span><br><span class=\"line\">\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\tans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;x[i], &amp;y[i], &amp;w[i]);</span><br><span class=\"line\">\t\t\tb[i] = x[i];</span><br><span class=\"line\">\t\t\tid[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">sort</span>(b + <span class=\"number\">1</span>, b + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\ttx = <span class=\"built_in\">unique</span>(b + <span class=\"number\">1</span>, b + n + <span class=\"number\">1</span>) - b - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\tx[i] = <span class=\"built_in\">lower_bound</span>(b + <span class=\"number\">1</span>, b + tx + <span class=\"number\">1</span>, x[i]) - b;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\tb[i] = y[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">sort</span>(b + <span class=\"number\">1</span>, b + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tty = <span class=\"built_in\">unique</span>(b + <span class=\"number\">1</span>, b + n + <span class=\"number\">1</span>) - b - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\ty[i] = <span class=\"built_in\">lower_bound</span>(b + <span class=\"number\">1</span>, b + ty + <span class=\"number\">1</span>, y[i]) - b;</span><br><span class=\"line\">\t\t\tid[y[i]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= ty; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, tx);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt;= ty; ++j) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> f : id[j]) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, tx, x[f], w[f]);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tans = <span class=\"built_in\">max</span>(ans, sgt[<span class=\"number\">1</span>].mx);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"faraway\">1006. Faraway</h2>\n<p>solved at 02:20</p>\n<p>二维平面上有一个不知道在哪里的集合点（知道横纵坐标范围在<span\nclass=\"math inline\">\\([0, m]\\)</span>内，你有<span\nclass=\"math inline\">\\(n\\)</span>个士兵，你知道这些士兵的坐标<span\nclass=\"math inline\">\\(x_i,\ny_i\\)</span>以及士兵到集合点的曼哈顿距离模<span\nclass=\"math inline\">\\(k_i\\)</span>的结果<span\nclass=\"math inline\">\\(t_i\\)</span>, 求可能的集合点数量<span\nclass=\"math inline\">\\(1&lt;=n&lt;=10, 2&lt;=k&lt;=5,\n1&lt;=m&lt;=1e9,0&lt;=x_i,y_i&lt;=m,0&lt;=t_i&lt;k_i\\)</span></p>\n<p>首先曼哈顿距离有一个绝对值，先考虑怎么去掉，每个士兵可以把平面分为四个区域，每个区域的绝对值符号都是固定的，<span\nclass=\"math inline\">\\(n\\)</span>个点最多分成<span\nclass=\"math inline\">\\((n+1)^2\\)</span>个区域，最多不过121,\n对于每一个区域，考虑<span class=\"math inline\">\\(lcm(k) \\ast\nlcm(k)\\)</span>的正方形里的点，其他的点都可以通过平移这些点得到，因为<span\nclass=\"math inline\">\\(k\\)</span>是2-5, 因此<span\nclass=\"math inline\">\\(lcm\\)</span>最多60, 只要枚举<span\nclass=\"math inline\">\\(60 \\ast 60\\)</span>的点<span\nclass=\"math inline\">\\(O(n)\\)</span>判断是否合法就好了，总复杂度<span\nclass=\"math inline\">\\(O(60^2n^3)\\)</span>，边界情况自行注意（我算的时候是左闭右开上闭下开，最后判右边和上面的线）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">13</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> LL = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\">LL ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n, m, tot;</span><br><span class=\"line\"><span class=\"keyword\">int</span> x[N], y[N], k[N], t[N];</span><br><span class=\"line\">set&lt;<span class=\"keyword\">int</span>&gt; xx, yy;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;<span class=\"keyword\">return</span> b ? <span class=\"built_in\">gcd</span>(b, a % b) : a;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">lcm</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;<span class=\"keyword\">return</span> a * b / <span class=\"built_in\">gcd</span>(a, b);&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">judge</span><span class=\"params\">(<span class=\"keyword\">int</span> xi, <span class=\"keyword\">int</span> yi)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((<span class=\"built_in\">abs</span>(xi - x[i]) + <span class=\"built_in\">abs</span>(yi - y[i])) % k[i] != t[i])</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> x1, <span class=\"keyword\">int</span> x2, <span class=\"keyword\">int</span> y1, <span class=\"keyword\">int</span> y2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    LL res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = x1; x &lt; x1 + tot; ++x) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y = y1; y &lt; y1 + tot; ++y) &#123;</span><br><span class=\"line\">            cnt += <span class=\"built_in\">judge</span>(x, y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res += <span class=\"number\">1LL</span> * cnt * ((x2 - x1) / tot) * ((y2 - y1) / tot);</span><br><span class=\"line\">    cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x3 = (x2 - x1) % tot;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = x2 - x3; x &lt; x2; ++x) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y = y1; y &lt; y1 + tot; ++y) &#123;</span><br><span class=\"line\">            cnt += <span class=\"built_in\">judge</span>(x, y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res += <span class=\"number\">1LL</span> * cnt * ((y2 - y1) / tot);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y3 = ((y2 - y1)) % tot;</span><br><span class=\"line\">    cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = x1; x &lt; x1 + tot; ++x) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y = y2 - y3; y &lt; y2; ++y)</span><br><span class=\"line\">            cnt += <span class=\"built_in\">judge</span>(x, y);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    res += <span class=\"number\">1LL</span> * cnt * ((x2 - x1) / tot);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = x2 - x3; x &lt; x2; ++x) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y = y2 - y3; y &lt; y2; ++y) &#123;</span><br><span class=\"line\">            res += <span class=\"built_in\">judge</span>(x, y);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">calc_x</span><span class=\"params\">(<span class=\"keyword\">int</span> x1, <span class=\"keyword\">int</span> x2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>; LL res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = x1; x &lt; x1 + tot; ++x)</span><br><span class=\"line\">        cnt += <span class=\"built_in\">judge</span>(x, m);</span><br><span class=\"line\">    res += <span class=\"number\">1LL</span> * cnt * ((x2 - x1) / tot);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x3 = (x2 - x1) % tot;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = x2 - x3; x &lt; x2; ++x) </span><br><span class=\"line\">        res += <span class=\"built_in\">judge</span>(x, m);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">calc_y</span><span class=\"params\">(<span class=\"keyword\">int</span> y1, <span class=\"keyword\">int</span> y2)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> cnt = <span class=\"number\">0</span>; LL res = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y = y1; y &lt; y1 + tot; ++y)</span><br><span class=\"line\">        cnt += <span class=\"built_in\">judge</span>(m, y);</span><br><span class=\"line\">    res += <span class=\"number\">1LL</span> * cnt * ((y2 - y1) / tot);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> y3 = (y2 - y1) % tot;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> y = y2 - y3; y &lt; y2; ++y) </span><br><span class=\"line\">        res += <span class=\"built_in\">judge</span>(m, y);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> res;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">        tot = <span class=\"number\">1</span>; xx.<span class=\"built_in\">clear</span>(); yy.<span class=\"built_in\">clear</span>(); ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">        xx.<span class=\"built_in\">insert</span>(<span class=\"number\">0</span>); xx.<span class=\"built_in\">insert</span>(m);</span><br><span class=\"line\">        yy.<span class=\"built_in\">insert</span>(<span class=\"number\">0</span>); yy.<span class=\"built_in\">insert</span>(m); </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;x[i], &amp;y[i], &amp;k[i], &amp;t[i]);</span><br><span class=\"line\">            xx.<span class=\"built_in\">insert</span>(x[i]);</span><br><span class=\"line\">            yy.<span class=\"built_in\">insert</span>(y[i]);</span><br><span class=\"line\">            tot = <span class=\"built_in\">lcm</span>(tot, k[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> p = xx.<span class=\"built_in\">begin</span>(), q = xx.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">        ++q;</span><br><span class=\"line\">        <span class=\"keyword\">auto</span> i = yy.<span class=\"built_in\">begin</span>(), j = yy.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">        ++j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; q != xx.<span class=\"built_in\">end</span>(); ++p, ++q) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(; j != yy.<span class=\"built_in\">end</span>(); ++i, ++j) &#123;</span><br><span class=\"line\">                ans += <span class=\"built_in\">calc</span>(*p, *q, *i, *j);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            i = yy.<span class=\"built_in\">begin</span>(), j = yy.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">            ++j;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = xx.<span class=\"built_in\">begin</span>(); q = xx.<span class=\"built_in\">begin</span>(); ++q;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; q != xx.<span class=\"built_in\">end</span>(); ++p, ++q)</span><br><span class=\"line\">            ans += <span class=\"built_in\">calc_x</span>(*p, *q);</span><br><span class=\"line\">        i = yy.<span class=\"built_in\">begin</span>(); j = yy.<span class=\"built_in\">begin</span>(); ++j;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; j != yy.<span class=\"built_in\">end</span>(); ++i, ++j)</span><br><span class=\"line\">            ans += <span class=\"built_in\">calc_y</span>(*i, *j);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">judge</span>(m, m)) ans++;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"tdl\">1008. TDL</h2>\n<p>solve at 01:10(+4)</p>\n<p>定义<span class=\"math inline\">\\(f(n, m)\\)</span>为第<span\nclass=\"math inline\">\\(m\\)</span>个比<span\nclass=\"math inline\">\\(n\\)</span>大的与<span\nclass=\"math inline\">\\(n\\)</span>互质的数</p>\n<p>给你<span class=\"math inline\">\\(m\\)</span>和<span\nclass=\"math inline\">\\(k = (f(n, m) - n)\\, xor\\,\nn\\)</span>，求最小的<span class=\"math inline\">\\(n\\)</span><span\nclass=\"math inline\">\\((1&lt;=k&lt;=1e18, 1&lt;=m&lt;=100)\\)</span></p>\n<p>注意到<span\nclass=\"math inline\">\\(m\\)</span>非常小，直接在k上下范围内搜就行了(我们取得是2048,好像500就够了)</p>\n<h2 id=\"dimensions\">1011. 11Dimensions</h2>\n<p>solve at 04:53(+3)</p>\n<p>你有一个长度小于<span class=\"math inline\">\\(5e4\\)</span>的整数<span\nclass=\"math inline\">\\(n\\)</span>和一个数<span\nclass=\"math inline\">\\(m\\)</span>，有些数位未知（以问号代替），已知<span\nclass=\"math inline\">\\(n\\)</span>是<span\nclass=\"math inline\">\\(m\\)</span>的整数倍，<span\nclass=\"math inline\">\\(q\\)</span>次询问，每次给出一个数字<span\nclass=\"math inline\">\\(k\\)</span>，求第<span\nclass=\"math inline\">\\(k\\)</span>小的满足条件的<span\nclass=\"math inline\">\\(n\\ mod\\ 1e9+7\\)</span>的结果<span\nclass=\"math inline\">\\((1&lt;=m&lt;=20, 1&lt;=q&lt;=1e5)\\)</span></p>\n<p>队友做法是先<span class=\"math inline\">\\(dp[i][j]\\)</span>表示前<span\nclass=\"math inline\">\\(i-1\\)</span>位已经填完了，<span\nclass=\"math inline\">\\(i-n\\)</span>位的数模<span\nclass=\"math inline\">\\(m\\)</span>等于<span\nclass=\"math inline\">\\(j\\)</span>的方案数</p>\n<p>然后询问离线排序dfs,按位依次枚举填的数是啥，显然每次处理的区间一定是连续的，复杂度不太会算，似乎是<span\nclass=\"math inline\">\\(O(10nm+10(n + q)\\log(q))\\)</span>?,\n反正跑的还挺快的...</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> MAXN 1000000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> LL long long</span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">const</span> LL e18 = <span class=\"number\">1000000000000000001LL</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1000000007</span>;</span><br><span class=\"line\"><span class=\"keyword\">char</span> str[<span class=\"number\">50004</span>];</span><br><span class=\"line\">LL dp[<span class=\"number\">50004</span>][<span class=\"number\">22</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, Q;</span><br><span class=\"line\">vector&lt;pair&lt;LL, <span class=\"keyword\">int</span>&gt;&gt; query;</span><br><span class=\"line\">LL ans[<span class=\"number\">100004</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> pow10_m[<span class=\"number\">50004</span>];</span><br><span class=\"line\">LL pow10_mod[<span class=\"number\">50004</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    query.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n + <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(dp[i], <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(dp[i]));</span><br><span class=\"line\">    dp[n][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    pow10_m[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n + <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pow10_m[i] = pow10_m[i - <span class=\"number\">1</span>] * <span class=\"number\">10</span> % m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= Q; ++i)</span><br><span class=\"line\">        ans[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> curi, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, LL cans, <span class=\"keyword\">int</span> modm, LL curk)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (l &gt; r)</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (curi == n)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (modm == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = l; i &lt;= r; ++i)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(curk + <span class=\"number\">1</span> == query[i].first)</span><br><span class=\"line\">                    ans[query[i].second] = cans;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (str[curi] != <span class=\"string\">&#x27;?&#x27;</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(curi + <span class=\"number\">1</span>, l, r,</span><br><span class=\"line\">            (cans + pow10_mod[n - curi - <span class=\"number\">1</span>] * (str[curi] - <span class=\"string\">&#x27;0&#x27;</span>)) % mod,</span><br><span class=\"line\">            (modm + pow10_m[n - curi - <span class=\"number\">1</span>] * (str[curi] - <span class=\"string\">&#x27;0&#x27;</span>)) % m,</span><br><span class=\"line\">            curk);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        LL tot = curk, tt = curk;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> ll = l, rr;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt;= <span class=\"number\">9</span>; ++c)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            tot += dp[curi + <span class=\"number\">1</span>][(m - ((modm + c * pow10_m[n - curi - <span class=\"number\">1</span>]) % m)) % m];</span><br><span class=\"line\">            tot = <span class=\"built_in\">min</span>(e18, tot);</span><br><span class=\"line\">            LL curremain = (cans + pow10_mod[n - curi - <span class=\"number\">1</span>] * c) % mod;</span><br><span class=\"line\">            rr = <span class=\"built_in\">upper_bound</span>(&amp;query[l], &amp;query[r + <span class=\"number\">1</span>], pair&lt;LL,<span class=\"keyword\">int</span>&gt;(tot, <span class=\"number\">0x3f3f3f3f</span>)) - (&amp;query[<span class=\"number\">0</span>]);</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(curi + <span class=\"number\">1</span>, ll, rr - <span class=\"number\">1</span>, curremain, (modm + c * pow10_m[n - curi - <span class=\"number\">1</span>]) % m, tt);</span><br><span class=\"line\">            ll = rr;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(ll &gt; r) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            tt = tot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> T;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">    pow10_mod[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">50001</span>; ++i)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        pow10_mod[i] = pow10_mod[i - <span class=\"number\">1</span>] * <span class=\"number\">10</span> % mod;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (T--)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d %d %s&quot;</span>, &amp;n, &amp;m, &amp;Q, str);</span><br><span class=\"line\">        <span class=\"built_in\">init</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; --i)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (str[i] != <span class=\"string\">&#x27;?&#x27;</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> r = <span class=\"number\">0</span>; r &lt; m; ++r)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    dp[i][(r + (str[i] - <span class=\"string\">&#x27;0&#x27;</span>) * pow10_m[n - i - <span class=\"number\">1</span>] % m) % m] =</span><br><span class=\"line\">                    <span class=\"built_in\">min</span>(dp[i][(r + (str[i] - <span class=\"string\">&#x27;0&#x27;</span>) * pow10_m[n - i - <span class=\"number\">1</span>]) % m] + dp[i + <span class=\"number\">1</span>][r], e18);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">else</span></span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> r = <span class=\"number\">0</span>; r &lt; m; ++r)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> c = <span class=\"number\">0</span>; c &lt;= <span class=\"number\">9</span>; ++c)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        dp[i][(r + c * pow10_m[n - i - <span class=\"number\">1</span>]) % m] =</span><br><span class=\"line\">                        <span class=\"built_in\">min</span>(dp[i][(r + c * pow10_m[n - i - <span class=\"number\">1</span>]) % m] + dp[i + <span class=\"number\">1</span>][r], e18);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> id = <span class=\"number\">1</span>; id &lt;= Q; ++id)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            LL x;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, &amp;x);</span><br><span class=\"line\">            query.<span class=\"built_in\">push_back</span>(pair&lt;LL,<span class=\"keyword\">int</span>&gt;(x, id));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">sort</span>(query.<span class=\"built_in\">begin</span>(), query.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, Q - <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= Q; ++i)</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"stay-real\">1012. Stay Real</h2>\n<p>solve at 00:43</p>\n<p>队友签的到</p>\n","categories":["算法"],"tags":["杭电多校"]},{"title":"2019杭电多校第五场","url":"/posts/7efda348.html","content":"<h2 id=\"three-arrays\">1002. three arrays</h2>\n<p>upsloved</p>\n<p>你有两个长为<span class=\"math inline\">\\(n\\)</span>的序列<span\nclass=\"math inline\">\\(a,\nb\\)</span>，你可以任意打乱这两个序列，使得序列<span\nclass=\"math inline\">\\(c\\)</span>字典序最小<span\nclass=\"math inline\">\\((c_i = a_i\\, xor\\, b_i)\\)</span> <span id=\"more\"></span>\n题解很神秘，看不懂。。。</p>\n<p>两颗字典树dfs相互跑就好了</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Trie</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> root, sz, cnt[N * <span class=\"number\">31</span>], nxt[N * <span class=\"number\">31</span>][<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">newnode</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tcnt[sz] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(nxt[sz], <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(nxt[sz]));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> sz++; </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\tsz = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\troot = <span class=\"built_in\">newnode</span>();</span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> p = root;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">29</span>; ~i; --i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> c = (x &gt;&gt; i) &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!nxt[p][c])</span><br><span class=\"line\">\t\t\tnxt[p][c] = <span class=\"built_in\">newnode</span>();</span><br><span class=\"line\">\t\t\tp = nxt[p][c];</span><br><span class=\"line\">\t\t\tcnt[p]++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;A, B;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N], b[N], T, n;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt; pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; &gt; ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> p1, <span class=\"keyword\">int</span> p2, <span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> s)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> c = <span class=\"built_in\">min</span>(A.cnt[p1], B.cnt[p2]);</span><br><span class=\"line\">\tA.cnt[p1] -= c; B.cnt[p2] -= c;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(s == <span class=\"number\">30</span>) &#123;</span><br><span class=\"line\">\t\tans.<span class=\"built_in\">push_back</span>(<span class=\"built_in\">make_pair</span>(x, c));</span><br><span class=\"line\">\t\t<span class=\"comment\">//cout &lt;&lt; x &lt;&lt; &quot; &quot; &lt;&lt; c &lt;&lt; endl;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(A.cnt[A.nxt[p1][<span class=\"number\">0</span>]] &amp;&amp; B.cnt[B.nxt[p2][<span class=\"number\">0</span>]])</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs</span>(A.nxt[p1][<span class=\"number\">0</span>], B.nxt[p2][<span class=\"number\">0</span>], x &lt;&lt; <span class=\"number\">1</span>, s + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(A.cnt[A.nxt[p1][<span class=\"number\">1</span>]] &amp;&amp; B.cnt[B.nxt[p2][<span class=\"number\">1</span>]])</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs</span>(A.nxt[p1][<span class=\"number\">1</span>], B.nxt[p2][<span class=\"number\">1</span>], x &lt;&lt; <span class=\"number\">1</span>, s + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(A.cnt[A.nxt[p1][<span class=\"number\">0</span>]] &amp;&amp; B.cnt[B.nxt[p2][<span class=\"number\">1</span>]])</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs</span>(A.nxt[p1][<span class=\"number\">0</span>], B.nxt[p2][<span class=\"number\">1</span>], x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, s + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(A.cnt[A.nxt[p1][<span class=\"number\">1</span>]] &amp;&amp; B.cnt[B.nxt[p2][<span class=\"number\">0</span>]])</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs</span>(A.nxt[p1][<span class=\"number\">1</span>], B.nxt[p2][<span class=\"number\">0</span>], x &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, s + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t\tA.<span class=\"built_in\">init</span>(); B.<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">\t\t\tA.<span class=\"built_in\">insert</span>(a[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;b[i]);\t\t</span><br><span class=\"line\">\t\t\tB.<span class=\"built_in\">insert</span>(b[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs</span>(A.root, B.root, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">sort</span>(ans.<span class=\"built_in\">begin</span>(), ans.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ans.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= ans[i].second; ++j) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, ans[i].first);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(j != ans[i].second)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i + <span class=\"number\">1</span> != ans.<span class=\"built_in\">size</span>())</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"equation\">1004. equation</h2>\n<p>solved at 03:02(+2)</p>\n<p>队友做的，没看</p>\n<h2 id=\"permutation1\">1005. permutation1</h2>\n<p>solved at 02:25(+1)</p>\n<p>T组数据，你有一个<span class=\"math inline\">\\(1-n\\)</span>的排列<span\nclass=\"math inline\">\\(a\\)</span>，定义<span\nclass=\"math inline\">\\(d[i]=a[i+1]-a[i](1&lt;=i&lt;n)\\)</span></p>\n<p>求字典序第<span class=\"math inline\">\\(k\\)</span>小的<span\nclass=\"math inline\">\\(d\\)</span>序列对应的原序列<span\nclass=\"math inline\">\\(a\\)</span></p>\n<p><span class=\"math inline\">\\(2&lt;=n&lt;=20,\n1&lt;=k&lt;=min(factorial(n), 1e4), 1&lt;=T&lt;=40\\)</span></p>\n<p>题解是个搜索。。。</p>\n<p>我的（实际上是队友的想法我的实现）做法是枚举<span\nclass=\"math inline\">\\(d\\)</span>数组计算出剩下的方案数，复杂度<span\nclass=\"math inline\">\\(O(Tn^3)\\)</span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">25</span>], T, n, k, b[<span class=\"number\">25</span>], vis[<span class=\"number\">25</span>][<span class=\"number\">50</span>], N = <span class=\"number\">25</span>, s, ss, mx, mn;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> f[<span class=\"number\">25</span>], tmp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">get_a</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x = <span class=\"number\">0</span>, s = <span class=\"number\">0</span>, p = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\ts += b[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s &gt; x) &#123;</span><br><span class=\"line\">\t\t\tp = <span class=\"number\">1</span> + i;</span><br><span class=\"line\">\t\t\tx = s;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ta[p] = n;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = p + <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\ta[i] = b[i - <span class=\"number\">1</span>] + a[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = p - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; --i) &#123;</span><br><span class=\"line\">\t\ta[i] = a[i + <span class=\"number\">1</span>] - b[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tf[<span class=\"number\">0</span>] = f[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= <span class=\"number\">20</span>; ++i)</span><br><span class=\"line\">\t\tf[i] = f[i - <span class=\"number\">1</span>] * i;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(vis));</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class=\"line\">\t\tvis[<span class=\"number\">0</span>][N] = <span class=\"number\">1</span>; s = <span class=\"number\">0</span>; mx = <span class=\"number\">0</span>; mn = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span> - n; j &lt;= n - <span class=\"number\">1</span>; ++j) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(vis[i - <span class=\"number\">1</span>][N - j] || j == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\tss = s + j;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">bool</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = N - n; l &lt;= N + n; ++l) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(vis[i - <span class=\"number\">1</span>][l] &amp;&amp; (<span class=\"built_in\">abs</span>(l + j - N) &gt;= n || l + j == N))</span><br><span class=\"line\">\t\t\t\t\t\tflag = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(flag) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(i == <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t\t\ttmp = f[n - i - <span class=\"number\">1</span>] * (n - <span class=\"built_in\">abs</span>(ss));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t\t\t\ttmp = f[n - i - <span class=\"number\">1</span>] * (n - <span class=\"built_in\">max</span>(<span class=\"built_in\">max</span>(<span class=\"built_in\">abs</span>(mx), <span class=\"built_in\">abs</span>(mn)), <span class=\"built_in\">max</span>(<span class=\"built_in\">max</span>(<span class=\"built_in\">abs</span>(ss - mx), <span class=\"built_in\">abs</span>(ss - mn)), <span class=\"built_in\">max</span>(<span class=\"built_in\">abs</span>(mx - mn), <span class=\"built_in\">abs</span>(ss)))));</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(tmp &gt;= k) &#123;</span><br><span class=\"line\">\t\t\t\t\tb[i] = j;</span><br><span class=\"line\">\t\t\t\t\ts += j;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> sp = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t\tvis[i][sp + N] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> l = i; l; --l) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tsp += b[l];</span><br><span class=\"line\">\t\t\t\t\t\tvis[i][sp + N] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tmx = <span class=\"built_in\">max</span>(mx, ss);</span><br><span class=\"line\">\t\t\t\t\tmn = <span class=\"built_in\">min</span>(mn, ss);\t</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tk -= tmp;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">get_a</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d%c&quot;</span>, a[i], <span class=\"string\">&quot; \\n&quot;</span>[i == n]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"string-matching\">1006. string matching</h2>\n<p>solved at 00:28(+1)</p>\n<p>没开long long wa了一发。。</p>\n<p>exkmp裸题</p>\n<h2 id=\"permutation2\">1007. permutation2</h2>\n<p>solved at 00:57(+1)</p>\n<p>有一个1-n的排列，你知道第一项和最后一项，且相邻项的差不超过2,求方案数</p>\n<p>oeis+队友想的+瞎搞搞</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>, mod = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> f[N], n, x, y, T;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x == y - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x != <span class=\"number\">1</span> &amp;&amp; y != n)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x != <span class=\"number\">1</span>) x++;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(y != n) y--;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> f[y - x];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tf[<span class=\"number\">0</span>] = f[<span class=\"number\">1</span>] = f[<span class=\"number\">2</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt; N; ++i)</span><br><span class=\"line\">\t\tf[i] = (f[i - <span class=\"number\">1</span>] + f[i - <span class=\"number\">3</span>]) % mod;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;n, &amp;x, &amp;y);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"built_in\">get</span>(x, y));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["杭电多校"]},{"title":"2019牛客多校第六场","url":"/posts/97ccb4c8.html","content":"<p>最近实验室装修搬东西有点忙，就一直拖到现在。。。</p>\n<h2 id=\"a.-garbage-classification\">A. Garbage Classification</h2>\n<p>solved at 00:14</p>\n<p>签到题，垃圾分类 <span id=\"more\"></span> ## B. Shorten IPv6 Address</p>\n<p>solved at 00:48(+1)</p>\n<p>给你一个二进制表示的ipv6地址，求最短表示</p>\n<p>模拟即可，不用考虑最短且字典序最小怎么做，枚举出来就行了</p>\n<h2 id=\"d.-move\">D. Move</h2>\n<p>solved at 03:46(+8)</p>\n<p>有K个箱子和n个物品，物品大小为<span\nclass=\"math inline\">\\(v_i\\)</span>，箱子容量都一样，求最小容量使得物品能按照如下方法装到箱子里：</p>\n<p>首先找能装到当前箱子里的最大物品，装到箱子里，重复这一过程直到箱子装不下任何东西为止，然后装下一个箱子(<span\nclass=\"math inline\">\\(1&lt;=K,n,v_i&lt;=1000\\)</span>)</p>\n<p>看上去像个二分，但是就是不能二分。。。</p>\n<p>n = 15, K = 5</p>\n<p>39 39 39 39 39 60 60 60 60 60 100 100 100 100 100</p>\n<p>199可以装下，但200和201都不行。。。</p>\n<p>考虑下界肯定是<span class=\"math inline\">\\(max(max(v_i),\nceil(sum[n]/k))\\)</span></p>\n<p>然后往上一个个直接check就好了，最多1000次肯定可以了（事实上数据很难造有人说100次够了）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1010</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n, a[N], K, sum[N], cas, mx;</span><br><span class=\"line\">multiset&lt;<span class=\"keyword\">int</span>&gt; s;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> vol)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> multiset&lt;<span class=\"keyword\">int</span>&gt; s;</span><br><span class=\"line\">    s = ::s;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> tot = <span class=\"number\">0</span>, tmp;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(!s.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">        tmp = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(tmp &lt; vol) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> p = s.<span class=\"built_in\">upper_bound</span>(vol - tmp);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(p == s.<span class=\"built_in\">begin</span>()) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            --p;</span><br><span class=\"line\">            tmp += *p;</span><br><span class=\"line\">            s.<span class=\"built_in\">erase</span>(p);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(++tot &gt; K)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">        s.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        mx = <span class=\"number\">-1e9</span>;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;K);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">            s.<span class=\"built_in\">insert</span>(a[i]);</span><br><span class=\"line\">            sum[i] = sum[i - <span class=\"number\">1</span>] + a[i];</span><br><span class=\"line\">            mx = <span class=\"built_in\">max</span>(mx, a[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = <span class=\"built_in\">max</span>(mx, <span class=\"number\">1</span> + (sum[n] - <span class=\"number\">1</span>) / K), r = sum[n], ans;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = l; i &lt;= r; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(i)) &#123;</span><br><span class=\"line\">                ans = i;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case #%d: %d\\n&quot;</span>, ++cas, ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"e.-androgynos\">E. Androgynos</h2>\n<p>upsolved</p>\n<p>给你<span class=\"math inline\">\\(n\\)</span>，问你存不存在<span\nclass=\"math inline\">\\(n\\)</span>个点的自补图，存在则输出任意一个并输出其对应关系<span\nclass=\"math inline\">\\((1&lt;=n&lt;=2000)\\)</span></p>\n<p>首先肯定<span class=\"math inline\">\\(n\\%4\\le1\\)</span>才会有解</p>\n<p>考虑<span class=\"math inline\">\\(n=4\\)</span>，很容易手推出来</p>\n<p>然后考虑<span class=\"math inline\">\\(n=4k\\)</span>, 将<span\nclass=\"math inline\">\\(n\\)</span>个点分为4堆，每堆<span\nclass=\"math inline\">\\(k\\)</span>个，有两堆是完全图，剩下两个全是孤立点，然后把这4堆看出4个点以<span\nclass=\"math inline\">\\(n=4\\)</span>的方法连接就好了（因为团的补图是独立集)</p>\n<p>如果<span\nclass=\"math inline\">\\(n=4k+1\\)</span>，直接把剩下那个点向团连边（事实上任意两堆都可以）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> G[N][N], T, n, cas, ans[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case #%d: &quot;</span>, ++cas);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n % <span class=\"number\">4</span> &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;No&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Yes&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> m = n / <span class=\"number\">4</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(G, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(G));</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; ++j) &#123;</span><br><span class=\"line\">\t\t\t\tG[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tG[j][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tG[m + i][m + j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tG[m + j][m + i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tG[i][<span class=\"number\">2</span> * m + j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tG[<span class=\"number\">2</span> * m + j][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tG[m + i][<span class=\"number\">3</span> * m + j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tG[<span class=\"number\">3</span> * m + j][m + i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tG[<span class=\"number\">2</span> * m + i][<span class=\"number\">3</span> * m + j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tG[<span class=\"number\">3</span> * m + j][<span class=\"number\">2</span> * m + i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n % <span class=\"number\">4</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">\t\t\t\tG[i][n - <span class=\"number\">1</span>] = G[n - <span class=\"number\">1</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tG[m + i][n - <span class=\"number\">1</span>] = G[n - <span class=\"number\">1</span>][m + i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span> * m; ++i) G[i][i] = <span class=\"number\">0</span>, ans[i] = i + <span class=\"number\">2</span> * m;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span> * m; i &lt; <span class=\"number\">3</span> * m; ++i) G[i][i] = <span class=\"number\">0</span>, ans[i] = i - m;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">3</span> * m; i &lt; <span class=\"number\">4</span> * m; ++i) G[i][i] = <span class=\"number\">0</span>, ans[i] = i - <span class=\"number\">3</span> * m;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n % <span class=\"number\">4</span> == <span class=\"number\">1</span>) G[n - <span class=\"number\">1</span>][n - <span class=\"number\">1</span>] = <span class=\"number\">0</span>, ans[n - <span class=\"number\">1</span>] = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j)</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, G[i][j]);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d%c&quot;</span>, ans[i] + <span class=\"number\">1</span>, <span class=\"string\">&quot; \\n&quot;</span>[i == n - <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"g.-is-today-friday\">G. Is Today Friday?</h2>\n<p>upsolved</p>\n<p>你知道A-J表示0-9，但是不知道对应关系，你有<span\nclass=\"math inline\">\\(n\\)</span>个日期，每个都是星期五，求字典序最小的对应关系</p>\n<p>搜索就完事了，注意要去重，否则会T</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> ans[<span class=\"number\">12</span>], ok[<span class=\"number\">12</span>];</span><br><span class=\"line\">unordered_set&lt;string&gt; s;</span><br><span class=\"line\"><span class=\"keyword\">char</span> ss[<span class=\"number\">15</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n, cas, found, stat;</span><br><span class=\"line\"><span class=\"keyword\">int</span> ma[] = &#123;<span class=\"number\">0</span>, <span class=\"number\">31</span>, <span class=\"number\">28</span>, <span class=\"number\">31</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">31</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>, <span class=\"number\">30</span>, <span class=\"number\">31</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">isfriday</span><span class=\"params\">(<span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (<span class=\"number\">1461</span> * (y + <span class=\"number\">4800</span> + (m - <span class=\"number\">14</span>) / <span class=\"number\">12</span>) / <span class=\"number\">4</span></span><br><span class=\"line\">           + <span class=\"number\">367</span> * (m - <span class=\"number\">2</span> - (m - <span class=\"number\">14</span>) / <span class=\"number\">12</span> * <span class=\"number\">12</span>) / <span class=\"number\">12</span></span><br><span class=\"line\">           - <span class=\"number\">3</span> * ((y + <span class=\"number\">4900</span> + (m - <span class=\"number\">14</span>) / <span class=\"number\">12</span>) / <span class=\"number\">100</span>) / <span class=\"number\">4</span></span><br><span class=\"line\">           + d - <span class=\"number\">32075</span>) % <span class=\"number\">7</span> == <span class=\"number\">4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">is29</span><span class=\"params\">(<span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (!(y % <span class=\"number\">4</span>) &amp;&amp; (y % <span class=\"number\">100</span>)) || !(y % <span class=\"number\">400</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">bool</span> <span class=\"title\">isvalid</span><span class=\"params\">(<span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> m, <span class=\"keyword\">int</span> d)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y &lt; <span class=\"number\">1600</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(m &lt; <span class=\"number\">1</span> || m &gt; <span class=\"number\">12</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(d &lt; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d &lt;= ma[m] + (m == <span class=\"number\">2</span> &amp;&amp; <span class=\"built_in\">is29</span>(y));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> si: s) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> y = <span class=\"number\">1000</span> * ans[(si[<span class=\"number\">0</span>] - <span class=\"string\">&#x27;A&#x27;</span>)] + <span class=\"number\">100</span> * ans[(si[<span class=\"number\">1</span>] - <span class=\"string\">&#x27;A&#x27;</span>)] + <span class=\"number\">10</span> * ans[(si[<span class=\"number\">2</span>] - <span class=\"string\">&#x27;A&#x27;</span>)] + ans[(si[<span class=\"number\">3</span>] - <span class=\"string\">&#x27;A&#x27;</span>)];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> m = <span class=\"number\">10</span> * ans[(si[<span class=\"number\">5</span>] - <span class=\"string\">&#x27;A&#x27;</span>)] + ans[(si[<span class=\"number\">6</span>] - <span class=\"string\">&#x27;A&#x27;</span>)];</span><br><span class=\"line\">        <span class=\"keyword\">int</span> d = <span class=\"number\">10</span> * ans[(si[<span class=\"number\">8</span>] - <span class=\"string\">&#x27;A&#x27;</span>)] + ans[(si[<span class=\"number\">9</span>] - <span class=\"string\">&#x27;A&#x27;</span>)];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!<span class=\"built_in\">isvalid</span>(y, m, d) || !<span class=\"built_in\">isfriday</span>(y, m, d)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n); found = <span class=\"literal\">false</span>; s.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) ans[i] = i, ok[i] = (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">10</span>) - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, ss);</span><br><span class=\"line\">            s.<span class=\"built_in\">insert</span>(ss);</span><br><span class=\"line\">            ok[ss[<span class=\"number\">0</span>] - <span class=\"string\">&#x27;A&#x27;</span>] &amp;= <span class=\"number\">0x3FE</span>;</span><br><span class=\"line\">            ok[ss[<span class=\"number\">5</span>] - <span class=\"string\">&#x27;A&#x27;</span>] &amp;= <span class=\"number\">0x3</span>;</span><br><span class=\"line\">            ok[ss[<span class=\"number\">8</span>] - <span class=\"string\">&#x27;A&#x27;</span>] &amp;= <span class=\"number\">0xF</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case #%d: &quot;</span>, ++cas);</span><br><span class=\"line\">        <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">bool</span> flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!((ok[i] &gt;&gt; ans[i]) &amp; <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">                    flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!flag) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>()) &#123;</span><br><span class=\"line\">                found = <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; ++i)</span><br><span class=\"line\">                    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, ans[i]);</span><br><span class=\"line\">                <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">while</span>(<span class=\"built_in\">next_permutation</span>(ans, ans + <span class=\"number\">10</span>));</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!found)</span><br><span class=\"line\">            <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Impossible&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"j.-upgrading-technology\">J. Upgrading Technology</h2>\n<p>solved at 02:17(+4)</p>\n<p>本来让队友做的，不知道他在做什么。。。我怎么一发就过了。。。</p>\n<p>点技能树，<span class=\"math inline\">\\(n\\)</span>个技能，每个<span\nclass=\"math inline\">\\(m\\)</span>级，将技能<span\nclass=\"math inline\">\\(i\\)</span>从<span\nclass=\"math inline\">\\(j-1\\)</span>级点到<span\nclass=\"math inline\">\\(j\\)</span>级需要代价<span\nclass=\"math inline\">\\(c[i][j]\\)</span>，所有技能都升到<span\nclass=\"math inline\">\\(j\\)</span>级之后会获得<span\nclass=\"math inline\">\\(d[j]\\)</span>的收益，初始都是<span\nclass=\"math inline\">\\(0\\)</span>，代价和收益都有正有负，求最大的钱币数<span\nclass=\"math inline\">\\((1&lt;=n,m&lt;=1000)\\)</span></p>\n<p>枚举最低技能等级，再枚举哪个技能正好是这个等级，<span\nclass=\"math inline\">\\(O(1)\\)</span>得出答案，总复杂度<span\nclass=\"math inline\">\\(O(nm)\\)</span>，需要预处理几个数组</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1010</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> inf = <span class=\"number\">1e18</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> mx[N][N], c[N][N], d[N], pre[N][N], suf[N][N], ans, sum[N][N], sd[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n, m, cas;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; ++j) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, &amp;c[i][j]);</span><br><span class=\"line\">\t\t\t\tc[i][j] = -c[i][j];</span><br><span class=\"line\">\t\t\t\tsum[i][j] = sum[i][j - <span class=\"number\">1</span>] + c[i][j];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; ++j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, &amp;d[j]);</span><br><span class=\"line\">\t\t\tsd[j] = sd[j - <span class=\"number\">1</span>] + d[j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\tmx[i][m + <span class=\"number\">1</span>] = -inf;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = m; ~j; --j) &#123;</span><br><span class=\"line\">\t\t\t\tmx[i][j] = <span class=\"built_in\">max</span>(mx[i][j + <span class=\"number\">1</span>], sum[i][j]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= m; ++j) &#123;</span><br><span class=\"line\">\t\t\tpre[<span class=\"number\">0</span>][j] = suf[n + <span class=\"number\">1</span>][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) </span><br><span class=\"line\">\t\t\t\tpre[i][j] = pre[i - <span class=\"number\">1</span>][j] + mx[i][j];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n; i; --i)</span><br><span class=\"line\">\t\t\t\tsuf[i][j] = suf[i + <span class=\"number\">1</span>][j] + mx[i][j];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> low = <span class=\"number\">0</span>; low &lt;= m; ++low) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t\t\tans = <span class=\"built_in\">max</span>(ans, sd[low] + pre[i - <span class=\"number\">1</span>][low] + suf[i + <span class=\"number\">1</span>][low] + sum[i][low]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Case #%d: %lld\\n&quot;</span>, ++cas, ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["牛客多校"]},{"title":"2019牛客多校第五场","url":"/posts/f2c2ff11.html","content":"<h2 id=\"a.-digits2\">A. digits2</h2>\n<p>solved at 00:47(+1)</p>\n<p>签到题，将<span class=\"math inline\">\\(n\\)</span>输出<span\nclass=\"math inline\">\\(n\\)</span>次即可，不知道队友在想什么。。。\n<span id=\"more\"></span> ## B. generator 1</p>\n<p>upsolved</p>\n<p>矩阵快速幂，只是次数非常高</p>\n<p>用十进制快速幂就好了，居然没想出来。。。</p>\n<h2 id=\"c.-generator-2\">C. generator 2</h2>\n<p>upsolved</p>\n<p>BSGS,需要改块的大小使得总复杂度更低</p>\n<h2 id=\"e.-independent-set-1\">E. independent set 1</h2>\n<p>upsolved</p>\n<p>有一张<span\nclass=\"math inline\">\\(n(1&lt;=n&lt;=26)\\)</span>个点的图,问每个子图的最大独立集的和是多少</p>\n<p><span class=\"math inline\">\\(2^n\\)</span>状压dp, 设<span\nclass=\"math inline\">\\(dp[i]\\)</span>表示点状态是<span\nclass=\"math inline\">\\(i\\)</span>的最大独立集大小，设<span\nclass=\"math inline\">\\(x\\)</span>是<span\nclass=\"math inline\">\\(i\\)</span>最低位的<span\nclass=\"math inline\">\\(1\\)</span>（这样容易转移），则要么不包含这个<span\nclass=\"math inline\">\\(1\\)</span>，那就是<span\nclass=\"math inline\">\\(dp[i-(1&lt;&lt;x)]\\)</span>,要么包含这个<span\nclass=\"math inline\">\\(1\\)</span>,那就是<span\nclass=\"math inline\">\\(1+dp[i-(1&lt;&lt;x)-(i\\&amp;G[x])]\\)</span>,其中<span\nclass=\"math inline\">\\(G[x]\\)</span>表示<span\nclass=\"math inline\">\\(x\\)</span>的邻接点的状压集合，二者取最大值就好了，因为内存限制，<span\nclass=\"math inline\">\\(dp\\)</span>数组需要用<span\nclass=\"math inline\">\\(char\\)</span>类型</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> f[<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">26</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> g[<span class=\"number\">26</span>], n, m, x, y, ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class=\"line\">\t\tg[x] |= <span class=\"number\">1</span> &lt;&lt; y;</span><br><span class=\"line\">\t\tg[y] |= <span class=\"number\">1</span> &lt;&lt; x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; (<span class=\"number\">1</span> &lt;&lt; n); ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = __builtin_ffs(i) - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tf[i] = <span class=\"built_in\">max</span>((<span class=\"keyword\">int</span>)f[i ^ (<span class=\"number\">1</span> &lt;&lt; x)], <span class=\"number\">1</span> + f[(i ^ (<span class=\"number\">1</span> &lt;&lt; x)) - (i &amp; g[x])]);</span><br><span class=\"line\">\t\tans += f[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"f.-maximum-clique-1\">F. maximum clique 1</h2>\n<p>upsolved</p>\n<p>一张<span\nclass=\"math inline\">\\(n(1&lt;=n&lt;=5000)\\)</span>个的图，每个点有点权，点权两两不同，两个点右边当且仅当它们的点权的二进制位有至少两位不同，求最大团并输出一个方案</p>\n<p>考虑其补图，显然补图两点有边当且仅当有一个二进制位不同，显然是一张二分图，求最大独立集即可</p>\n<h2 id=\"g.-subsequence-1\">G. subsequence 1</h2>\n<p>solved at 01:19</p>\n<p>两个数字字符串<span class=\"math inline\">\\(s\\)</span>, <span\nclass=\"math inline\">\\(t\\)</span>, 长度不超过<span\nclass=\"math inline\">\\(3000\\)</span>，求<span\nclass=\"math inline\">\\(s\\)</span>不含前导<span\nclass=\"math inline\">\\(0\\)</span>的子串作为数字比<span\nclass=\"math inline\">\\(t\\)</span>大的方案数</p>\n<p>如果一个没有前导<span class=\"math inline\">\\(0\\)</span>的子串比<span\nclass=\"math inline\">\\(t\\)</span>长，那肯定比<span\nclass=\"math inline\">\\(t\\)</span>大，组合数算出来</p>\n<p>接下来考虑子串和<span class=\"math inline\">\\(t\\)</span>一样长，设<span\nclass=\"math inline\">\\(dp[i][j]\\)</span>表示考虑<span\nclass=\"math inline\">\\(s\\)</span>的前<span\nclass=\"math inline\">\\(i\\)</span>位，已经选了<span\nclass=\"math inline\">\\(j\\)</span>位，并且已经比<span\nclass=\"math inline\">\\(t\\)</span>的前<span\nclass=\"math inline\">\\(j\\)</span>位大的方案数，<span\nclass=\"math inline\">\\(dp2[i][j]\\)</span>表示相等的方案数，转移方程可以很容易地推出来（见代码），<span\nclass=\"math inline\">\\(dp[n][m]\\)</span>就是长度相等时的方案数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">3010</span>, mod = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> fac[N], invfac[N], ans, T, n, m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">qp</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\tres = <span class=\"number\">1LL</span> * res * a % mod;</span><br><span class=\"line\">\t\ta = <span class=\"number\">1LL</span> * a * a % mod;</span><br><span class=\"line\">\t\tn &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tfac[<span class=\"number\">0</span>] = invfac[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; N; ++i) &#123;</span><br><span class=\"line\">\t\tfac[i] = <span class=\"number\">1LL</span> * fac[i - <span class=\"number\">1</span>] * i % mod;</span><br><span class=\"line\">\t\tinvfac[i] = <span class=\"built_in\">qp</span>(fac[i], mod - <span class=\"number\">2</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">C</span><span class=\"params\">(<span class=\"keyword\">int</span> n, <span class=\"keyword\">int</span> m)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1LL</span> * fac[n] * invfac[n - m] % mod * invfac[m] % mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[N][N], dp2[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> s[N], t[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%s%s&quot;</span>, &amp;n, &amp;m, s + <span class=\"number\">1</span>, t + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= m; ++j) dp[i][j] = dp2[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\tdp2[i][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;0&#x27;</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = n - i; j &gt;= m; --j) &#123;</span><br><span class=\"line\">\t\t\t\tans = (ans + <span class=\"built_in\">C</span>(n - i, j)) % mod;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"comment\">//cout &lt;&lt; ans &lt;&lt; endl;</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j) &#123;</span><br><span class=\"line\">\t\t\t\tdp[i][j] = (dp[i - <span class=\"number\">1</span>][j] + dp[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]) % mod;;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(s[i] &gt; t[j]) &#123;</span><br><span class=\"line\">\t\t\t\t\tdp[i][j] = (dp[i][j] + dp2[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]) % mod;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tdp2[i][j] = dp2[i - <span class=\"number\">1</span>][j];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(s[i] == t[j])</span><br><span class=\"line\">\t\t\t\t\tdp2[i][j] = (dp2[i][j] + dp2[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]) % mod;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans = (ans + dp[n][m]) % mod;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"h.-subsequence-2\">H. subsequence 2</h2>\n<p>solved at 02:46</p>\n<p>长为<span\nclass=\"math inline\">\\(n(1&lt;=n&lt;=10000)\\)</span>的字符串，仅有前<span\nclass=\"math inline\">\\(m(2&lt;=m&lt;=10)\\)</span>个小写字母组成，然后给你这<span\nclass=\"math inline\">\\(m*(m-1)/2\\)</span>个字符串，表示原字符串只含两种字符的子串，比如说<span\nclass=\"math inline\">\\(abc\\)</span>会给你<span\nclass=\"math inline\">\\(ab,bc,ac\\)</span>这三个子串，请你构造出一种原字符串</p>\n<p>一眼望过去就是一个拓扑排序，比赛的时候写了个线段树优化建图。。。其实只要建相邻字母的有向边就行了</p>\n<h2 id=\"i.-three-points-1\">I. three points 1</h2>\n<p>upsolved</p>\n<p>队友做的，给你一个矩形区域和一个矩形内三角形的三边长度，让你输出这个三角形的顶点坐标，队友说把最长边的一个顶点设在矩形顶点，另一个顶点放在矩形的边上，看第三个点是否合法就好了</p>\n","categories":["算法"],"tags":["牛客多校"]},{"title":"2019杭电多校第四场","url":"/posts/1163660f.html","content":"<h2 id=\"and-minimum-spanning-tree\">1001. AND Minimum Spanning Tree</h2>\n<p>solved at 00:39(+1)</p>\n<p>有一张<span\nclass=\"math inline\">\\(n\\)</span>个点的完全图，点编号是<span\nclass=\"math inline\">\\(1\\)</span>到<span\nclass=\"math inline\">\\(n\\)</span>，边权是点编号的bitwise\nand，求最小生成树，输出字典序最小的 <span id=\"more\"></span>\n签到题，偶数直接连<span\nclass=\"math inline\">\\(1\\)</span>,二进制位不全是<span\nclass=\"math inline\">\\(1\\)</span>的奇数连最低的为零的二进制位代表的二的幂次，全是<span\nclass=\"math inline\">\\(1\\)</span>的看加一是不是小于等于<span\nclass=\"math inline\">\\(n\\)</span>，是就往加一连，否则连<span\nclass=\"math inline\">\\(1\\)</span></p>\n<h2 id=\"divide-the-stones\">1003. Divide the Stones</h2>\n<p>upsolved</p>\n<p><span class=\"math inline\">\\(n\\)</span>个石子，重量分别为<span\nclass=\"math inline\">\\(1\\)</span>到<span\nclass=\"math inline\">\\(n\\)</span>，你要把它们分为<span\nclass=\"math inline\">\\(k\\)</span>堆，使得每堆石子数量一样，总重量也一样</p>\n<p>构造，<span\nclass=\"math inline\">\\(n/k\\)</span>是偶数很简单，直接两边往中间取就行了</p>\n<p>如果<span class=\"math inline\">\\(n/k\\)</span>是奇数，<span\nclass=\"math inline\">\\(k\\)</span>必须也是奇数，先蛇形从大到小填数使得每堆只需要填<span\nclass=\"math inline\">\\(3\\)</span>个(可以保证当前每堆的和都一样），然后如下例所示：<span\nclass=\"math inline\">\\((n=27,k=3)\\)</span></p>\n<p>27 13 2</p>\n<p>26 12 4</p>\n<p>25 11 6</p>\n<p>24 10 8</p>\n<p>23 18 1</p>\n<p>22 17 3</p>\n<p>21 16 5</p>\n<p>20 15 7</p>\n<p>19 14 9</p>\n<p>就是第一列顺着填，中间一列从一半开始顺着填，最后一列一半奇数一半偶数，实现看代码</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n, k, a, sum;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; ans[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n == k &amp;&amp; k == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;yes\\n1&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n == k) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;no&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta = n / k;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(a % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;yes&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> l = <span class=\"number\">1</span>, r = n;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; ++i) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> _ = <span class=\"number\">0</span>; _ &lt; a / <span class=\"number\">2</span>; ++_)</span><br><span class=\"line\">\t\t\t\t\tans[i].<span class=\"built_in\">push_back</span>(l++);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> _ = <span class=\"number\">0</span>; _ &lt; a / <span class=\"number\">2</span>; ++_)</span><br><span class=\"line\">\t\t\t\t\tans[i].<span class=\"built_in\">push_back</span>(r--);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; ++i) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; a; ++j) </span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d%c&quot;</span>, ans[i][j], <span class=\"string\">&quot; \\n&quot;</span>[j + <span class=\"number\">1</span> == a]);</span><br><span class=\"line\">\t\t\t\tans[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(k % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;yes&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> p = n, q = k / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(p &gt; <span class=\"number\">3</span> * k) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; ++i)</span><br><span class=\"line\">\t\t\t\t\tans[i].<span class=\"built_in\">push_back</span>(p--);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = k - <span class=\"number\">1</span>; ~i; --i)</span><br><span class=\"line\">\t\t\t\t\tans[i].<span class=\"built_in\">push_back</span>(p--);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; ++i)</span><br><span class=\"line\">\t\t\t\tans[i].<span class=\"built_in\">push_back</span>(p--);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; ++i) </span><br><span class=\"line\">\t\t\t\tans[(q + i) % k].<span class=\"built_in\">push_back</span>(p--);</span><br><span class=\"line\">\t\t\tp = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = q; i &lt; k; ++i)</span><br><span class=\"line\">\t\t\t\tans[i].<span class=\"built_in\">push_back</span>(p), p += <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\tp = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; q; ++i)</span><br><span class=\"line\">\t\t\t\tans[i].<span class=\"built_in\">push_back</span>(p), p += <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; ++i) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; a; ++j) </span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d%c&quot;</span>, ans[i][j], <span class=\"string\">&quot; \\n&quot;</span>[j + <span class=\"number\">1</span> == a]);</span><br><span class=\"line\">\t\t\t\tans[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;no&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"horse\">1006. Horse</h2>\n<p>upsloved</p>\n<p>你有一匹马，马会跳过<span\nclass=\"math inline\">\\(n\\)</span>颗树，每次跳过树需要消耗树的高度那么多体力，然后会获得剩余体力那么多分数，你还有另外两种操作：一是在跳一棵树之前吃掉这棵树，即这棵树高度归零，这种操作最多<span\nclass=\"math inline\">\\(m\\)</span>次，二是跳完一棵树之后休息，将体力恢复成已经吃掉的树的高度和，这种操作最多<span\nclass=\"math inline\">\\(k\\)</span>次，初始体力为零，求最大分数<span\nclass=\"math inline\">\\(1&lt;=N&lt;=5e4, 1&lt;=m,k&lt;=50\\)</span></p>\n<p>首先考虑休息<span\nclass=\"math inline\">\\(k\\)</span>次，显然是将序列划分成<span\nclass=\"math inline\">\\(k+1\\)</span>段，每段贡献分数是负的前缀和的前缀和(<span\nclass=\"math inline\">\\(-\\sum\\limits_{l\\le i\\le r}\\sum\\limits_{l\\le j\\le\ni}a[i]\\)</span>)，这里暂不考虑吃树</p>\n<p>然后考虑吃树，吃完树之后如果在同一段，相当于后面每个位置不用减去这棵树的权值，不在同一段相当于每个位置会获得这棵树的权值，即分数是<span\nclass=\"math inline\">\\(a[i] * (n - i + 1)\\)</span>，这个东西排序求前<span\nclass=\"math inline\">\\(m\\)</span>大就好的</p>\n<p>划分成<span class=\"math inline\">\\(k+1\\)</span>段是个经典的斜率dp</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> LL;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e4</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n, m, k, a[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> que[N], head, tail;</span><br><span class=\"line\">LL dp[<span class=\"number\">55</span>][N], s[N], ss[N], f[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> LL <span class=\"title\">X</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;<span class=\"keyword\">return</span> s[i];&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> LL <span class=\"title\">Y</span><span class=\"params\">(<span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> i)</span> </span>&#123;<span class=\"keyword\">return</span> dp[t][i] - ss[i] + i * s[i];&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\tLL ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;n, &amp;k, &amp;m);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">\t\t\ts[i] = s[i - <span class=\"number\">1</span>] + a[i];</span><br><span class=\"line\">\t\t\tss[i] = ss[i - <span class=\"number\">1</span>] + s[i];</span><br><span class=\"line\">\t\t\tf[i] = <span class=\"number\">1LL</span> * (n - i + <span class=\"number\">1</span>) * a[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">sort</span>(f + <span class=\"number\">1</span>, f + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n - m + <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t\tans += f[i];</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(dp, <span class=\"number\">0x3f</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(dp));</span><br><span class=\"line\">\t\tdp[<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= k + <span class=\"number\">1</span>; ++i) &#123;</span><br><span class=\"line\">\t\t\thead = tail = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\tque[tail++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(head + <span class=\"number\">1</span> &lt; tail &amp;&amp; (<span class=\"built_in\">Y</span>(i - <span class=\"number\">1</span>, que[head + <span class=\"number\">1</span>]) - <span class=\"built_in\">Y</span>(i - <span class=\"number\">1</span>, que[head]) &lt;= j * (<span class=\"built_in\">X</span>(que[head + <span class=\"number\">1</span>]) - <span class=\"built_in\">X</span>(que[head])))) head++;</span><br><span class=\"line\">\t\t\t\tdp[i][j] = dp[i - <span class=\"number\">1</span>][que[head]] + ss[j] - ss[que[head]] - (j - que[head]) * s[que[head]];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(head + <span class=\"number\">1</span> &lt; tail &amp;&amp; (<span class=\"built_in\">Y</span>(i - <span class=\"number\">1</span>, que[tail - <span class=\"number\">1</span>]) - <span class=\"built_in\">Y</span>(i - <span class=\"number\">1</span>, que[tail - <span class=\"number\">2</span>])) * (<span class=\"built_in\">X</span>(j) - <span class=\"built_in\">X</span>(que[tail - <span class=\"number\">1</span>])) &gt;= (<span class=\"built_in\">Y</span>(i - <span class=\"number\">1</span>, j) - <span class=\"built_in\">Y</span>(i - <span class=\"number\">1</span>, que[tail - <span class=\"number\">1</span>])) * (<span class=\"built_in\">X</span>(que[tail - <span class=\"number\">1</span>]) - <span class=\"built_in\">X</span>(que[tail - <span class=\"number\">2</span>]))) tail--;</span><br><span class=\"line\">\t\t\t\tque[tail++] = j;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t\tans -= dp[k + <span class=\"number\">1</span>][n];</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"just-an-old-puzzle\">1007. Just an Old Puzzle</h2>\n<p>solved at 00:51(+1)</p>\n<p>给你一个15-puzzle,问你能否在120步之内找到解</p>\n<p>判断逆序对数和<span\nclass=\"math inline\">\\(0\\)</span>的位置就好了，120步对于所有有解的情况都足够了</p>\n<h2 id=\"k-th-closest-distance\">1008. K-th Closest Distance</h2>\n<p>solved at 03:55(+16)</p>\n<p>有一个数组<span\nclass=\"math inline\">\\(A\\)</span>，每次给定一个区间和两个值<span\nclass=\"math inline\">\\(p, k\\)</span>，询问区间内和<span\nclass=\"math inline\">\\(p\\)</span>的差值的绝对值第<span\nclass=\"math inline\">\\(k\\)</span>小的那个差值，强制在线</p>\n<p>主席树，赛中一直T,12000ms过得，赛后一交4800ms...</p>\n<h2 id=\"minimal-power-of-prime\">1009. Minimal Power of Prime</h2>\n<p>solved at 01:31</p>\n<p><span\nclass=\"math inline\">\\(T(T&lt;=50000)\\)</span>组样例，每次询问一个数<span\nclass=\"math inline\">\\(n(1&lt;n&lt;=1e18)\\)</span>，求<span\nclass=\"math inline\">\\(n\\)</span>的所有质因子的最低幂次</p>\n<p>先除掉小于等于<span\nclass=\"math inline\">\\(n^{0.2}\\)</span>的所有质因子，然后最多只剩四个因子，直接判断是不是四次方数，三次方数，二次方数即可</p>\n","categories":["算法"],"tags":["杭电多校"]},{"title":"2019杭电多校第三场","url":"/posts/a64e7f6a.html","content":"<h2 id=\"blow-up-the-city\">1002. Blow up the city</h2>\n<p>upsloved</p>\n<p>有一个DAG，出度为<span\nclass=\"math inline\">\\(0\\)</span>的点是指挥中心，<span\nclass=\"math inline\">\\(q\\)</span>次询问，每次给出两个点，这两个点存有关键物资，你可以炸掉一个点和它的邻接边，使得这两个点中任意一个点的物资不能到达指挥中心（有一个点不能到达任意一个指挥中心即可），求方案数，询问独立\n<span id=\"more\"></span>\n并不会支配树，比赛的时候想到了这个东西的概念，但是不会实现，赛后学习一波</p>\n<p>把图反过了，建一个额外的起点指向指挥中心，求出支配树，每次询问u,v就只要计算u,v以及它们的LCA的深度就好了</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> LL = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">200010</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Node</span>&#123;</span><span class=\"keyword\">int</span> to,next;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n, m, q, u, v, dfn[N], clo, rev[N], f[N], semi[N], idom[N], deg[N], dep[N], fa[N][<span class=\"number\">18</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Graph</span>&#123;</span></span><br><span class=\"line\">\tNode E[N &lt;&lt; <span class=\"number\">1</span>]; <span class=\"keyword\">int</span> head[N], tot;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\ttot = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; ++i) head[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">link</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span></span>&#123;</span><br><span class=\"line\">\t\tE[tot] = (Node)&#123;v, head[u]&#125;; head[u] = tot++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;pre, nxt, dom;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uset</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> fa[N], Mi[N];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t\tfa[i] = Mi[i] = semi[i] = i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(fa[x] == x) <span class=\"keyword\">return</span> x;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> fx = fa[x], y = <span class=\"built_in\">find</span>(fa[x]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(dfn[semi[Mi[fx]]] &lt; dfn[semi[Mi[x]]]) Mi[x] = Mi[fx];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> fa[x] = y;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;uset;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">tarjan</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\tdfn[x] = ++clo; rev[clo] = x;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e = nxt.head[x]; ~e; e = nxt.E[e].next)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!dfn[nxt.E[e].to])</span><br><span class=\"line\">\t\t\tf[nxt.E[e].to] = x, <span class=\"built_in\">tarjan</span>(nxt.E[e].to);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> pre, <span class=\"keyword\">int</span> depth)</span> </span>&#123;</span><br><span class=\"line\">\tdep[x] = depth;</span><br><span class=\"line\">\tfa[x][<span class=\"number\">0</span>] = pre;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">18</span>; ++i)</span><br><span class=\"line\">\t\tfa[x][i] = fa[fa[x][i - <span class=\"number\">1</span>]][i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e = dom.head[x]; ~e; e = dom.E[e].next)</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs</span>(dom.E[e].to, x, depth + <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">int</span> <span class=\"title\">LCA</span><span class=\"params\">(<span class=\"keyword\">int</span> u, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(dep[u] &lt; dep[v]) <span class=\"built_in\">swap</span>(u, v);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">17</span>; ~i; --i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(dep[fa[u][i]] &gt;= dep[v])</span><br><span class=\"line\">\t\t\tu = fa[u][i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(u == v) <span class=\"keyword\">return</span> u;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">17</span>; ~i; --i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(fa[u][i] != fa[v][i])</span><br><span class=\"line\">\t\t\tu = fa[u][i], v = fa[v][i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> fa[u][<span class=\"number\">0</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">calc</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n; i &gt;= <span class=\"number\">2</span>; --i)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> y = rev[i], tmp = n;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e = pre.head[y]; ~e; e = pre.E[e].next)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = pre.E[e].to; <span class=\"keyword\">if</span>(!dfn[x]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(dfn[x] &lt; dfn[y]) tmp = <span class=\"built_in\">min</span>(tmp, dfn[x]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> uset.<span class=\"built_in\">find</span>(x), tmp = <span class=\"built_in\">min</span>(tmp, dfn[semi[uset.Mi[x]]]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tsemi[y] = rev[tmp]; uset.fa[y] = f[y];</span><br><span class=\"line\">\t\tdom.<span class=\"built_in\">link</span>(semi[y], y);</span><br><span class=\"line\">\t\ty = rev[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> e = dom.head[y]; ~e; e = dom.E[e].next)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = dom.E[e].to; uset.<span class=\"built_in\">find</span>(x);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(semi[uset.Mi[x]] == y) idom[x] = y;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> idom[x] = uset.Mi[x];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = rev[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(idom[x] != semi[x])</span><br><span class=\"line\">\t\t\tidom[x] = idom[idom[x]];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tdom.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i)</span><br><span class=\"line\">\t\tdom.<span class=\"built_in\">link</span>(idom[i], i);</span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(n, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t\tclo = <span class=\"number\">0</span>; n++; dep[<span class=\"number\">0</span>] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t\tdeg[i] = dfn[i] = rev[i] = semi[i] = idom[i] = f[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tpre.<span class=\"built_in\">clear</span>(); nxt.<span class=\"built_in\">clear</span>(); dom.<span class=\"built_in\">clear</span>(); uset.<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class=\"line\">\t\t\tpre.<span class=\"built_in\">link</span>(u, v);</span><br><span class=\"line\">\t\t\tnxt.<span class=\"built_in\">link</span>(v, u);</span><br><span class=\"line\">\t\t\tdeg[u]++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(deg[i] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\tnxt.<span class=\"built_in\">link</span>(n, i);</span><br><span class=\"line\">\t\t\t\tpre.<span class=\"built_in\">link</span>(i, n);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">tarjan</span>(n);</span><br><span class=\"line\">\t\t<span class=\"built_in\">calc</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;q);</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;u, &amp;v);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, dep[u] + dep[v] - dep[<span class=\"built_in\">LCA</span>(u, v)]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"distribution-of-books\">1004. Distribution of books</h2>\n<p>upsloved</p>\n<p>有一个长为<span class=\"math inline\">\\(n\\)</span>的数列<span\nclass=\"math inline\">\\(A\\)</span>, 你需要将找<span\nclass=\"math inline\">\\(k\\)</span>个飞空不相交区间，这些区间并起来是<span\nclass=\"math inline\">\\(A\\)</span>的一个前缀区间，使得这<span\nclass=\"math inline\">\\(k\\)</span>个区间每个区间的和的最大值最小</p>\n<p>二分答案，线段树优化dp套路，代码不放了</p>\n<h2 id=\"fansblog\">1006. Fansblog</h2>\n<p>solved at 00:54</p>\n<p>队友做的，素数分布，威尔逊定理，int128</p>\n<h2 id=\"find-the-answer\">1007. Find the answer</h2>\n<p>solved at 01:24(+3)</p>\n<p>离散化之后线段树维护区间和以及区间数的个数</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> val, id;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> node &amp;rhs) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> val &lt; rhs.val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;a[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> rnk[N], T, n, ans[N], m, sum, mn, b[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> tree[N &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt[N &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">\ttree[rt] = tree[rt &lt;&lt; <span class=\"number\">1</span>] + tree[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>];</span><br><span class=\"line\">\tcnt[rt] = cnt[rt &lt;&lt; <span class=\"number\">1</span>] + cnt[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\ttree[rt] = <span class=\"number\">0</span>; cnt[rt] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) &#123;tree[rt] += val, cnt[rt]++; <span class=\"keyword\">return</span>;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pos &lt;= mid) <span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, pos, val);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, pos, val);</span><br><span class=\"line\">\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> tree[rt] &lt;= val ? cnt[rt] : <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(tree[rt &lt;&lt; <span class=\"number\">1</span>] &lt;= val) <span class=\"keyword\">return</span> cnt[rt &lt;&lt; <span class=\"number\">1</span>] + <span class=\"built_in\">query</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, val - tree[rt &lt;&lt; <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, val); </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\tsum = ans[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">read</span>(n); <span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">read</span>(a[i].val);</span><br><span class=\"line\">\t\t\tb[i] = a[i].val;</span><br><span class=\"line\">\t\t\ta[i].id = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">sort</span>(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t\trnk[a[i].id] = i;</span><br><span class=\"line\">\t\t<span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\tans[i] = i - <span class=\"number\">1</span> - <span class=\"built_in\">query</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, m - b[i]);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, rnk[i], b[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d &quot;</span>, ans[i]);</span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"k-subsequence\">1009. K subsequence</h2>\n<p>solved at 04:42(+14)</p>\n<p>有一个长为<span\nclass=\"math inline\">\\(n\\)</span>的数列，你需要找出<span\nclass=\"math inline\">\\(k\\)</span>个不相交的非降子序列使得选出的数和最大<span\nclass=\"math inline\">\\(1&lt;=n&lt;=2000, 1&lt;=k&lt;=10\\)</span></p>\n<p>最小费用最大流经典题，拆点建图，每个点<span\nclass=\"math inline\">\\(i\\)</span>拆成<span\nclass=\"math inline\">\\(i_1\\)</span>和<span\nclass=\"math inline\">\\(i_2\\)</span>，<span\nclass=\"math inline\">\\(i_1\\)</span>向<span\nclass=\"math inline\">\\(i_2\\)</span>建容量为<span\nclass=\"math inline\">\\(1\\)</span>，费用为<span\nclass=\"math inline\">\\(-a_i\\)</span>的边，<span\nclass=\"math inline\">\\(s\\)</span>向<span\nclass=\"math inline\">\\(i_1\\)</span>建容量为<span\nclass=\"math inline\">\\(1\\)</span>，费用为<span\nclass=\"math inline\">\\(0\\)</span>的边，<span\nclass=\"math inline\">\\(i_2\\)</span>向<span\nclass=\"math inline\">\\(t\\)</span>建容量为<span\nclass=\"math inline\">\\(1\\)</span>，费用为<span\nclass=\"math inline\">\\(0\\)</span>的边，如果<span\nclass=\"math inline\">\\(a[i]&lt;=a[j]\\)</span>且<span\nclass=\"math inline\">\\(i&lt;j\\)</span>，<span\nclass=\"math inline\">\\(i_2\\)</span>向<span\nclass=\"math inline\">\\(j_1\\)</span>建容量为<span\nclass=\"math inline\">\\(1\\)</span>,费用为<span\nclass=\"math inline\">\\(0\\)</span>的边，最后<span\nclass=\"math inline\">\\(ss\\)</span>向<span\nclass=\"math inline\">\\(s\\)</span>建容量为<span\nclass=\"math inline\">\\(k\\)</span>，费用为<span\nclass=\"math inline\">\\(0\\)</span>的边，<span\nclass=\"math inline\">\\(ss\\)</span>向<span\nclass=\"math inline\">\\(t\\)</span>跑<span\nclass=\"math inline\">\\(MCMF\\)</span>，最小费用取相反数就是答案</p>\n<h2 id=\"squrirrel\">1011. Squrirrel</h2>\n<p>树型dp,待补</p>\n","categories":["算法"],"tags":["杭电多校"]},{"title":"2019牛客多校第四场","url":"/posts/9d5c3a56.html","content":"<p>目前为止打得最爽的一场多校</p>\n<h2 id=\"a.-meeting\">A. meeting</h2>\n<p>solved at 00:58(+1)</p>\n<p>树上有<span\nclass=\"math inline\">\\(k\\)</span>个关键点，让你选择一个树上的点，使得这些关键点到这个点的最大距离最小\n<span id=\"more\"></span>\n类似树的直径的做法，找到最远的两个关键点的距离除以二向上取整就好了</p>\n<h2 id=\"b.-xor\">B. xor</h2>\n<p>upsolved</p>\n<p>你有<span\nclass=\"math inline\">\\(n\\)</span>个集合，每个集合有若干个数</p>\n<p>若一个集合的任意一个子集异或和为<span\nclass=\"math inline\">\\(x\\)</span>，称这个集合可以表示<span\nclass=\"math inline\">\\(x\\)</span></p>\n<p>给出<span class=\"math inline\">\\(m\\)</span>个询问，每次询问<span\nclass=\"math inline\">\\(l\\)</span>到<span\nclass=\"math inline\">\\(r\\)</span>的这些集合是否都能表示出<span\nclass=\"math inline\">\\(x\\)</span></p>\n<p><span class=\"math inline\">\\(1&lt;=n,m&lt;=5e4\\)</span></p>\n<p>目前六场多校，考了三次线性基。。。</p>\n<p>这次是线性基求交，用线段树维护</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">5e4</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Base</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">unsigned</span> a[<span class=\"number\">32</span>];</span><br><span class=\"line\">    <span class=\"built_in\">Base</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(a));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">insert</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">31</span>; ~i; --i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x &gt;&gt; i &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!a[i]) &#123;</span><br><span class=\"line\">                    a[i] = x;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    x ^= a[i];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">unsigned</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">31</span>; ~i; --i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(x &gt;&gt; i &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                x ^= a[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> x == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;seg[N &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Base <span class=\"title\">intersect</span><span class=\"params\">(<span class=\"keyword\">const</span> Base &amp;a, <span class=\"keyword\">const</span> Base &amp;b)</span> </span>&#123;</span><br><span class=\"line\">    Base all = a, c, d;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">31</span>; ~i; --i) d.a[i] = <span class=\"number\">1LL</span> &lt;&lt; i;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">31</span>; ~i; --i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b.a[i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">unsigned</span> v = b.a[i], k = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">bool</span> can = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">31</span>; ~j; --j) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(v &gt;&gt; j &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(all.a[j]) &#123;</span><br><span class=\"line\">                        v ^= all.a[j];</span><br><span class=\"line\">                        k ^= d.a[j];</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        can = <span class=\"literal\">false</span>;</span><br><span class=\"line\">                        all.a[j] = v;</span><br><span class=\"line\">                        d.a[j] = k;</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(can) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">unsigned</span> v = <span class=\"number\">0</span>;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">31</span>; ~j; --j) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(k &gt;&gt; j &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">                        v ^= a.a[j];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                c.<span class=\"built_in\">insert</span>(v);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, sz, l, r;</span><br><span class=\"line\"><span class=\"keyword\">unsigned</span> x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">    seg[rt] = <span class=\"built_in\">intersect</span>(seg[rt &lt;&lt; <span class=\"number\">1</span>], seg[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;sz);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(sz--) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%u&quot;</span>, &amp;x);</span><br><span class=\"line\">            seg[rt].<span class=\"built_in\">insert</span>(x);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    <span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">unsigned</span> val)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class=\"keyword\">return</span> seg[rt].<span class=\"built_in\">query</span>(val);</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L &lt;= mid) <span class=\"keyword\">if</span>(!<span class=\"built_in\">query</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, L, R, val)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(R &gt; mid) <span class=\"keyword\">if</span>(!<span class=\"built_in\">query</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, L, R, val)) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">    <span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%u&quot;</span>, &amp;l, &amp;r, &amp;x);</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"built_in\">query</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, l, r, x) ? <span class=\"string\">&quot;YES&quot;</span> : <span class=\"string\">&quot;NO&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"c.-sequence\">C. sequence</h2>\n<p>solved at 03:25</p>\n<p>给你两个长为<span class=\"math inline\">\\(n\\)</span>的数列<span\nclass=\"math inline\">\\(a, b\\)</span>。 <span class=\"math inline\">\\(1 \\le\nn \\le 3e6\\)</span></p>\n<p>求<span class=\"math display\">\\[\\max\\limits_{1\\le l\\le r\\le\nn}\\{min(a_{l\\cdots r})*sum(b_{l\\cdots r})\\}\\]</span></p>\n<p>对于每一个<span\nclass=\"math inline\">\\(i\\)</span>，我们可以用单调栈求出它作为最小值的最左端点和最右端点，若<span\nclass=\"math inline\">\\(a[i]&gt;0\\)</span>，就查找<span\nclass=\"math inline\">\\(i\\cdots r[i]\\)</span>这些位置中<span\nclass=\"math inline\">\\(b\\)</span>数列前缀和最大的位置</p>\n<p>，左边求后缀和，加一起就是<span class=\"math inline\">\\(l[i]\\cdots\nr[i]\\)</span>包含位置<span\nclass=\"math inline\">\\(i\\)</span>的最大子段和</p>\n<p>如果<span class=\"math inline\">\\(a[i]&lt;=0\\)</span>就求最小值</p>\n<p>可以用线段树实现，总复杂度<span\nclass=\"math inline\">\\(O(nlogn)\\)</span></p>\n<p>题解的线性做法是笛卡尔树，并不会。。。</p>\n<p>队友做的，代码不放了</p>\n<h2 id=\"d.-triples-i\">D. triples I</h2>\n<p>solved at 01:17(+1)</p>\n<p>输入一个数<span\nclass=\"math inline\">\\(a\\)</span>，输出最少的数，让这些数的或值是<span\nclass=\"math inline\">\\(a\\)</span>，要求输出的数均为<span\nclass=\"math inline\">\\(3\\)</span>的倍数，输入保证有解</p>\n<p>队友做的，输出的数数量一定小于等于<span\nclass=\"math inline\">\\(2\\)</span>，按照<span\nclass=\"math inline\">\\(a\\)</span>的二进制位分类讨论</p>\n<h2 id=\"i.-string\">I. string</h2>\n<p>solved at 02:20(+2)</p>\n<p>定义两个字符串<span\nclass=\"math inline\">\\(A,B\\)</span>等价当且仅当<span\nclass=\"math inline\">\\(A=B\\)</span>或<span\nclass=\"math inline\">\\(A=rev(B)\\)</span></p>\n<p>给定一个字符串<span class=\"math inline\">\\(S\\)</span>,求最大的<span\nclass=\"math inline\">\\(S\\)</span>的子串的集合，满足集合中没有两个元素等价</p>\n<p>我的做法是先求<span\nclass=\"math inline\">\\(S\\)</span>本质不同的子串数量，然后减去一些本质不同的但是等价的子串</p>\n<p>用反串去匹配原串，看能有多少匹配到，注意到如果<span\nclass=\"math inline\">\\(rev(S)\\)</span>的子串<span\nclass=\"math inline\">\\(A\\)</span>能在<span\nclass=\"math inline\">\\(S\\)</span>中匹配到，那么<span\nclass=\"math inline\">\\(rev(A)\\)</span>也一定能匹配到，匹配到的数量减去本质不同的回文子串数量除以二就是应该减掉的值</p>\n<p>求本质不同的字符串以及后面的匹配用<span\nclass=\"math inline\">\\(SAM\\)</span>实现，统计本质不同的回文子串用<span\nclass=\"math inline\">\\(PAM\\)</span></p>\n<p>题解的做法是把每个串和它的<span\nclass=\"math inline\">\\(rev\\)</span>都算一遍，即统计<span\nclass=\"math inline\">\\(S\\)</span>和<span\nclass=\"math inline\">\\(rev(S)\\)</span>共同的本质不同子串数量，再加上本质不同的回文子串数量（因为回文串只被算了一遍），除以二就是答案，统计子串可以用广义后缀自动机或者后缀数组实现，实现起来比我的做法更加简单</p>\n<p>我的做法代码：</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">PAM</span> &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> fail, cnt, len;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> nxt[<span class=\"number\">26</span>];</span><br><span class=\"line\">&#125;st[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans, cnt_minus;</span><br><span class=\"line\"><span class=\"keyword\">char</span> s[N], rs[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, now, sz, cnt_rev;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pam_init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(st, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(st));</span><br><span class=\"line\">    st[<span class=\"number\">0</span>].fail = st[<span class=\"number\">1</span>].fail = <span class=\"number\">1</span>;</span><br><span class=\"line\">    st[<span class=\"number\">1</span>].len = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    sz = <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">extend</span><span class=\"params\">(<span class=\"keyword\">int</span> c,<span class=\"keyword\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = now;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (s[pos - st[p].len - <span class=\"number\">1</span>] != s[pos]) p = st[p].fail;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!st[p].nxt[c]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> np = ++sz, q = st[p].fail;</span><br><span class=\"line\">        st[np].len = st[p].len + <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(s[pos - st[q].len - <span class=\"number\">1</span>] != s[pos]) q = st[q].fail;</span><br><span class=\"line\">        st[np].fail = st[q].nxt[c];</span><br><span class=\"line\">        st[p].nxt[c] = np;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    now = st[p].nxt[c];</span><br><span class=\"line\">    st[now].cnt++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">namespace</span> SAM &#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> len[N &lt;&lt; <span class=\"number\">1</span>], nxt[N &lt;&lt; <span class=\"number\">1</span>][<span class=\"number\">26</span>], par[N &lt;&lt; <span class=\"number\">1</span>], match[N &lt;&lt; <span class=\"number\">1</span>], c[N], pos[N &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sz, last;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">new_node</span><span class=\"params\">(<span class=\"keyword\">int</span> l)</span> </span>&#123;</span><br><span class=\"line\">        len[sz] = l;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(nxt[sz], <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(nxt[sz]));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sz++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        sz = last = <span class=\"number\">0</span>;</span><br><span class=\"line\">        par[sz] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"built_in\">new_node</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> c)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = last, np = <span class=\"built_in\">new_node</span>(len[last] + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(; ~p &amp;&amp; !nxt[p][c]; p = par[p]) nxt[p][c] = np;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"number\">-1</span> == p) par[np] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> q = nxt[p][c];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(len[q] == len[p] + <span class=\"number\">1</span>) par[np] = q;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> nq = <span class=\"built_in\">new_node</span>(len[p] + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"built_in\">memcpy</span>(nxt[nq], nxt[q], <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(nxt[nq]));</span><br><span class=\"line\">                par[nq] = par[q];</span><br><span class=\"line\">                par[q] = par[np] = nq;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(; ~p &amp;&amp; nxt[p][c] == q; p = par[p])</span><br><span class=\"line\">                    nxt[p][c] = nq;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        last = np;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">topo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; ++i) c[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; sz; ++i) c[len[i]]++;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) c[i] += c[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = sz - <span class=\"number\">1</span>; ~i; --i) pos[--c[len[i]]] = i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">calc</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = sz - <span class=\"number\">1</span>; ~i; --i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> j = pos[i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(j == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(~par[j])</span><br><span class=\"line\">                match[par[j]] = <span class=\"built_in\">max</span>(match[par[j]], match[j]);</span><br><span class=\"line\">            res += <span class=\"built_in\">max</span>(<span class=\"number\">0</span>, <span class=\"built_in\">min</span>(len[j], match[j]) - len[par[j]]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>,s);</span><br><span class=\"line\">    <span class=\"built_in\">pam_init</span>();</span><br><span class=\"line\">    n = <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">        <span class=\"built_in\">extend</span>(s[i] - <span class=\"string\">&#x27;a&#x27;</span>, i);</span><br><span class=\"line\">    cnt_rev = sz - <span class=\"number\">1</span>;</span><br><span class=\"line\">    SAM::<span class=\"built_in\">init</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">        SAM::<span class=\"built_in\">add</span>(s[i] - <span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; SAM::sz; ++i) &#123;</span><br><span class=\"line\">        ans += SAM::len[i] - SAM::len[SAM::par[i]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        rs[i] = s[n - i - <span class=\"number\">1</span>];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    rs[n] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> p = <span class=\"number\">0</span>, l = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> x = rs[i] - <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(~p &amp;&amp; !SAM::nxt[p][x])</span><br><span class=\"line\">            p = SAM::par[p], l = SAM::len[p];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(p == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            p = l = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        p = SAM::nxt[p][x], l++;</span><br><span class=\"line\">        SAM::match[p] = <span class=\"built_in\">max</span>(SAM::match[p], l);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    SAM::<span class=\"built_in\">topo</span>();</span><br><span class=\"line\">    cnt_minus = SAM::<span class=\"built_in\">calc</span>();</span><br><span class=\"line\">    cnt_minus = (cnt_minus - cnt_rev) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans - cnt_minus);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"j.-free\">J. free</h2>\n<p>solved at 00:43</p>\n<p>一个无向图，经过一条边需要支付一个代价，你可以让最多<span\nclass=\"math inline\">\\(k\\)</span>条边的代价变为<span\nclass=\"math inline\">\\(0\\)</span>，求从起点到终点的最小代价<span\nclass=\"math inline\">\\((1\\le n,m\\le1e3, 0\\le k\\le m)\\)</span></p>\n<p>签到题，队友做的，拆点跑最短路</p>\n<h2 id=\"k.-number\">K. number</h2>\n<p>solved at 00:13</p>\n<p>问一个数字字符串有多少子串是<span\nclass=\"math inline\">\\(300\\)</span>的倍数</p>\n<p>签到题，线性扫一下统计前缀和计算答案就好了</p>\n","categories":["算法"],"tags":["牛客多校"]},{"title":"2019牛客多校第三场","url":"/posts/2a712333.html","content":"<h2 id=\"a.-graph-games\">A. Graph Games</h2>\n<p>upsolved</p>\n<p><span class=\"math inline\">\\(n\\)</span>个点，<span\nclass=\"math inline\">\\(m\\)</span>条边的图<span\nclass=\"math inline\">\\((1&lt;=n&lt;=1e5,1&lt;=m,q&lt;=2e5)\\)</span>，<span\nclass=\"math inline\">\\(q\\)</span>次操作，操作有两种，一种是翻转区间内边的状态，第二种是询问两个点的邻接点集是否一致\n<span id=\"more\"></span> 直接判断点集肯定<span\nclass=\"math inline\">\\(T\\)</span>飞了，给每个点随机一个权值，点集的权值就是全部异或起来，冲突概率很小</p>\n<p>对线段分块，复杂度可以达到<span class=\"math inline\">\\(O(q\\sqrt\nm)\\)</span>（代码里快读删了）</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>, M = <span class=\"number\">2e5</span> + <span class=\"number\">10</span>, sz = <span class=\"number\">510</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> val[N], s[N], sum[sz][N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> l[sz], r[sz], belong[M];</span><br><span class=\"line\"><span class=\"keyword\">int</span> u[M], v[M], lazy[sz];</span><br><span class=\"line\"><span class=\"keyword\">int</span> T, n, m, q, op, blk, num, x, y;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    blk = <span class=\"built_in\">sqrt</span>(m);</span><br><span class=\"line\">    num = <span class=\"number\">1</span> + (m - <span class=\"number\">1</span>) / blk;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= num; ++i) &#123;</span><br><span class=\"line\">        l[i] = (i - <span class=\"number\">1</span>) * blk + <span class=\"number\">1</span>;</span><br><span class=\"line\">        r[i] = i * blk;</span><br><span class=\"line\">        lazy[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j)</span><br><span class=\"line\">            sum[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    r[num] = m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i)</span><br><span class=\"line\">        belong[i] = (i - <span class=\"number\">1</span>) / blk + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">        s[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(belong[l] == belong[r]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = l; i &lt;= r; ++i) &#123;</span><br><span class=\"line\">            s[u[i]] ^= val[v[i]];</span><br><span class=\"line\">            s[v[i]] ^= val[u[i]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = l; belong[i] == belong[l]; ++i) &#123;</span><br><span class=\"line\">        s[u[i]] ^= val[v[i]];</span><br><span class=\"line\">        s[v[i]] ^= val[u[i]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = r; belong[i] == belong[r]; --i) &#123;</span><br><span class=\"line\">        s[u[i]] ^= val[v[i]];</span><br><span class=\"line\">        s[v[i]] ^= val[u[i]];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = belong[l] + <span class=\"number\">1</span>; i &lt; belong[r]; ++i)</span><br><span class=\"line\">        lazy[i] ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">srand</span>(<span class=\"built_in\">time</span>(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100000</span>; ++i) val[i] = <span class=\"number\">1</span> + <span class=\"built_in\">rand</span>();</span><br><span class=\"line\">    <span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(n); <span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">        <span class=\"built_in\">build</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(u[i]); <span class=\"built_in\">read</span>(v[i]);</span><br><span class=\"line\">            s[u[i]] ^= val[v[i]];</span><br><span class=\"line\">            s[v[i]] ^= val[u[i]];</span><br><span class=\"line\">            sum[belong[i]][u[i]] ^= val[v[i]];</span><br><span class=\"line\">            sum[belong[i]][v[i]] ^= val[u[i]];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">read</span>(q);</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">read</span>(op); <span class=\"built_in\">read</span>(x); <span class=\"built_in\">read</span>(y);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>)</span><br><span class=\"line\">                <span class=\"built_in\">update</span>(x, y);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a = s[x], b = s[y];</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= num; ++i) <span class=\"keyword\">if</span>(lazy[i]) &#123;</span><br><span class=\"line\">                    a ^= sum[i][x];</span><br><span class=\"line\">                    b ^= sum[i][y];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d&quot;</span>, (<span class=\"keyword\">int</span>)(a == b));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"b.-crazy-binary-string\">B. Crazy Binary String</h2>\n<p>solved at 00:16</p>\n<p>签到</p>\n<h2 id=\"d.-big-integer\">D. Big Integer</h2>\n<p>upsolved 队友做的</p>\n<h2 id=\"f.-planting-trees\">F. Planting Trees</h2>\n<p>upsolved</p>\n<p><span class=\"math inline\">\\(O(n^3)\\)</span>单调队列，我是傻逼</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">505</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> d[N][N], n, m, T, ans, mx[N], mn[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> minn[N], maxx[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> h_mn, t_mn, h_mx, t_mx;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\tans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j) </span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;d[i][j]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> up = <span class=\"number\">1</span>; up &lt;= n; ++up) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memset</span>(mx, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(mx));</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memset</span>(mn, <span class=\"number\">0x3f</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(mn));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> down = up; down &lt;= n; ++down) &#123;</span><br><span class=\"line\">\t\t\t\th_mn = t_mn = h_mx = t_mx = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">1</span>, left = <span class=\"number\">0</span>; k &lt;= n; ++k) &#123;</span><br><span class=\"line\">\t\t\t\t\tmx[k] = <span class=\"built_in\">max</span>(mx[k], d[down][k]);</span><br><span class=\"line\">\t\t\t\t\tmn[k] = <span class=\"built_in\">min</span>(mn[k], d[down][k]);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(; h_mn != t_mn &amp;&amp; mn[minn[t_mn - <span class=\"number\">1</span>]] &gt; mn[k]; ) t_mn--;</span><br><span class=\"line\">\t\t\t\t\tminn[t_mn++] = k;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(; h_mx != t_mx &amp;&amp; mx[maxx[t_mx - <span class=\"number\">1</span>]] &lt; mx[k]; ) t_mx--;</span><br><span class=\"line\">\t\t\t\t\tmaxx[t_mx++] = k;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(; h_mn != t_mn &amp;&amp; h_mx != t_mx &amp;&amp; mx[maxx[h_mx]] - mn[minn[h_mn]] &gt; m;) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(maxx[h_mx] &lt; minn[h_mn])</span><br><span class=\"line\">\t\t\t\t\t\t\tleft = maxx[h_mx++];</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t\t\t\tleft = minn[h_mn++];</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tans = <span class=\"built_in\">max</span>(ans, (down - up + <span class=\"number\">1</span>) * (k - left));</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"g.-removing-stones\">G. Removing stones</h2>\n<p>upsolved</p>\n<p>等价于询问有多少个区间的区间最大值小于等于区间和</p>\n<p>题解说是找最大值然后枚举左右两边较短的那一边的端点然后二分查另一边的端点再分治，看了别人写了个暴力枚举不合法区间的然后跑的贼快，复杂度不太会算</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">3e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N], T, n;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\tans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) </span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> l = i, r = i;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(l &gt; <span class=\"number\">1</span> &amp;&amp; sum + a[l - <span class=\"number\">1</span>] &lt; a[i]) l--, sum += a[l];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(r &lt; n &amp;&amp; sum + a[r + <span class=\"number\">1</span>] &lt; a[i]) r++, sum += a[r];</span><br><span class=\"line\">\t\t\tans += r - i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = l; j &lt; i; ++j) &#123;</span><br><span class=\"line\">\t\t\t\tsum -= a[j];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(r &lt; n &amp;&amp; sum + a[r + <span class=\"number\">1</span>] &lt; a[i]) r++, sum += a[r];</span><br><span class=\"line\">\t\t\t\tans += r - i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t&#125; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, <span class=\"number\">1LL</span> * n * (n + <span class=\"number\">1</span>) / <span class=\"number\">2</span>- ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"h.-magic-line\">H. Magic Line</h2>\n<p>solved at 00:36</p>\n<p>要求用一条直线把平面上的点分成两部分，两部分个数相同且不能有点在线上</p>\n<p>注意到点的坐标范围只有<span\nclass=\"math inline\">\\(1000\\)</span>而你最终输出的线的坐标可以到<span\nclass=\"math inline\">\\(1e9\\)</span></p>\n<p>一定可以用一条近似竖直线的线</p>\n<p>把点分开</p>\n<h2 id=\"i.-median\">I. Median</h2>\n<p>upsolved</p>\n<p>给定原序列的中位数序列(长度为<span\nclass=\"math inline\">\\(n-2\\)</span>)，构造一个原序列</p>\n<h2 id=\"j.-lru-management\">J. LRU management</h2>\n<p>solved at 04:59(+22)</p>\n<p>队友做的，他手写了一个链表。。。</p>\n<p>用几个map维护就好了，利用map的迭代器可以自增或是自减的性质就好了</p>\n<p>那个string可以看成一个11进制数（区分前置零）</p>\n<p>我在贴上来的时候把快读删掉了，就是read那个函数的实现，用的是fread</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">5e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> T, q, m, op, v;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ss;</span><br><span class=\"line\"><span class=\"keyword\">char</span> s[<span class=\"number\">12</span>];</span><br><span class=\"line\">map&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt; ptos;</span><br><span class=\"line\">map&lt;<span class=\"keyword\">long</span> <span class=\"keyword\">long</span>, <span class=\"keyword\">int</span>&gt; stop, stov;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">convert</span><span class=\"params\">(<span class=\"keyword\">char</span> s[])</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; s[i]; ++i) &#123;</span><br><span class=\"line\">\t\tval = val * <span class=\"number\">11</span> + s[i] - <span class=\"string\">&#x27;0&#x27;</span> + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">read</span>(T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\tptos.<span class=\"built_in\">clear</span>(); stop.<span class=\"built_in\">clear</span>(); stov.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">read</span>(q); <span class=\"built_in\">read</span>(m);</span><br><span class=\"line\">\t\tptos[<span class=\"number\">100000</span>] = <span class=\"number\">1e18</span>;</span><br><span class=\"line\">\t\tstop[<span class=\"number\">1000000000000000000LL</span>] = <span class=\"number\">100000</span>;</span><br><span class=\"line\">\t\tstov[<span class=\"number\">1000000000000000000LL</span>] = <span class=\"number\">100</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">read</span>(op); <span class=\"built_in\">read</span>(s); <span class=\"built_in\">read</span>(v);</span><br><span class=\"line\">\t\t\tss = <span class=\"built_in\">convert</span>(s);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(op == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(stov.<span class=\"built_in\">count</span>(ss)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, stov[ss]);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> fi = ptos.<span class=\"built_in\">begin</span>()-&gt;first;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> pos = stop[ss];</span><br><span class=\"line\">\t\t\t\t\tptos.<span class=\"built_in\">erase</span>(ptos.<span class=\"built_in\">find</span>(pos));</span><br><span class=\"line\">\t\t\t\t\tstop[ss] = fi - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\tptos[fi - <span class=\"number\">1</span>] = ss;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tstov[ss] = v;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> fi = ptos.<span class=\"built_in\">begin</span>()-&gt;first;</span><br><span class=\"line\">\t\t\t\t\tstop[ss] = fi - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\tptos[fi - <span class=\"number\">1</span>] = ss;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(ptos.<span class=\"built_in\">size</span>() &gt; m) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> es = ptos.<span class=\"built_in\">rbegin</span>()-&gt;second;</span><br><span class=\"line\">\t\t\t\t\t\tptos.<span class=\"built_in\">erase</span>(--ptos.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t\t\t\t\t\tstop.<span class=\"built_in\">erase</span>(stop.<span class=\"built_in\">find</span>(es));</span><br><span class=\"line\">\t\t\t\t\t\tstov.<span class=\"built_in\">erase</span>(stov.<span class=\"built_in\">find</span>(es));</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, v);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(!stov.<span class=\"built_in\">count</span>(ss)) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Invalid&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> pos = stop[ss];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(v == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, stov[ss]);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tmap&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>&gt;::iterator it = ptos.<span class=\"built_in\">find</span>(pos);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(v == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(it == ptos.<span class=\"built_in\">begin</span>()) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Invalid&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\tit--;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(stov[it-&gt;second] == <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Invalid&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, stov[it-&gt;second]);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(++it == ptos.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Invalid&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">if</span>(stov[it-&gt;second] == <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Invalid&quot;</span>);</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, stov[it-&gt;second]);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>用map维护string(实际上是数)到list&lt;int&gt;::iterator的映射似乎写起来更简单</p>\n","categories":["算法"],"tags":["牛客多校"]},{"title":"2019杭电多校第二场","url":"/posts/eb50dc38.html","content":"<p>太菜了，被学弟暴打</p>\n<h2 id=\"beauty-of-unimodal-sequence\">1002. Beauty of Unimodal\nSequence</h2>\n<p>upsolved</p>\n<p>要求输出字典序最小和最大的最长单峰子序列 <span id=\"more\"></span>\n对于每一个位置，维护以这个位置结尾的前缀/后缀最长上升/单峰子序列长度，然后贪心输出（如果只要求长度正反求LIS就好了)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">3e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, a[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Seg_Tree</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mx[N &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"keyword\">int</span> rt = <span class=\"number\">1</span>, <span class=\"keyword\">int</span> l = <span class=\"number\">1</span>, <span class=\"keyword\">int</span> r = n + <span class=\"number\">2</span>)</span> </span>&#123;</span><br><span class=\"line\">\t\tmx[rt] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">init</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">\t\t<span class=\"built_in\">init</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">\t\tmx[rt] = <span class=\"built_in\">max</span>(mx[rt &lt;&lt; <span class=\"number\">1</span>], mx[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">\t\t\tmx[rt] = <span class=\"built_in\">max</span>(mx[rt], val);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(pos &lt;= mid)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, pos, val);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, pos, val);</span><br><span class=\"line\">\t\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> mx[rt];</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>, ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(L &lt;= mid)</span><br><span class=\"line\">\t\t\tans = <span class=\"built_in\">max</span>(ans, <span class=\"built_in\">query</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, L, R));</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(R &gt; mid)</span><br><span class=\"line\">\t\t\tans = <span class=\"built_in\">max</span>(ans, <span class=\"built_in\">query</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, L, R));</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;zero, one;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[<span class=\"number\">2</span>][N][<span class=\"number\">2</span>], len;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; ans[<span class=\"number\">2</span>], all, up[N], down[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tlen = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tzero.<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\tone.<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\tall.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\tans[<span class=\"number\">0</span>].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\tans[<span class=\"number\">1</span>].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n + <span class=\"number\">1</span>; ++i)</span><br><span class=\"line\">\t\tup[i].<span class=\"built_in\">clear</span>(), down[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n)) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">\t\t\tall.<span class=\"built_in\">push_back</span>(a[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tall.<span class=\"built_in\">push_back</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tall.<span class=\"built_in\">push_back</span>(<span class=\"number\">0x3f3f3f3f</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">sort</span>(all.<span class=\"built_in\">begin</span>(), all.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t\tall.<span class=\"built_in\">erase</span>(<span class=\"built_in\">unique</span>(all.<span class=\"built_in\">begin</span>(), all.<span class=\"built_in\">end</span>()), all.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\ta[i] = <span class=\"built_in\">lower_bound</span>(all.<span class=\"built_in\">begin</span>(), all.<span class=\"built_in\">end</span>(), a[i]) - all.<span class=\"built_in\">begin</span>() + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\tdp[<span class=\"number\">0</span>][i][<span class=\"number\">0</span>] = zero.<span class=\"built_in\">query</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n + <span class=\"number\">2</span>, <span class=\"number\">1</span>, a[i] - <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tdp[<span class=\"number\">0</span>][i][<span class=\"number\">1</span>] = <span class=\"built_in\">max</span>(one.<span class=\"built_in\">query</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n + <span class=\"number\">2</span>, a[i] + <span class=\"number\">1</span>, n + <span class=\"number\">2</span>) + <span class=\"number\">1</span>, dp[<span class=\"number\">0</span>][i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t\tzero.<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n + <span class=\"number\">2</span>, a[i], dp[<span class=\"number\">0</span>][i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t\tone.<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n + <span class=\"number\">2</span>, a[i], dp[<span class=\"number\">0</span>][i][<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tzero.<span class=\"built_in\">init</span>(); one.<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n; i; --i) &#123;</span><br><span class=\"line\">\t\t\tdp[<span class=\"number\">1</span>][i][<span class=\"number\">0</span>] = zero.<span class=\"built_in\">query</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n + <span class=\"number\">2</span>, <span class=\"number\">1</span>, a[i] - <span class=\"number\">1</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tdp[<span class=\"number\">1</span>][i][<span class=\"number\">1</span>] = <span class=\"built_in\">max</span>(one.<span class=\"built_in\">query</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n + <span class=\"number\">2</span>, a[i] + <span class=\"number\">1</span>, n + <span class=\"number\">2</span>) + <span class=\"number\">1</span>, dp[<span class=\"number\">1</span>][i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t\tzero.<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n + <span class=\"number\">2</span>, a[i], dp[<span class=\"number\">1</span>][i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t\tone.<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n + <span class=\"number\">2</span>, a[i], dp[<span class=\"number\">1</span>][i][<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\tlen = <span class=\"built_in\">max</span>(len, dp[<span class=\"number\">0</span>][i][<span class=\"number\">0</span>] + dp[<span class=\"number\">1</span>][i][<span class=\"number\">1</span>] - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">assert</span>(len &gt;= dp[<span class=\"number\">0</span>][i][<span class=\"number\">1</span>] + dp[<span class=\"number\">1</span>][i][<span class=\"number\">0</span>] - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(dp[<span class=\"number\">0</span>][i][<span class=\"number\">0</span>] + dp[<span class=\"number\">1</span>][i][<span class=\"number\">1</span>] - <span class=\"number\">1</span> == len) &#123;</span><br><span class=\"line\">\t\t\t\tup[dp[<span class=\"number\">0</span>][i][<span class=\"number\">0</span>]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(dp[<span class=\"number\">0</span>][i][<span class=\"number\">1</span>] + dp[<span class=\"number\">1</span>][i][<span class=\"number\">0</span>] - <span class=\"number\">1</span> == len) &#123;</span><br><span class=\"line\">\t\t\t\tdown[dp[<span class=\"number\">1</span>][i][<span class=\"number\">0</span>]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> cur = <span class=\"number\">0</span>, flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= len; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!flag) &#123;</span><br><span class=\"line\">\t\t\t\tvector&lt;<span class=\"keyword\">int</span>&gt; &amp;v = up[i];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> p = <span class=\"built_in\">upper_bound</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), cur) - v.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(p == v.<span class=\"built_in\">size</span>() || a[v[p]] &lt;= a[cur]) &#123;</span><br><span class=\"line\">\t\t\t\t\tflag = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tvector&lt;<span class=\"keyword\">int</span>&gt; &amp;vv = down[len - i + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">int</span> pp = <span class=\"built_in\">upper_bound</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), cur) - v.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span>(pp != vv.<span class=\"built_in\">size</span>() &amp;&amp; a[vv[pp]] &lt; a[cur] &amp;&amp; vv[pp] &lt; v[p]) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tflag = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tcur = v[p];</span><br><span class=\"line\">\t\t\t\t\t\tans[<span class=\"number\">0</span>].<span class=\"built_in\">push_back</span>(v[p]);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(flag) &#123;</span><br><span class=\"line\">\t\t\t\tvector&lt;<span class=\"keyword\">int</span>&gt; &amp;v = down[len - i + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> p = <span class=\"built_in\">upper_bound</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), cur) - v.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">assert</span>(a[v[p]] &lt; a[cur]);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">assert</span>(p &lt; v.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">\t\t\t\tcur = v[p];</span><br><span class=\"line\">\t\t\t\tans[<span class=\"number\">0</span>].<span class=\"built_in\">push_back</span>(v[p]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcur = flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= len; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!flag) &#123;</span><br><span class=\"line\">\t\t\t\tvector&lt;<span class=\"keyword\">int</span>&gt; &amp;v = up[i];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> p = <span class=\"built_in\">lower_bound</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), cur, [&amp;](<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)&#123;<span class=\"keyword\">return</span> a[i] &gt; a[j];&#125;) - v.<span class=\"built_in\">begin</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(p &lt; <span class=\"number\">0</span> || a[v[p]] &lt;= a[cur]) &#123;</span><br><span class=\"line\">\t\t\t\t\tflag = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\tcur = v[p];</span><br><span class=\"line\">\t\t\t\t\tans[<span class=\"number\">1</span>].<span class=\"built_in\">push_back</span>(v[p]);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(flag) &#123;</span><br><span class=\"line\">\t\t\t\tvector&lt;<span class=\"keyword\">int</span>&gt; &amp;v = down[len - i + <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> p = <span class=\"built_in\">lower_bound</span>(v.<span class=\"built_in\">begin</span>(), v.<span class=\"built_in\">end</span>(), cur, [&amp;](<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j)&#123;<span class=\"keyword\">return</span> a[i] &lt; a[j];&#125;) - v.<span class=\"built_in\">begin</span>() - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">assert</span>(p &gt;= <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">assert</span>(a[v[p]] &lt; a[cur]);</span><br><span class=\"line\">\t\t\t\tcur = v[p];</span><br><span class=\"line\">\t\t\t\tans[<span class=\"number\">1</span>].<span class=\"built_in\">push_back</span>(v[p]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> _ = <span class=\"number\">0</span>; _ &lt; <span class=\"number\">2</span>; ++_) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; len; ++i)</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d%c&quot;</span>, ans[_][i], <span class=\"string\">&quot; \\n&quot;</span>[i + <span class=\"number\">1</span> == len]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"everything-is-generated-in-equal-probability\">1005. Everything\nIs Generated In Equal Probability</h2>\n<p>solved at 01:45(+1)</p>\n<p>求当前序列的逆序对数并且将当前序列随机替换成一个子序列(<span\nclass=\"math inline\">\\(2^n\\)</span>)种，递归处理每次结果相加直到序列为空为止</p>\n<p>每次给定一个<span class=\"math inline\">\\({\\rm N}\\)</span>,\n你随机取一个<span class=\"math inline\">\\(n\\in[1,{\\rm\nN}]\\)</span>，然后随机取一个<span\nclass=\"math inline\">\\(n\\)</span>个数的排列作为初始序列，求总逆序对数的期望</p>\n<p>设<span class=\"math inline\">\\(f(n)\\)</span>代表长为<span\nclass=\"math inline\">\\(n\\)</span>的序列的期望</p>\n<p>显然<span class=\"math display\">\\[f(n) = \\frac {n(n-1)} 4 +\n\\sum\\limits_{i = 0}^{n}\\frac {C_n^i} {2^n}f(i)\\]</span></p>\n<p><span class=\"math inline\">\\(n\\)</span>只有<span\nclass=\"math inline\">\\(3000\\)</span>,<span\nclass=\"math inline\">\\(n^2\\)</span>递推即可，最后再求个前缀和</p>\n<p>群里有老哥一眼看出答案是<span class=\"math inline\">\\(\\frac {n^2-1}\n9\\)</span> ....</p>\n<h2 id=\"fantastic-magic-cube\">1006. Fantastic Magic Cube</h2>\n<p>upsolved</p>\n<p>题意转化之后就是你有一个<span class=\"math inline\">\\(n \\ast n \\ast\nn\\)</span>的立方体，每个<span class=\"math inline\">\\(1 \\ast 1 \\ast\n1\\)</span>的小立方体都有自己的权值（权值为三个坐标的异或），你每次沿着一个方向把一个立方体切成两个立方体，获得的价值是两个立方体的权值和的乘积，你需要把它们都切成<span\nclass=\"math inline\">\\(1 \\ast 1 \\ast 1\\)</span>的，求最大价值</p>\n<p>听了dls题解，发现是个阅读理解，不管怎么切都是一样的</p>\n<p>考虑两个不同的小立方体，它们的权值乘积一定被加到了最终的价值里，并且只加了一次</p>\n<p>于是只要<span\nclass=\"math inline\">\\(FWT\\)</span>求出每个权值的小立方体有多少个然后求一求和就好了</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> LL = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">998244353</span>, N = <span class=\"number\">1048576</span> + <span class=\"number\">10</span>, g = <span class=\"number\">3</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">qp</span><span class=\"params\">(LL a, LL n)</span> </span>&#123;</span><br><span class=\"line\">\tLL res = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) </span><br><span class=\"line\">\t\t\tres = res * a % mod;</span><br><span class=\"line\">\t\ta = a * a % mod;</span><br><span class=\"line\">\t\tn &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> inv2 = <span class=\"built_in\">qp</span>(<span class=\"number\">2</span>, mod - <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">FWT</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span> </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d &lt; n; d &lt;&lt;= <span class=\"number\">1</span>)  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m = d &lt;&lt; <span class=\"number\">1</span>, i = <span class=\"number\">0</span>; i &lt; n; i += m)  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; d; ++j) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">int</span> x = a[i + j], y = a[i + j + d];  </span><br><span class=\"line\">                a[i + j] = (x + y) % mod, a[i + j + d] = (x - y + mod) % mod;   </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">IFWT</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> n)</span>   </span>&#123;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> d = <span class=\"number\">1</span>; d &lt; n; d &lt;&lt;= <span class=\"number\">1</span>)  </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> m = d &lt;&lt; <span class=\"number\">1</span>, i = <span class=\"number\">0</span>; i &lt; n; i += m)  </span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; d; ++j) &#123;  </span><br><span class=\"line\">                <span class=\"keyword\">int</span> x = a[i + j], y = a[i + j + d];  </span><br><span class=\"line\">                a[i + j] = <span class=\"number\">1LL</span> * (x + y) * inv2 % mod, a[i + j + d] = (<span class=\"number\">1LL</span> * (x - y) * inv2 % mod + mod) % mod; </span><br><span class=\"line\">            &#125;  </span><br><span class=\"line\">&#125; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, a[N], m;</span><br><span class=\"line\">LL sum, ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n)) &#123;</span><br><span class=\"line\">\t\tm = n;</span><br><span class=\"line\">\t\tsum = ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(; m &amp; (m - <span class=\"number\">1</span>); m += m &amp; -m);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) </span><br><span class=\"line\">\t\t\ta[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">\t\t\ta[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">FWT</span>(a, m);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)</span><br><span class=\"line\">\t\t\ta[i] = <span class=\"number\">1LL</span> * a[i] * a[i] % mod * a[i] % mod;</span><br><span class=\"line\">\t\t<span class=\"built_in\">IFWT</span>(a, m);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)</span><br><span class=\"line\">\t\t\tsum = (sum + <span class=\"number\">1LL</span> * i * a[i]) % mod;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)</span><br><span class=\"line\">\t\t\tans = (ans + (<span class=\"number\">1LL</span> * i * a[i] % mod * (sum - i) % mod + mod) % mod) % mod;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans * inv2 % mod);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>##1009. I Love Palindrome String</p>\n<p>待补, PAM待学</p>\n<p>##1010. Just Skip The Problem</p>\n<p>solved at 00:31</p>\n<p>直接输出<span class=\"math inline\">\\(n!\\)</span>就好了，<span\nclass=\"math inline\">\\(1\\)</span>特判掉（不过我看有的人没特判就过了，怕不是没这数据。。。）</p>\n<h2 id=\"keen-on-everything-but-triangle\">1011. Keen on Everything But\nTriangle</h2>\n<p>solved at 00:44</p>\n<p><span\nclass=\"math inline\">\\(Q\\)</span>次询问一个区间里的数能构成的最大周长的三角形</p>\n<p>因为数据范围是<span\nclass=\"math inline\">\\(1e9\\)</span>所以大概四十几个数就一定能构成三角形，从大到小排序，先找<span\nclass=\"math inline\">\\(123\\)</span>，不行就<span\nclass=\"math inline\">\\(234\\)</span>，找个四十几次就行了</p>\n<p>主席树实现的，线段树维护前<span\nclass=\"math inline\">\\(45\\)</span>大暴力合并据说也可以</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;algorithm&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstring&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> MAXN = <span class=\"number\">100010</span>;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l, r, sum;</span><br><span class=\"line\">&#125;Tree[MAXN * <span class=\"number\">30</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> root[MAXN];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">num</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x, id;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span> &lt; (<span class=\"keyword\">const</span> num &amp;rhs) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x &lt; rhs.x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;a[MAXN];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> rnk[MAXN];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, i, j, k, cnt, l, r, x, y, z;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tcnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">\troot[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tTree[<span class=\"number\">0</span>].l = Tree[<span class=\"number\">0</span>].r = Tree[<span class=\"number\">0</span>].sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> num)</span> </span>&#123;</span><br><span class=\"line\">\tTree[++cnt] = Tree[rt];</span><br><span class=\"line\">\trt = cnt;</span><br><span class=\"line\">\tTree[rt].sum++;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(num &lt;= mid)</span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(Tree[rt].l, l, mid, num);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(Tree[rt].r, mid + <span class=\"number\">1</span>, r, num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> j, <span class=\"keyword\">int</span> k, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> l;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> d = Tree[Tree[j].l].sum - Tree[Tree[i].l].sum;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(k &lt;= d)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(Tree[i].l, Tree[j].l, k, l, mid);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(Tree[i].r, Tree[j].r, k - d, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;n, &amp;m)) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i].x);</span><br><span class=\"line\">\t\t\ta[i].id = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">sort</span>(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\trnk[a[i].id] = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\troot[i] = root[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">update</span>(root[i], <span class=\"number\">1</span>, n, rnk[i]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(m--) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;l, &amp;r);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(r - l &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-1\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tcnt = r - l + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tx = a[<span class=\"built_in\">query</span>(root[l - <span class=\"number\">1</span>], root[r], cnt, <span class=\"number\">1</span>, n)].x;</span><br><span class=\"line\">\t\t\ty = a[<span class=\"built_in\">query</span>(root[l - <span class=\"number\">1</span>], root[r], cnt - <span class=\"number\">1</span>, <span class=\"number\">1</span>, n)].x;</span><br><span class=\"line\">\t\t\tz = a[<span class=\"built_in\">query</span>(root[l - <span class=\"number\">1</span>], root[r], cnt - <span class=\"number\">2</span>, <span class=\"number\">1</span>, n)].x;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(x &lt; y + z) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, <span class=\"number\">0LL</span> + x + y + z);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">bool</span> flag = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">3</span>; i &lt; cnt; ++i) &#123;</span><br><span class=\"line\">\t\t\t\tx = y;</span><br><span class=\"line\">\t\t\t\ty = z;</span><br><span class=\"line\">\t\t\t\tz = a[<span class=\"built_in\">query</span>(root[l - <span class=\"number\">1</span>], root[r], cnt - i, <span class=\"number\">1</span>, n)].x;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(x &lt; y + z) &#123;</span><br><span class=\"line\">\t\t\t\t\tflag = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, <span class=\"number\">0LL</span> + x + y + z);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!flag) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;-1\\n&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"longest-subarray\">1012. Longest Subarray</h2>\n<p>upsolved</p>\n<p>自闭题</p>\n<p>求最长的连续子序列满足序列里出现的数都至少出现了<span\nclass=\"math inline\">\\(k\\)</span>次</p>\n<p>枚举右端点，线段树维护不合法的区间，每次询问最左边的合法位置即可</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> mn[N &lt;&lt; <span class=\"number\">2</span>], lazy[N &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(lazy[rt]) &#123;</span><br><span class=\"line\">\t\tlazy[rt &lt;&lt; <span class=\"number\">1</span>] += lazy[rt];</span><br><span class=\"line\">\t\tlazy[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>] += lazy[rt];</span><br><span class=\"line\">\t\tmn[rt &lt;&lt; <span class=\"number\">1</span>] += lazy[rt];</span><br><span class=\"line\">\t\tmn[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>] += lazy[rt];</span><br><span class=\"line\">\t\tlazy[rt] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">\tmn[rt] = <span class=\"built_in\">min</span>(mn[rt &lt;&lt; <span class=\"number\">1</span>], mn[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\tlazy[rt] = mn[rt] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span>\tl, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class=\"line\">\t\tmn[rt] += val;</span><br><span class=\"line\">\t\tlazy[rt] += val;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= mid)</span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, L, R, val);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(R &gt; mid)</span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, L, R, val);</span><br><span class=\"line\">\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(mn[rt] &gt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">\t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(mn[rt &lt;&lt; <span class=\"number\">1</span>] == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N], n, c, k, ans, i, j, x, y;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; pos[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;n, &amp;c, &amp;k)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(k == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%*d&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, n);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">\t\tans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(pos[a[i]].<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>, i, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\tpos[a[i]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\tx = pos[a[i]].<span class=\"built_in\">size</span>() - k;</span><br><span class=\"line\">\t\t\t\ty = pos[a[i]].<span class=\"built_in\">back</span>();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>, y, <span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, pos[a[i]][x] + <span class=\"number\">1</span>, y, <span class=\"number\">-1</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\tpos[a[i]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">\t\t\t\tx = pos[a[i]].<span class=\"built_in\">size</span>() - k;</span><br><span class=\"line\">\t\t\t\ty = pos[a[i]].<span class=\"built_in\">back</span>();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(x &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>, y, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, pos[a[i]][x] + <span class=\"number\">1</span>, y, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tj = <span class=\"built_in\">query</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(j) ans = <span class=\"built_in\">max</span>(ans, i - j + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= c; ++i)</span><br><span class=\"line\">\t\t\tpos[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>1007dls发了ppt,\n估计是学不会，1008队友补了，1009看什么时候有时间去学</p>\n","categories":["算法"],"tags":["杭电多校"]},{"title":"2019杭电多校第一场","url":"/posts/db4630e0.html","content":"<p>有点自闭，本来应该昨天写的，拖到了今天</p>\n<h2 id=\"blank\">1001. Blank</h2>\n<p>upsolved</p>\n<p>题意是在<span\nclass=\"math inline\">\\(n\\)</span>个位置上填数，只能填<span\nclass=\"math inline\">\\(0,1,2,3\\)</span>这四种，然后有<span\nclass=\"math inline\">\\(m\\)</span>个限制条件，限制的是区间不同数的个数，求填数方案数<span\nclass=\"math inline\">\\(1&lt;=n,m&lt;=100\\)</span> <span id=\"more\"></span>\n看着官方题解一下就明白了</p>\n<p><span class=\"math inline\">\\(dp[i][j][k][t]\\)</span>代表填完前<span\nclass=\"math inline\">\\(t\\)</span>个数之后四种数的出现位置从小大大排序分别是<span\nclass=\"math inline\">\\(i,j,k,t\\)</span>的方案数，限制条件加到右端点里判断就好了,<span\nclass=\"math inline\">\\(t\\)</span>那一维可以滚动掉，时间复杂度<span\nclass=\"math inline\">\\(O(Tn^4)\\)</span>(因为是<span\nclass=\"math inline\">\\(i,j,k,t\\)</span>有序的所以常数比一小得多)，空间复杂度<span\nclass=\"math inline\">\\(O(n^3)\\)</span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">101</span>, mod = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[N][N][N][<span class=\"number\">2</span>], T, n, m, l, r, x, ans;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; cons[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">addmod</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\tx += y;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(x &gt;= mod)</span><br><span class=\"line\">\t\tx -= mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;T);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(T--) &#123;</span><br><span class=\"line\">\t\tans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;x);</span><br><span class=\"line\">\t\t\tcons[r].<span class=\"built_in\">push_back</span>(&#123;l, x&#125;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t\tcons[i].<span class=\"built_in\">push_back</span>(&#123;i, <span class=\"number\">1</span>&#125;);</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(dp, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(dp));</span><br><span class=\"line\">\t\tdp[<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> cur = <span class=\"number\">1</span>; cur &lt;= n; ++cur) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> o = cur &amp; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= cur; ++i) </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt;= cur; ++j)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = j; k &lt;= cur; ++k)</span><br><span class=\"line\">\t\t\t\t\t\tdp[i][j][k][o] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= cur; ++i) </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt;= cur; ++j)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = j; k &lt;= cur; ++k) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">addmod</span>(dp[j][k][cur - <span class=\"number\">1</span>][o], dp[i][j][k][o ^ <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">addmod</span>(dp[i][k][cur - <span class=\"number\">1</span>][o], dp[i][j][k][o ^ <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">addmod</span>(dp[i][j][cur - <span class=\"number\">1</span>][o], dp[i][j][k][o ^ <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">addmod</span>(dp[i][j][k][o], dp[i][j][k][o ^ <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= cur; ++i) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt;= cur; ++j)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = j; k &lt;= cur; ++k) </span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> c : cons[cur]) &#123;</span><br><span class=\"line\">\t\t\t\t\t\t\tl = c.first, x = c.second;</span><br><span class=\"line\">\t\t\t\t\t\t\t<span class=\"keyword\">if</span>((i &gt;= l) + (j &gt;= l) + (k &gt;= l) + (cur &gt;= l) != x)</span><br><span class=\"line\">\t\t\t\t\t\t\t\tdp[i][j][k][o] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt;= n; ++j) </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = j; k &lt;= n; ++k)</span><br><span class=\"line\">\t\t\t\t\t<span class=\"built_in\">addmod</span>(ans, dp[i][j][k][n &amp; <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t\tcons[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"operation\">1002. Operation</h2>\n<p>upsloved</p>\n<p>强制在线，每次往数列末加数或询问区间子集异或最大值</p>\n<p>究极自闭，cf1100F原题（有在线做法），这题我寒假的时候还做过。。。然后看了五个小时没看出来。。。</p>\n<p>就是记录<span\nclass=\"math inline\">\\(n\\)</span>个前缀线性基，线性基额外维护当前位置的数的插入位置，插入的时候贪心地取最大值，具体可以搜cf1100F的题解</p>\n<h2 id=\"vacation\">1004. Vacation</h2>\n<p>solved at 02:40</p>\n<p>有<span\nclass=\"math inline\">\\(n+1\\)</span>辆车，每辆车有长度最大速度以及离终点的距离，不能超车，可以贴着前面车走，问离终点最远的车到达终点的时间</p>\n<p>队友想出了二分答案的做法</p>\n<p>有线性做法：离终点最远的车肯定最后是和其他若干辆车（可能只有它自己）连在一起过终点的，<span\nclass=\"math inline\">\\(O(n)\\)</span>枚举取最大值就好了</p>\n<h2 id=\"path\">1005. Path</h2>\n<p>solved at 02:06</p>\n<p>有一个有向图，拆除一条边的代价是这条边的长度，要求使用最小的代价使得从<span\nclass=\"math inline\">\\(1\\)</span>到<span\nclass=\"math inline\">\\(n\\)</span>的最短路变长</p>\n<p>把最短路上的边拿出来建一张新图跑最小割就行了</p>\n<p>队友建新图的时候点没标记疯狂<span class=\"math inline\">\\({\\rm\nMLE}\\)</span>...</p>\n<h2 id=\"typewriter\">1006. Typewriter</h2>\n<p>upsolved</p>\n<p>用最小的代价构建目标字符串，你一开始有一个空串，有两种操作</p>\n<p><span class=\"math inline\">\\(1\\)</span>:花费<span\nclass=\"math inline\">\\(p\\)</span>的代价往你的串最后加一个字符</p>\n<p><span class=\"math inline\">\\(2\\)</span>:花费<span\nclass=\"math inline\">\\(q\\)</span>的代价往你的串最后加一个你的串的任意子串</p>\n<p>比赛上来读了个假题。。。</p>\n<p>维护两个位置<span class=\"math inline\">\\(i, j\\)</span></p>\n<p><span class=\"math inline\">\\(s[1:j-1]\\)</span>插入<span\nclass=\"math inline\">\\({\\rm SAM}\\)</span>，然后看<span\nclass=\"math inline\">\\(s[j:i]\\)</span>是不是<span\nclass=\"math inline\">\\(s[1:j-1]\\)</span>的子串</p>\n<p>不是就插入<span class=\"math inline\">\\(s[j], j++\\)</span></p>\n<p>是就<span class=\"math inline\">\\(dp[i] = min(dp[i - 1] + p,\ndp[j-1]+q])\\)</span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> nxt[N &lt;&lt; <span class=\"number\">1</span>][<span class=\"number\">26</span>], len[N &lt;&lt; <span class=\"number\">1</span>], par[N &lt;&lt; <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> sz, last;</span><br><span class=\"line\"><span class=\"keyword\">char</span> s[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, p, q;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> dp[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">newnode</span><span class=\"params\">(<span class=\"keyword\">int</span> l)</span> </span>&#123;</span><br><span class=\"line\">\tlen[sz] = l;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(nxt[sz], <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(nxt[sz]));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sz++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tsz = last = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tpar[sz] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">newnode</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> p = last, np = <span class=\"built_in\">newnode</span>(len[last] + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(; ~p &amp;&amp; !nxt[p][x]; p = par[p]) nxt[p][x] = np;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">\t\tpar[np] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> q = nxt[p][x];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(len[q] == len[p] + <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tpar[np] = q;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> nq = <span class=\"built_in\">newnode</span>(len[p] + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memcpy</span>(nxt[nq], nxt[q], <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(nxt[nq]));</span><br><span class=\"line\">\t\t\tpar[nq] = par[q];</span><br><span class=\"line\">\t\t\tpar[q] = par[np] = nq;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(; ~p &amp;&amp; nxt[p][x] == q; p = par[p])</span><br><span class=\"line\">\t\t\t\tnxt[p][x] = nq;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlast = np;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s%d%d&quot;</span>, s + <span class=\"number\">1</span>, &amp;p, &amp;q)) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t\tn = <span class=\"built_in\">strlen</span>(s + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> cur = <span class=\"number\">1</span>, now = <span class=\"number\">1</span>, pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(cur &lt;= n) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> x = s[cur] - <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(nxt[pos][x]) &#123;</span><br><span class=\"line\">\t\t\t\tpos = nxt[pos][x];</span><br><span class=\"line\">\t\t\t\tdp[cur] = <span class=\"built_in\">min</span>(dp[cur - <span class=\"number\">1</span>] + p, dp[now - <span class=\"number\">1</span>] + q);</span><br><span class=\"line\">\t\t\t\tcur++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cur == now) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">add</span>(x);</span><br><span class=\"line\">\t\t\t\tdp[cur] = dp[cur - <span class=\"number\">1</span>] + p;</span><br><span class=\"line\">\t\t\t\tcur++;</span><br><span class=\"line\">\t\t\t\tnow++;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">add</span>(s[now++] - <span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">int</span> tlen = cur - now;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">while</span>(~pos &amp;&amp; ~par[pos] &amp;&amp; len[par[pos]] &gt;= tlen)</span><br><span class=\"line\">\t\t\t\t\tpos = par[pos];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, dp[n]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"string\">1009. String</h2>\n<p>upsolved</p>\n<p>赛中队友说可做，只是我一直在1002...我真菜</p>\n<p>选择一个给定字符串的一个长度为<span\nclass=\"math inline\">\\(k\\)</span>的子序列构成目标串，要求字典序最小，同时给出了<span\nclass=\"math inline\">\\(26\\)</span>种字母在新串中出现次数的上界和下界</p>\n<p>直接贪心就完事了。。。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>, knd = <span class=\"number\">26</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> s[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> L[knd], R[knd], cnt[N][knd], c[knd], n, k, nxt[N][knd], pos, tmp, tot;</span><br><span class=\"line\"><span class=\"keyword\">char</span> ans[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">check</span><span class=\"params\">(<span class=\"keyword\">int</span> p, <span class=\"keyword\">int</span> now)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p &lt; <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x = s[p] - <span class=\"string\">&#x27;a&#x27;</span>, res = <span class=\"number\">0</span>, ret = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(c[x] == R[x]) <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\tc[x]++;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; knd; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(L[i] &gt; c[i]) res += L[i] - c[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(cnt[p][i] - (x == i) &lt; L[i] - c[i]) &#123;</span><br><span class=\"line\">\t\t\tret = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(res &gt; k - now) </span><br><span class=\"line\">\t\tret = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tc[x]--;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s%d&quot;</span>, s, &amp;k)) &#123;</span><br><span class=\"line\">\t\ttot = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tn = <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; knd; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;L[i], &amp;R[i]);</span><br><span class=\"line\">\t\t\ttot += R[i];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(nxt[n], <span class=\"number\">-1</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(nxt[n]));</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(cnt[n], <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(cnt[n]));</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(c, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(c));</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; ~i; --i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memcpy</span>(nxt[i], nxt[i + <span class=\"number\">1</span>], <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(nxt[i + <span class=\"number\">1</span>]));</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">memcpy</span>(cnt[i], cnt[i + <span class=\"number\">1</span>], <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(cnt[i + <span class=\"number\">1</span>]));</span><br><span class=\"line\">\t\t\tnxt[i][s[i] - <span class=\"string\">&#x27;a&#x27;</span>] = i;</span><br><span class=\"line\">\t\t\tcnt[i][s[i] - <span class=\"string\">&#x27;a&#x27;</span>]++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tpos = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; knd; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(nxt[<span class=\"number\">0</span>][i], <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">\t\t\t\tc[i]++;</span><br><span class=\"line\">\t\t\t\tpos = nxt[<span class=\"number\">0</span>][i] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\tans[<span class=\"number\">0</span>] = <span class=\"string\">&#x27;a&#x27;</span> + i;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(pos == <span class=\"number\">-1</span> || tot &lt; k) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; k; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; knd; ++j) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(c[j] == R[j]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">check</span>(nxt[pos][j], i + <span class=\"number\">1</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\tc[j]++;</span><br><span class=\"line\">\t\t\t\t\tpos = nxt[pos][j] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t\t\tans[i] = <span class=\"string\">&#x27;a&#x27;</span> + j;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tans[k] = <span class=\"string\">&#x27;\\0&#x27;</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"sequence\">1012. Sequence</h2>\n<p>NTT</p>\n<p><a\nhref=\"https://www.cnblogs.com/xusirui/p/11229450.html\">参考博客</a></p>\n<p>1011，1013都是队友负责的方向。。</p>\n<p>这场打的真是菜，全场没什么贡献，以后学了什么新东西还是应该记录下来啊。。。</p>\n","categories":["算法"],"tags":["杭电多校"]},{"title":"2019牛客多校第二场","url":"/posts/676f8061.html","content":"<p>##A. Eddy Walker</p>\n<p>upsloved</p>\n<p>有一个长为<span class=\"math inline\">\\(n\\)</span>的环，一开始位于<span\nclass=\"math inline\">\\(0\\)</span>，每次随机向前或者向后走，求最后一个走到<span\nclass=\"math inline\">\\(m\\)</span>的概率 <span id=\"more\"></span>\nps:这题实际上求的是所有询问的前缀积</p>\n<p>实际上概率相等（俺也不知道为啥）如果<span\nclass=\"math inline\">\\(m!=0\\)</span>，则概率是<span\nclass=\"math inline\">\\(\\frac 1 {n-1}\\)</span>，特判<span\nclass=\"math inline\">\\(n=1,m=0\\)</span>就行了</p>\n<p>代码不放了</p>\n<h2 id=\"b.-eddy-walker2\">B. Eddy Walker2</h2>\n<p>solved at 03:54(+2)</p>\n<p>有一个无限长的序列，一开始位于<span\nclass=\"math inline\">\\(0\\)</span>，每次概率均等地往前走<span\nclass=\"math inline\">\\(1\\)</span>到<span\nclass=\"math inline\">\\(k\\)</span>步，求经过<span\nclass=\"math inline\">\\(n\\)</span>的概率</p>\n<p><span class=\"math inline\">\\(1&lt;=n&lt;=1e18,\n1&lt;=k&lt;=1000\\)</span></p>\n<p>如果<span class=\"math inline\">\\(n=-1\\)</span>表示求<span\nclass=\"math inline\">\\(n\\)</span>趋近于正无穷时的概率</p>\n<p>显然<span class=\"math inline\">\\(dp[i] =\n\\sum\\limits_{j=i-k}^{i-1}dp[j]\\)</span></p>\n<p>这是个线性递推式，我们赛中BM搞过去了...</p>\n<p><span class=\"math inline\">\\(n=-1\\)</span>时小数据打表发现是<span\nclass=\"math inline\">\\(\\frac 2 {k+1}\\)</span></p>\n<p>矩阵快速幂是<span\nclass=\"math inline\">\\(k^3\\log(n)\\)</span>的，据说可以利用转移矩阵和特征方程的联系优化成<span\nclass=\"math inline\">\\(k^2\\log(n)\\)</span>的，并不是很懂，可以搜叉姐论文看一看</p>\n<p>代码也没啥好放的</p>\n<h2 id=\"d.-kth-minimum-clique\">D. Kth Minimum Clique</h2>\n<p>upsloved</p>\n<p><span class=\"math inline\">\\(n\\)</span>个点的带点权的图，求权值第<span\nclass=\"math inline\">\\(k\\)</span>小的完全子图的权值<span\nclass=\"math inline\">\\(1&lt;=n&lt;=100, 1&lt;=k&lt;=1e6)\\)</span></p>\n<p>看着咖啡鸡的代码恍然大悟，咖啡鸡nb</p>\n<p>用优先队列保存当前完全子图，然后尝试往这个图里塞一个点，为避免重复只塞下标比当前完全子图最大点下标还要大的点，复杂度大概是<span\nclass=\"math inline\">\\(k\\log(k)+kn^2/64\\)</span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> bs = bitset&lt;<span class=\"number\">105</span>&gt;;</span><br><span class=\"line\"><span class=\"keyword\">using</span> LL = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">\tLL val;</span><br><span class=\"line\">\tbs mask;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> node &amp;rhs) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> val &gt; rhs.val;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> s[<span class=\"number\">105</span>][<span class=\"number\">105</span>], n, a[<span class=\"number\">105</span>], k;</span><br><span class=\"line\">bs f[<span class=\"number\">105</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;k);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\tf[i].<span class=\"built_in\">reset</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%1d&quot;</span>, &amp;s[i][j]);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(s[i][j] == <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t\tf[i].<span class=\"built_in\">set</span>(j);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpriority_queue&lt;node&gt; pq;</span><br><span class=\"line\">\tbs p;</span><br><span class=\"line\">\tp.<span class=\"built_in\">reset</span>();</span><br><span class=\"line\">\tpq.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>, p&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!pq.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\tnode u = pq.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">\t\tpq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(--k == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, u.val);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> pos = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(u.mask[i])</span><br><span class=\"line\">\t\t\t\tpos = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = pos; i &lt; n; ++i) <span class=\"keyword\">if</span>((f[i] &amp; u.mask) == u.mask) &#123;</span><br><span class=\"line\">\t\t\tu.mask[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tpq.<span class=\"built_in\">push</span>(&#123;u.val + a[i], u.mask&#125;);</span><br><span class=\"line\">\t\t\tu.mask[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;-1&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"e.-maze\">E. MAZE</h2>\n<p>upsolved</p>\n<p>你有一个<span class=\"math inline\">\\(n \\ast m\\)</span>的<span\nclass=\"math inline\">\\(01\\)</span>矩阵，<span\nclass=\"math inline\">\\(1\\)</span>代表墙，你每次可以往下，左，右走（不能往上，也不能走回头路）</p>\n<p>有两种操作</p>\n<p>1.修改<span class=\"math inline\">\\(i, j\\)</span>位置的矩阵状态</p>\n<p>2.询问从<span class=\"math inline\">\\(1, a\\)</span>走到<span\nclass=\"math inline\">\\(n, b\\)</span>的方案数</p>\n<p>设<span class=\"math inline\">\\(dp[l][r][i][j]\\)</span>代表从<span\nclass=\"math inline\">\\(l, i\\)</span>走到<span\nclass=\"math inline\">\\(r,j\\)</span>的方案数</p>\n<p>显然<span class=\"math inline\">\\(dp[l][r][i][j] =\n\\sum\\limits_{k=1}^mdp[l][x][i][k] \\ast dp[x+1][r][k][j]\\)</span>，<span\nclass=\"math inline\">\\(x\\)</span>是<span\nclass=\"math inline\">\\(l\\)</span>到<span\nclass=\"math inline\">\\(r-1\\)</span>之间的任意一个值</p>\n<p>因为不能走回头路，相当于枚举怎么从<span\nclass=\"math inline\">\\(x\\)</span>走到<span\nclass=\"math inline\">\\(x+1\\)</span>的</p>\n<p>然后这个东西显然可以用线段树，支持<span\nclass=\"math inline\">\\(O(m^3\\log(n))\\)</span>修改, <span\nclass=\"math inline\">\\(O(1)\\)</span>查询</p>\n<p>总复杂度是<span class=\"math inline\">\\(O(q \\ast\nm^3\\log(n)+m^3n)\\)</span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>, N = <span class=\"number\">5e4</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, q, b[N][<span class=\"number\">10</span>], x, y, z;</span><br><span class=\"line\"><span class=\"keyword\">char</span> s[<span class=\"number\">14</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Matrix</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a[<span class=\"number\">10</span>][<span class=\"number\">10</span>];</span><br><span class=\"line\">\tMatrix <span class=\"keyword\">operator</span>*(<span class=\"keyword\">const</span> Matrix &amp;rhs) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">\t\tMatrix c;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(c.a, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(c.a));</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i)  </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; ++j) </span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = <span class=\"number\">0</span>; k &lt; m; ++k) </span><br><span class=\"line\">\t\t\t\t\tc.a[i][j] = (c.a[i][j] + <span class=\"number\">1LL</span> * a[i][k] * rhs.a[k][j] % mod) % mod;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> c;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;tree[N &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">\ttree[rt] = tree[rt &lt;&lt; <span class=\"number\">1</span>] * tree[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">calc</span><span class=\"params\">(<span class=\"keyword\">int</span> b[], Matrix &amp;c)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(c.a, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(c.a));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; m; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; j &lt; m &amp;&amp; b[j] == <span class=\"number\">0</span>; ++j) </span><br><span class=\"line\">\t\t\tc.a[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i; ~j &amp;&amp; b[j] == <span class=\"number\">0</span>; --j)</span><br><span class=\"line\">\t\t\tc.a[i][j] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">calc</span>(b[l], tree[rt]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">calc</span>(b[l], tree[rt]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pos &lt;= mid)</span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, pos);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, pos);</span><br><span class=\"line\">\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;q);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, s);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; m; ++j)</span><br><span class=\"line\">\t\t\tb[i][j] = s[j] - <span class=\"string\">&#x27;0&#x27;</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;x, &amp;y, &amp;z);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tb[y][z - <span class=\"number\">1</span>] ^= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, y);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, tree[<span class=\"number\">1</span>].a[y - <span class=\"number\">1</span>][z - <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>##F. Partition problem</p>\n<p>solved at 02:38(+3)</p>\n<p>有<span\nclass=\"math inline\">\\(2n\\)</span>个人，把他们分为大小各为<span\nclass=\"math inline\">\\(n\\)</span>的两个集合，不在同一个集合里的人会获得贡献<span\nclass=\"math inline\">\\(v_{i,j}\\)</span>,求最大贡献</p>\n<p><span class=\"math inline\">\\((1&lt;=n&lt;=14)\\)</span></p>\n<p>比赛的时候并没有发现<span\nclass=\"math inline\">\\(C_{28}^{14}\\)</span>只有4e7, 可以直接<span\nclass=\"math inline\">\\(O(n \\ast C_{28}^{14})\\)</span>dfs过去</p>\n<p>比赛的时候我写了个折半搜索，打了四个表，实际上复杂度也是<span\nclass=\"math inline\">\\(O(n \\ast C_{28}^{14})\\)</span>的...</p>\n<p>折半的两个东西拼起来的时候要一些骚操作，不然很容易变成<span\nclass=\"math inline\">\\(2 \\ast n \\ast C_{28}^{14}\\)</span>的或者是<span\nclass=\"math inline\">\\(n \\ast 2^{2 \\ast n}\\)</span>的</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">10</span> + (<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">14</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> dp[N], dp2[N];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> p[<span class=\"number\">14</span>][N], p2[<span class=\"number\">14</span>][N], ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[<span class=\"number\">28</span>][<span class=\"number\">28</span>], n, t[N], f[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> c[N], tot;</span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; v[<span class=\"number\">15</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span> * n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">2</span> * n; ++j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i][j]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ttot = (<span class=\"number\">1</span> &lt;&lt; n) - <span class=\"number\">1</span>;</span><br><span class=\"line\">\tc[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tv[<span class=\"number\">0</span>].<span class=\"built_in\">push_back</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class=\"line\">\t\tc[i] = c[i &gt;&gt; <span class=\"number\">1</span>] + (i &amp; <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tv[c[i]].<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tf[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tt[f[<span class=\"number\">0</span>]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\tf[i] = <span class=\"number\">2</span> * f[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t\tt[f[i]] = i;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> mask = <span class=\"number\">0</span>; mask &lt;= tot; ++mask) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>((<span class=\"number\">1</span> &lt;&lt; j) &amp; mask) &#123;</span><br><span class=\"line\">\t\t\t\t\tval += a[i][j + n];</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tp[i][mask] = val;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> mask = <span class=\"number\">0</span>; mask &lt;= tot; ++mask) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> val = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>((<span class=\"number\">1</span> &lt;&lt; j) &amp; mask) &#123;</span><br><span class=\"line\">\t\t\t\t\tval += a[i + n][j];</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tp2[i][mask] = val;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> mask = <span class=\"number\">0</span>; mask &lt;= tot; ++mask) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(((mask &gt;&gt; i) &amp; <span class=\"number\">1</span>) == ((mask &gt;&gt; j) &amp; <span class=\"number\">1</span>)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\tdp[mask] += a[i][j];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> mask = <span class=\"number\">0</span>; mask &lt;= tot; ++mask) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; n; ++j) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(((mask &gt;&gt; i) &amp; <span class=\"number\">1</span>) == ((mask &gt;&gt; j) &amp; <span class=\"number\">1</span>)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\tdp2[mask] += a[i + n][j + n];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> mask = <span class=\"number\">0</span>; mask &lt;= tot; ++mask) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> mask2: v[n - c[mask]]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> val = dp[mask] + dp2[mask2];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = mask; x; x -= x &amp; -x) </span><br><span class=\"line\">\t\t\t\tval += p[t[x &amp; -x]][tot ^ mask2];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> x = mask2; x; x -= x &amp; -x) </span><br><span class=\"line\">\t\t\t\tval += p2[t[x &amp; -x]][tot ^ mask];</span><br><span class=\"line\">\t\t\tans = <span class=\"built_in\">max</span>(ans, val);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"h.-second-large-rectangle\">H. Second Large Rectangle</h2>\n<p>solved at 01:00(+2)</p>\n<p>有一个<span class=\"math inline\">\\(n \\ast m\\)</span>的<span\nclass=\"math inline\">\\(01\\)</span>矩阵，求面积第二大的全<span\nclass=\"math inline\">\\(1\\)</span>子矩阵面积<span\nclass=\"math inline\">\\(1&lt;=n,m&lt;=1000\\)</span></p>\n<p>最大的是用悬线法<span\nclass=\"math inline\">\\(O(nm)\\)</span>处理出来，第二大的也差不多，把每个位置对应的最大的要么行减一，要么列减一，第二大的肯定在这些里面</p>\n<p>注意可能很多位置的最大全<span\nclass=\"math inline\">\\(1\\)</span>子矩阵是同一个矩阵，标记掉就好了</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N][N], d[N][N], s[N][N], s2[N][N], mx, mx2, n, m, vis[N][N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; ++j)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%1d&quot;</span>, &amp;a[i][j]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; ++j) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(a[i][j] == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\td[i][j] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\td[i][j] = d[i - <span class=\"number\">1</span>][j] + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\tstack&lt;<span class=\"keyword\">int</span>&gt; st;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(!st.<span class=\"built_in\">empty</span>()) st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\td[i][m + <span class=\"number\">1</span>] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\tst.<span class=\"built_in\">push</span>(m + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = m; j; --j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(d[i][st.<span class=\"built_in\">top</span>()] &gt;= d[i][j]) st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\ts[i][j] = st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">\t\t\tst.<span class=\"built_in\">push</span>(j);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\tstack&lt;<span class=\"keyword\">int</span>&gt; st;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(!st.<span class=\"built_in\">empty</span>()) st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\td[i][<span class=\"number\">0</span>] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t\tst.<span class=\"built_in\">push</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; ++j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span>(d[i][st.<span class=\"built_in\">top</span>()] &gt;= d[i][j]) st.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t\ts2[i][j] = st.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">\t\t\tst.<span class=\"built_in\">push</span>(j);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; ++j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(a[i][j] == <span class=\"number\">0</span>) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> r = s[i][j], l = s2[i][j];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(vis[l][r] == i) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\tvis[l][r] = i;</span><br><span class=\"line\">\t\t\tmx2 = <span class=\"built_in\">max</span>(mx2, d[i][j] * (r - l - <span class=\"number\">1</span>));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(mx2 &gt; mx) <span class=\"built_in\">swap</span>(mx2, mx);</span><br><span class=\"line\">\t\t\tmx2 = <span class=\"built_in\">max</span>(mx2, d[i][j] * (r - l - <span class=\"number\">2</span>));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(mx2 &gt; mx) <span class=\"built_in\">swap</span>(mx2, mx);</span><br><span class=\"line\">\t\t\tmx2 = <span class=\"built_in\">max</span>(mx2, (d[i][j] - <span class=\"number\">1</span>) * (r - l - <span class=\"number\">1</span>));</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(mx2 &gt; mx) <span class=\"built_in\">swap</span>(mx2, mx);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, mx2);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>##J. Subarray</p>\n<p>upsolved</p>\n<p>开场就有人过，看了半天不怎么会，没想到是个暴力</p>\n<p><a\nhref=\"https://www.cnblogs.com/Yinku/p/11221494.html\">参考博客</a></p>\n","categories":["算法"],"tags":["牛客多校"]},{"title":"2019牛客多校第一场","url":"/posts/57796cb9.html","content":"<p>D还没补，G看起来做不了</p>\n<h2 id=\"a-equivalent-prefixes\">A Equivalent Prefixes</h2>\n<p>solved at 00:21</p>\n<p>题意是有两个长为n的数组a，b，每个数组都是1到n的一个排列</p>\n<p>询问一个最长的前缀p，使得对于任意的<span class=\"math inline\">\\(1\n&lt;= l &lt;= r &lt;= q\\)</span>，都有<span\nclass=\"math inline\">\\(min\\_element(a, l, r) = min\\_element(b, l,\nr)\\)</span>（最小值的位置对应相等，而非值相等） <span id=\"more\"></span>\n首先显然<span class=\"math inline\">\\(p=1\\)</span>时满足</p>\n<p>若<span class=\"math inline\">\\(p=i\\)</span>满足且<span\nclass=\"math inline\">\\(pa[i+1]=pb[i+1]\\)</span>，则<span\nclass=\"math inline\">\\(p=i+1\\)</span>也满足</p>\n<p>其中<span class=\"math inline\">\\(pa[i] = max_{a[j] &lt; a[i]\n\\&amp;\\&amp; j &lt;\ni}(j)\\)</span>，即比a[i]左边第一个比a[i]小的数的位置，<span\nclass=\"math inline\">\\(pb\\)</span>类似</p>\n<p>证明如下:</p>\n<p>若<span class=\"math inline\">\\(p=i\\)</span>满足，则对于<span\nclass=\"math inline\">\\(r&lt;i+1\\)</span>, <span\nclass=\"math inline\">\\(min\\_element(a, l, r) == min\\_element(b, l,\nr)\\)</span></p>\n<p>对于<span class=\"math inline\">\\(r=i+1\\)</span>,若<span\nclass=\"math inline\">\\(l&gt;pa[i+1]\\)</span>，则<span\nclass=\"math inline\">\\(min\\_element(a, l, r)=r=i+1\\)</span></p>\n<p>若<span class=\"math inline\">\\(l&lt;=pa[i+1]\\)</span></p>\n<p>则<span class=\"math inline\">\\(min\\_element(a, l, r)!=r\\)</span>,\n<span class=\"math inline\">\\(min\\_element(a, l, r)=min\\_element(a, l,\nr-1)=min\\_element(a, l, i)\\)</span></p>\n<p>若<span class=\"math inline\">\\(pa[i+1]=pb[i+1]\\)</span>则<span\nclass=\"math inline\">\\(p=i+1\\)</span>也满足</p>\n<p><span class=\"math inline\">\\(pa,\npb\\)</span>可以用单调栈线性处理出来，总时间复杂度为<span\nclass=\"math inline\">\\(O(n)\\)</span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N], b[N], n, pa[N], pb[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        a[<span class=\"number\">0</span>] = b[<span class=\"number\">0</span>] = <span class=\"number\">-1e9</span>;</span><br><span class=\"line\">        stack&lt;<span class=\"keyword\">int</span>&gt; sa, sb;</span><br><span class=\"line\">        sa.<span class=\"built_in\">push</span>(<span class=\"number\">0</span>); sb.<span class=\"built_in\">push</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">while</span>(!sa.<span class=\"built_in\">empty</span>() &amp;&amp; a[sa.<span class=\"built_in\">top</span>()] &gt; a[i]) sa.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        \tpa[i] = sa.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">   \t     \tsa.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">   \t\t\t<span class=\"keyword\">while</span>(!sb.<span class=\"built_in\">empty</span>() &amp;&amp; b[sb.<span class=\"built_in\">top</span>()] &gt; b[i]) sb.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        \tpb[i] = sb.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">        \tsb.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> p = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">        \t<span class=\"keyword\">if</span>(pa[i] == pb[i])</span><br><span class=\"line\">        \t\tp = i;</span><br><span class=\"line\">        \t<span class=\"keyword\">else</span></span><br><span class=\"line\">        \t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"b-integration\">B Integration</h2>\n<p>upsolved</p>\n<p>题意就是求</p>\n<p><span class=\"math display\">\\[\\frac {1}{\\pi}\\int_0^{+\\infty}\\frac 1\n{\\prod_{i=1}^{n}(a_i^2+x^2)}{\\rm d}x\\]</span></p>\n<p><span class=\"math inline\">\\(1&lt;=n&lt;=1000\\)</span></p>\n<p>并不会数学，照着题解实现的</p>\n<p>令<span class=\"math display\">\\[c_i=\\frac 1 {\\prod_{(j\\neq\ni)}(a_j^2-a_i^2)}\\]</span></p>\n<p>则<span class=\"math display\">\\[\\frac 1 {\\prod(a_i^2+x^2)} = \\sum\n\\frac {c_i} {a_i^2+x^2}\\]</span></p>\n<p>而<span class=\"math display\">\\[\\int_0^{+\\infty}\\frac {c_i}\n{a_i^2+x^2} {\\rm d}x = \\frac {c_i} {2a_i} \\pi\\]</span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> LL = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e3</span> + <span class=\"number\">10</span>, mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N], n;</span><br><span class=\"line\">LL ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">qp</span><span class=\"params\">(LL a, LL n)</span> </span>&#123;</span><br><span class=\"line\">\tLL res = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\tres = res * a % mod;</span><br><span class=\"line\">\t\ta = a * a % mod;</span><br><span class=\"line\">\t\tn &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) </span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">\t\tans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\tLL q = <span class=\"built_in\">qp</span>(<span class=\"number\">2</span> * a[i] % mod, mod - <span class=\"number\">2</span>), p = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(i == j) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t\tp = (((<span class=\"number\">1LL</span> * a[j] * a[j] % mod - <span class=\"number\">1LL</span> * a[i] * a[i] % mod) % mod) + mod) % mod * p % mod;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tans = (ans + <span class=\"built_in\">qp</span>(p, mod - <span class=\"number\">2</span>) * q % mod) % mod;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"c-euclidean-distance\">C Euclidean Distance</h2>\n<p>upsolved</p>\n<p>你有一个<span class=\"math inline\">\\({\\rm n}\\)</span>维空间中的点<span\nclass=\"math inline\">\\(a\\)</span>,<span\nclass=\"math inline\">\\(a\\)</span>的每一维坐标都可以表示为$ {a_i}/ m$</p>\n<p><span class=\"math inline\">\\(a_i\\)</span>是绝对值不大于<span\nclass=\"math inline\">\\(m\\)</span>的整数</p>\n<p>你要找到另一个点<span class=\"math inline\">\\(p\\)</span>, 其中<span\nclass=\"math inline\">\\(p\\)</span>每一维坐标都是非负实数，且各维坐标和为1</p>\n<p>输出<span class=\"math inline\">\\(p\\)</span>和<span\nclass=\"math inline\">\\(a\\)</span>的最小欧式距离</p>\n<p>题解看不懂，个人是贪心做的</p>\n<p>把<span class=\"math inline\">\\(p\\)</span>的每一位坐标都表示成<span\nclass=\"math inline\">\\(p_i/m\\)</span>，则<span\nclass=\"math inline\">\\(p\\)</span>各维坐标和为<span\nclass=\"math inline\">\\(m\\)</span></p>\n<p>首先对于小于等于<span class=\"math inline\">\\(0\\)</span>的<span\nclass=\"math inline\">\\(a_i\\)</span>, 将<span\nclass=\"math inline\">\\(p_i\\)</span>设为<span\nclass=\"math inline\">\\(0\\)</span>,否则将<span\nclass=\"math inline\">\\(p_i\\)</span>设为<span\nclass=\"math inline\">\\(a_i\\)</span></p>\n<p>然后每次去调整<span class=\"math inline\">\\(p_i\\)</span>使得和为<span\nclass=\"math inline\">\\(m\\)</span>, 每次贪心地选取改了<span\nclass=\"math inline\">\\(p_i\\)</span>新增代价最小的位置</p>\n<p>注意没有保证<span\nclass=\"math inline\">\\(p_i\\)</span>是整点，最后一次处理时可能是很多数变成同一个小数</p>\n<p>另外要注意修改<span\nclass=\"math inline\">\\(p_i\\)</span>使其变小时不能小于<span\nclass=\"math inline\">\\(0\\)</span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e4</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N], p[N], n, m, cnt[N], lim[N];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x, y, tot, res, g;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">gcd</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> x, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> y)</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> y == <span class=\"number\">0</span> ? x : <span class=\"built_in\">gcd</span>(y, x % y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> b, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> c, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> d)</span> </span>&#123;</span><br><span class=\"line\">  x = b * d * x + a * d + b * c;</span><br><span class=\"line\">  y = b * y * d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m)) &#123;</span><br><span class=\"line\">    y = m * m;</span><br><span class=\"line\">    tot = <span class=\"number\">0</span>;</span><br><span class=\"line\">    x = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">2</span>*m; ++i)</span><br><span class=\"line\">      cnt[i] = lim[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(a[i] &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        p[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        x += <span class=\"number\">1LL</span> * a[i] * a[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        tot += a[i];</span><br><span class=\"line\">        p[i] = a[i];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(tot &lt; m) &#123;</span><br><span class=\"line\">      res = m - tot;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i] &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">          cnt[-a[i]]++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">          cnt[<span class=\"number\">0</span>]++;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">2</span>*m; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i)</span><br><span class=\"line\">          cnt[i] += cnt[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt[i] &gt;= res) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">modify</span>(res * res, <span class=\"number\">1LL</span> * cnt[i], res * i * <span class=\"number\">2LL</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          res -= cnt[i];</span><br><span class=\"line\">          x += cnt[i] * <span class=\"number\">1LL</span> * ((i + <span class=\"number\">1</span>) * (i + <span class=\"number\">1</span>) - (i * i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(tot &gt; m) &#123;</span><br><span class=\"line\">      res = tot - m;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i] &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">          lim[a[i]]++;</span><br><span class=\"line\">          cnt[<span class=\"number\">0</span>]++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">2</span>*m; ++i) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i)</span><br><span class=\"line\">          cnt[i] += cnt[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">        cnt[i] -= lim[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt[i] &gt;= res) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">modify</span>(res * res, <span class=\"number\">1LL</span> * cnt[i], res * i * <span class=\"number\">2LL</span>, <span class=\"number\">1LL</span>);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">          res -= cnt[i];</span><br><span class=\"line\">          x += cnt[i] * <span class=\"number\">1LL</span> * ((i + <span class=\"number\">1</span>) * (i + <span class=\"number\">1</span>) - (i * i));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    g = <span class=\"built_in\">gcd</span>(x, y);</span><br><span class=\"line\">    x /= g;</span><br><span class=\"line\">    y /= g;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld&quot;</span>, x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(y != <span class=\"number\">1</span>)</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;/%lld&quot;</span>, y);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;\\n&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"e-abba\">E ABBA</h2>\n<p>solved at 00:42</p>\n<p>你有一个长为<span\nclass=\"math inline\">\\(2*(n+m)\\)</span>的字符串，每个位置填上A或B,\n问你有多少个这样的字符串使得最终能提取出<span\nclass=\"math inline\">\\(n\\)</span>个\"AB\"子序列和<span\nclass=\"math inline\">\\(m\\)</span>个\"BA\"子序列</p>\n<p>dp即可，<span class=\"math inline\">\\(dp[i][j]\\)</span>表示前<span\nclass=\"math inline\">\\(i\\)</span>个位置用了<span\nclass=\"math inline\">\\(j\\)</span>个A的方案数</p>\n<p>通过<span class=\"math inline\">\\(n,\nm\\)</span>来计算当前位置最多已经用了多少个A</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1010</span>, mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> dp[N &lt;&lt; <span class=\"number\">2</span>][N &lt;&lt; <span class=\"number\">1</span>], n, m;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">2</span> * (n + m); ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= n + m; ++j)</span><br><span class=\"line\">\t\t\t\tdp[i][j] = <span class=\"number\">0</span>; </span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n == <span class=\"number\">0</span> &amp;&amp; m == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tdp[<span class=\"number\">1</span>][<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(m != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tdp[<span class=\"number\">1</span>][<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">2</span> * (n + m); ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= i &amp;&amp; j &lt;= n + m; ++j) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(j + <span class=\"number\">1</span> &lt;= n || j + <span class=\"number\">1</span> &lt;= n + (i + <span class=\"number\">1</span> - n) / <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tdp[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>] = (dp[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>] + dp[i][j]) % mod;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(i + <span class=\"number\">1</span> - j &lt;= m || i + <span class=\"number\">1</span> - j &lt;= m + (i + <span class=\"number\">1</span> - m) / <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\tdp[i + <span class=\"number\">1</span>][j] = (dp[i + <span class=\"number\">1</span>][j] + dp[i][j]) % mod;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, dp[<span class=\"number\">2</span> * (n + m)][n + m]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"f-random-point-in-triangle\">F Random Point in Triangle</h2>\n<p>solved at 03:02(+43)</p>\n<p>是的，<strong>44</strong>发才过</p>\n<p>有一个格点三角形<span class=\"math inline\">\\(ABC\\)</span>,\n从三角形内随机选一个点<span class=\"math inline\">\\(D\\)</span>, 求<span\nclass=\"math inline\">\\(ABD, ACD,\nBCD\\)</span>三者面积的最大值的期望的36倍（可以证明这是个整数）</p>\n<p>答案就是三角形面积的22倍,\n队友一直在积分一直炸精度，然后化简之后发现特别简单。。。</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;cmath&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ax,ay,bx,by,cx,cy, SS;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(cin &gt;&gt; ax &gt;&gt; ay &gt;&gt; bx &gt;&gt; by &gt;&gt; cx &gt;&gt; cy)&#123;</span><br><span class=\"line\">        SS = <span class=\"built_in\">abs</span>(bx * cy + ax * by + cx * ay - cx * by - bx * ay - ax * cy);</span><br><span class=\"line\">        cout &lt;&lt; SS * <span class=\"number\">11</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"h-xor\">H XOR</h2>\n<p>upsolved</p>\n<p>有<span class=\"math inline\">\\(n\\)</span>个数<span\nclass=\"math inline\">\\(a_i, 1\\le a_i \\le\n1e18\\)</span>，你可以任取一个子集，询问子集异或和为零的子集的大小的和</p>\n<p>看的大熊软糖队的代码才看懂</p>\n<p>可以转为计算每一个数被多少个集合包含</p>\n<p>对于每一个数<span\nclass=\"math inline\">\\(a_i\\)</span>，构建除了这个数之外的<span\nclass=\"math inline\">\\(n-1\\)</span>个数的线性基，然后往这个线性基里插入<span\nclass=\"math inline\">\\(a_i\\)</span>，如果插入失败则<span\nclass=\"math inline\">\\(a_i\\)</span>被<span\nclass=\"math inline\">\\(2^{n-1-x}\\)</span>个集合包含，<span\nclass=\"math inline\">\\(x\\)</span>为线性基的元素个数，插入成功则<span\nclass=\"math inline\">\\(a_i\\)</span>对答案没有贡献</p>\n<p>因为如果插入成功的话说明原来的<span\nclass=\"math inline\">\\(n-1\\)</span>个数不可能有一个子集异或和为<span\nclass=\"math inline\">\\(a_i\\)</span>，而插入失败的话，任选其他插入失败的数，线性基里都能选出一个子集异或和与其相等</p>\n<p>但是这样做的复杂度是<span\nclass=\"math inline\">\\(O(n\\log^2(a))\\)</span>的，会TLE</p>\n<p>考虑<span\nclass=\"math inline\">\\(n\\)</span>个数的线性基，记录每个数能否被插入，显然最多只有<span\nclass=\"math inline\">\\(\\log(a)\\)</span>个数被插入，对于这些数合并前缀线性基和后缀线性基用之前的方法做，对于插入失败的数，除了它本身的线性基就是<span\nclass=\"math inline\">\\(n\\)</span>个数的线性基</p>\n<p>考虑到要维护后缀或前缀，空间复杂度为<span\nclass=\"math inline\">\\(O(n\\log(a))\\)</span>，时间复杂度为<span\nclass=\"math inline\">\\(n\\log(a)+\\log^3(a)\\)</span></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> LL = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>, mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">LL a[N], ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, p[N], ok[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Base</span> &#123;</span></span><br><span class=\"line\">    LL a[<span class=\"number\">63</span>];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> m;</span><br><span class=\"line\">    <span class=\"built_in\">Base</span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(a));</span><br><span class=\"line\">        m = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">insert</span><span class=\"params\">(LL x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">62</span>; ~i; --i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>((x &gt;&gt; i) &amp; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(a[i] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                    a[i] = x;</span><br><span class=\"line\">                    m++;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    x ^= a[i];</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;suf[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    p[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; N; ++i)</span><br><span class=\"line\">        p[i] = <span class=\"number\">2LL</span> * p[i - <span class=\"number\">1</span>] % mod;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n)) &#123;</span><br><span class=\"line\">        ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Base s, s2;</span><br><span class=\"line\">        suf[n + <span class=\"number\">1</span>] = s;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n; ~i; --i) &#123;</span><br><span class=\"line\">            suf[i] = suf[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">            suf[i].<span class=\"built_in\">insert</span>(a[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) ok[i] = s.<span class=\"built_in\">insert</span>(a[i]);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!ok[i]) ans = (ans + p[n - <span class=\"number\">1</span> - s.m]) % mod;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                Base t = s2;</span><br><span class=\"line\">                <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">63</span>; ++j)</span><br><span class=\"line\">                    t.<span class=\"built_in\">insert</span>(suf[i + <span class=\"number\">1</span>].a[j]);</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(!t.<span class=\"built_in\">insert</span>(a[i])) ans = (ans + p[n - <span class=\"number\">1</span> - t.m]) % mod;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            s2.<span class=\"built_in\">insert</span>(a[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"i-points-division\">I Points Division</h2>\n<p>upsloved</p>\n<p>二维平面上有很多点，每个点有两个属性<span\nclass=\"math inline\">\\(a\\)</span>和<span\nclass=\"math inline\">\\(b\\)</span>，你需要将这些点划分成两个集合<span\nclass=\"math inline\">\\(A, B\\)</span>，其中<span\nclass=\"math inline\">\\(A\\)</span>中没有点在<span\nclass=\"math inline\">\\(B\\)</span>中任意一个点的右下方（非严格），贡献定义为<span\nclass=\"math inline\">\\(A\\)</span>中点的<span\nclass=\"math inline\">\\(a\\)</span>属性和和<span\nclass=\"math inline\">\\(B\\)</span>中点的<span\nclass=\"math inline\">\\(b\\)</span>属性和的和，求最大贡献</p>\n<p>看着题解以及“你以为你CF过了四题”的代码想通的，不得不说cslnb</p>\n<p>首先将点按<span class=\"math inline\">\\(x\\)</span>从小到大，<span\nclass=\"math inline\">\\(y\\)</span>从大到小排序，然后将<span\nclass=\"math inline\">\\(y\\)</span>坐标离散化一下(常规操作)</p>\n<p>在划分完之后，一定存在一条单调不降的折线使得<span\nclass=\"math inline\">\\(A\\)</span>中的点都在其上方，<span\nclass=\"math inline\">\\(B\\)</span>中的点在线上或者下方</p>\n<p>考虑dp, <span class=\"math inline\">\\(dp[i][j]\\)</span>代表前<span\nclass=\"math inline\">\\(i\\)</span>个点，<span\nclass=\"math inline\">\\(j\\)</span>为第<span\nclass=\"math inline\">\\(i\\)</span>个点所在横坐标的纵坐标分割线（即折线经过<span\nclass=\"math inline\">\\((x_i, j)\\)</span>)时的最大贡献</p>\n<p>由于这条折线单调不降的性质</p>\n<p><span class=\"math inline\">\\(dp[i + 1][j]_{j=y_i} = max_{k &lt;=j}\n(dp[i][k]) + b_i\\)</span></p>\n<p><span class=\"math inline\">\\(dp[i + 1][j]_{1&lt;=j&lt;y_i}=dp[i][j] +\na_i\\)</span></p>\n<p><span class=\"math inline\">\\(dp[i+1][j]_{y_i&lt;j&lt;=tot}=dp[i][j] +\nb_i\\)</span></p>\n<p>可以用线段树加速</p>\n<p>这也就是为什么要在<span class=\"math inline\">\\(x\\)</span>相同时把<span\nclass=\"math inline\">\\(y\\)</span>大的放前面，否则的话就会导致查询最大值单点更新时会查询到包含同一个横坐标的更低点的<span\nclass=\"math inline\">\\(a\\)</span>值，这是不可能发生的</p>\n<p>最后要注意因为有所有点都在<span\nclass=\"math inline\">\\(A\\)</span>里的情况，需要在离散化纵坐标时加入一个极小值</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> LL = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Point</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x, y, a, b;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> Point &amp;rhs) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(x == rhs.x) <span class=\"keyword\">return</span> y &gt; rhs.y;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x &lt; rhs.x;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;p[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, b[N];</span><br><span class=\"line\">LL lazy[N &lt;&lt; <span class=\"number\">2</span>], mx[N &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">\tmx[rt] = <span class=\"built_in\">max</span>(mx[rt &lt;&lt; <span class=\"number\">1</span>], mx[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(lazy[rt]) &#123;</span><br><span class=\"line\">\t\tlazy[rt &lt;&lt; <span class=\"number\">1</span>] += lazy[rt];</span><br><span class=\"line\">\t\tmx[rt &lt;&lt; <span class=\"number\">1</span>] += lazy[rt];</span><br><span class=\"line\">\t\tlazy[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>] += lazy[rt];</span><br><span class=\"line\">\t\tmx[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>] += lazy[rt];</span><br><span class=\"line\">\t\tlazy[rt] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\tmx[rt] = lazy[rt] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> pos, LL val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">\t\tmx[rt] = val;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pos &lt;= mid)</span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, pos, val);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, pos, val);</span><br><span class=\"line\">\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, LL val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class=\"line\">\t\tmx[rt] += val;</span><br><span class=\"line\">\t\tlazy[rt] += val;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= mid)</span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, L, R, val);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(R &gt; mid)</span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, L, R, val);</span><br><span class=\"line\">\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mx[rt];</span><br><span class=\"line\">\t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\tLL ans = <span class=\"number\">-1e18</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= mid)</span><br><span class=\"line\">\t\tans = <span class=\"built_in\">max</span>(ans, <span class=\"built_in\">query</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, L, R));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(R &gt; mid)</span><br><span class=\"line\">\t\tans = <span class=\"built_in\">max</span>(ans, <span class=\"built_in\">query</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, L, R));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(~<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n)) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;p[i].x, &amp;p[i].y, &amp;p[i].a, &amp;p[i].b);</span><br><span class=\"line\">\t\t\tb[i] = p[i].y;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">sort</span>(p + <span class=\"number\">1</span>, p + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tb[n + <span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">sort</span>(b + <span class=\"number\">1</span>, b + n + <span class=\"number\">2</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> m = <span class=\"built_in\">unique</span>(b + <span class=\"number\">1</span>, b + n + <span class=\"number\">2</span>) - b - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, m);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> y = <span class=\"built_in\">lower_bound</span>(b + <span class=\"number\">1</span>, b + m + <span class=\"number\">1</span>, p[i].y) - b;</span><br><span class=\"line\">\t\t\tLL r = <span class=\"built_in\">query</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, m, <span class=\"number\">1</span>, y);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, m, y, r + p[i].b);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(y &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, m, <span class=\"number\">1</span>, y - <span class=\"number\">1</span>, p[i].a);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(y &lt; m) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, m, y + <span class=\"number\">1</span>, m, p[i].b);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, <span class=\"built_in\">query</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, m, <span class=\"number\">1</span>, m));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"j-fraction-comparision\">J Fraction Comparision</h2>\n<p>solved at 00:08</p>\n<p>给你两个分数<span class=\"math inline\">\\(x/a, y/b\\)</span>,\n输出其大小关系</p>\n<p>py水过</p>\n<figure class=\"highlight python\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span>(<span class=\"literal\">True</span>):</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        x, a, y, b = <span class=\"built_in\">map</span>(<span class=\"built_in\">int</span>, <span class=\"built_in\">input</span>().split())</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(x * b == a * y):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;=&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">elif</span> (x * b &gt; a * y):</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&gt;&quot;</span>)</span><br><span class=\"line\">        <span class=\"keyword\">else</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;&lt;&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">except</span>:</span><br><span class=\"line\">        exit()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["牛客多校"]},{"title":"区间加值，区间gcd, 牛客949H","url":"/posts/595261ca.html","content":"<p>#牛客小白月赛16H　小阳的贝壳</p>\n<p><a href=\"https://ac.nowcoder.com/acm/contest/949/H\">题目链接</a></p>\n<h2 id=\"题意\">题意</h2>\n<p>维护一个数组，支持以下操作:</p>\n<p>1: 区间加值</p>\n<p>2: 询问区间相邻数差的绝对值的最大值</p>\n<p>3: 询问区间gcd <span id=\"more\"></span> ## 题解</p>\n<p>设原数组为<span class=\"math inline\">\\(a\\)</span>, 用线段树维护<span\nclass=\"math inline\">\\(b[i] = a[i] - a[i - 1]\\)</span>,</p>\n<p>线段树维护三个值：min, max, gcd</p>\n<p>对于操作1:</p>\n<p>L 位置加上x, R + 1位置减去x</p>\n<p>对于操作2:</p>\n<p>查询区间(L + 1, R) 的 min, max, 取绝对值大者</p>\n<p>对于操作3:</p>\n<p>考虑gcd的性质</p>\n<p><span class=\"math inline\">\\(gcd(a, b, c, d, ...) = gcd(a, b - a, c -\nb, d - c, ...)\\)</span></p>\n<p>查询区间(L + 1, R) 的 gcd, 就是<span class=\"math inline\">\\(gcd(b - a,\nc - b, d - c, ...)\\)</span></p>\n<p>然后用另一个东西维护原来的a数列</p>\n<p>可以用另一颗线段树lazy标记维护</p>\n<p>我用的是树状数组差分，将区间更新和单点查询转化为单点更新和前缀和查询</p>\n<h2 id=\"代码\">代码</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> mx[N &lt;&lt; <span class=\"number\">2</span>], mn[N &lt;&lt; <span class=\"number\">2</span>], g[N &lt;&lt; <span class=\"number\">2</span>], c[N], a[N], b[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, op, l, r, x;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(; pos &lt;= n; pos += pos &amp; -pos)</span><br><span class=\"line\">\t\tc[pos] += val;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ask</span><span class=\"params\">(<span class=\"keyword\">int</span> pos)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(; pos; pos -= pos &amp; -pos)</span><br><span class=\"line\">\t\tans += c[pos];</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">\tmx[rt] = <span class=\"built_in\">max</span>(mx[rt &lt;&lt; <span class=\"number\">1</span>], mx[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>]);</span><br><span class=\"line\">\tmn[rt] = <span class=\"built_in\">min</span>(mn[rt &lt;&lt; <span class=\"number\">1</span>], mn[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>]);</span><br><span class=\"line\">\tg[rt] = __gcd(g[rt &lt;&lt; <span class=\"number\">1</span>], g[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">\t\tmx[rt] = mn[rt] = g[rt] = b[l];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">\t\tmx[rt] += val;</span><br><span class=\"line\">\t\tmn[rt] += val;</span><br><span class=\"line\">\t\tg[rt] += val;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pos &lt;= mid)</span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, pos, val);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, pos, val);</span><br><span class=\"line\">\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">querymax</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(<span class=\"built_in\">abs</span>(mn[rt]), <span class=\"built_in\">abs</span>(mx[rt]));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>, ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= mid)</span><br><span class=\"line\">\t\tans = <span class=\"built_in\">max</span>(ans, <span class=\"built_in\">querymax</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, L, R));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(R &gt; mid)</span><br><span class=\"line\">\t\tans = <span class=\"built_in\">max</span>(ans, <span class=\"built_in\">querymax</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, L, R));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">querygcd</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> g[rt];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>, ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= mid)</span><br><span class=\"line\">\t\tans = __gcd(ans, <span class=\"built_in\">querygcd</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, L, R));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(R &gt; mid)</span><br><span class=\"line\">\t\tans = __gcd(ans, <span class=\"built_in\">querygcd</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, L, R));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">abs</span>(ans);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(i, a[i] - a[i - <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\tb[i] = a[i] - a[i - <span class=\"number\">1</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(m--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;op, &amp;l, &amp;r);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(op == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;x);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">add</span>(l, x);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, l, x);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(r != n) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">add</span>(r + <span class=\"number\">1</span>, -x);</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, r + <span class=\"number\">1</span>, -x);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(op == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(l == r)</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;0&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"built_in\">querymax</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, l + <span class=\"number\">1</span>, r));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> a = <span class=\"built_in\">ask</span>(l), b;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(l == r)</span><br><span class=\"line\">\t\t\t\tb = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\t\tb = <span class=\"built_in\">querygcd</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, l + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, __gcd(a, b));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["线段树"]},{"title":"Codeforces 1110F Nearest Leaf dfs + 线段树 + 询问离线","url":"/posts/cc27c76f.html","content":"<h3 id=\"description\">Description:</h3>\n<p>Let's define the Eulerian traversal of a tree (a connected undirected\ngraph without cycles) as follows: consider a depth-first search\nalgorithm which traverses vertices of the tree and enumerates them in\nthe order of visiting (only the first visit of each vertex counts). This\nfunction starts from the vertex number <span\nclass=\"math inline\">\\(1\\)</span> and then recursively runs from all\nvertices which are connected with an edge with the current vertex and\nare not yet visited in increasing numbers order. Formally, you can\ndescribe this function using the following pseudocode: next_id = 1id =\narray of length n filled with -1visited = array of length n filled with\nfalsefunction dfs(v): visited[v] = true id[v] = next_id next_id += 1 for\nto in neighbors of v in increasing order: if not visited[to]: dfs(to)You\nare given a weighted tree, the vertices of which were enumerated with\nintegers from <span class=\"math inline\">\\(1\\)</span> to <span\nclass=\"math inline\">\\(n\\)</span> using the algorithm described above. A\nleaf is a vertex of the tree which is connected with only one other\nvertex. In the tree given to you, the vertex <span\nclass=\"math inline\">\\(1\\)</span> is not a leaf. The distance between two\nvertices in the tree is the sum of weights of the edges on the simple\npath between them. You have to answer <span\nclass=\"math inline\">\\(q\\)</span> queries of the following type: given\nintegers <span class=\"math inline\">\\(v\\)</span>, <span\nclass=\"math inline\">\\(l\\)</span> and <span\nclass=\"math inline\">\\(r\\)</span>, find the shortest distance from vertex\n<span class=\"math inline\">\\(v\\)</span> to one of the leaves with indices\nfrom <span class=\"math inline\">\\(l\\)</span> to <span\nclass=\"math inline\">\\(r\\)</span> inclusive. <span id=\"more\"></span> ### Input: The\nfirst line contains two integers <span class=\"math inline\">\\(n\\)</span>\nand <span class=\"math inline\">\\(q\\)</span> (<span\nclass=\"math inline\">\\(3 \\leq n \\leq 500\\,000, 1 \\leq q \\leq\n500\\,000\\)</span>) — the number of vertices in the tree and the number\nof queries, respectively. The <span class=\"math inline\">\\((i -\n1)\\)</span>-th of the following <span class=\"math inline\">\\(n -\n1\\)</span> lines contains two integers <span\nclass=\"math inline\">\\(p_i\\)</span> and <span\nclass=\"math inline\">\\(w_i\\)</span> (<span class=\"math inline\">\\(1 \\leq\np_i &lt; i, 1 \\leq w_i \\leq 10^9\\)</span>), denoting an edge between\nvertices <span class=\"math inline\">\\(p_i\\)</span> and <span\nclass=\"math inline\">\\(i\\)</span> with the weight <span\nclass=\"math inline\">\\(w_i\\)</span>. It's guaranteed that the given edges\nform a tree and the vertices are enumerated in the Eulerian traversal\norder and that the vertex with index <span\nclass=\"math inline\">\\(1\\)</span> is not a leaf. The next <span\nclass=\"math inline\">\\(q\\)</span> lines describe the queries. Each of\nthem contains three integers <span class=\"math inline\">\\(v_i\\)</span>,\n<span class=\"math inline\">\\(l_i\\)</span>, <span\nclass=\"math inline\">\\(r_i\\)</span> (<span class=\"math inline\">\\(1 \\leq\nv_i \\leq n, 1 \\leq l_i \\leq r_i \\leq n\\)</span>), describing the\nparameters of the query. It is guaranteed that there is at least one\nleaf with index <span class=\"math inline\">\\(x\\)</span> such that <span\nclass=\"math inline\">\\(l_i \\leq x \\leq r_i\\)</span>.</p>\n<h3 id=\"output\">Output</h3>\n<p>Output <span class=\"math inline\">\\(q\\)</span> integers — the answers\nfor the queries in the order they are given in the input.</p>\n<h3 id=\"sample-input\">Sample Input:</h3>\n<p>5 3 1 10 1 1 3 2 3 3 1 1 5 5 4 5 4 1 2</p>\n<h3 id=\"sample-output\">Sample Output:</h3>\n<p>3 0 13</p>\n<h3 id=\"sample-input-1\">Sample Input:</h3>\n<p>5 3 1 1000000000 2 1000000000 1 1000000000 1 1000000000 3 4 5 2 1 5 2\n4 5</p>\n<h3 id=\"sample-output-1\">Sample Output:</h3>\n<p>3000000000 1000000000 2000000000</p>\n<h3 id=\"sample-input-2\">Sample Input:</h3>\n<p>11 8 1 7 2 1 1 20 1 2 5 6 6 2 6 3 5 1 9 10 9 11 5 1 11 1 1 4 9 4 8 6\n1 4 9 7 11 9 10 11 8 1 11 11 4 5</p>\n<h3 id=\"sample-output-2\">Sample Output:</h3>\n<p>8 8 9 16 9 10 0 34</p>\n<h4 id=\"题目链接\"><a\nhref=\"https://codeforces.com/contest/1110/problem/F\">题目链接</a></h4>\n<h3 id=\"题解\">题解:</h3>\n<p>有一颗带边权的树，给定一个方法生成每一个点的<span\nclass=\"math inline\">\\(id\\)</span>（实际上就是<span\nclass=\"math inline\">\\(dfs\\)</span>序），<span\nclass=\"math inline\">\\(q\\)</span>次询问，每次询问距离点<span\nclass=\"math inline\">\\(v\\)</span>最近的<span\nclass=\"math inline\">\\(id\\)</span>在<span\nclass=\"math inline\">\\(l\\)</span>和<span\nclass=\"math inline\">\\(r\\)</span>之间的叶子节点的距离。</p>\n<p>首先考虑固定点<span\nclass=\"math inline\">\\(v\\)</span>怎么做，那么相当于<span\nclass=\"math inline\">\\(q\\)</span>次询问，一次<span\nclass=\"math inline\">\\(dfs\\)</span>即可以处理出所有点到<span\nclass=\"math inline\">\\(v\\)</span>的距离，线段树区间询问最小值就行了</p>\n<p>现在考虑<span\nclass=\"math inline\">\\(v\\)</span>点会变化的情况，考虑<span\nclass=\"math inline\">\\(v-&gt;u\\)</span>这条边，假设现在的<span\nclass=\"math inline\">\\(dis\\)</span>数组记录的是各个点到<span\nclass=\"math inline\">\\(v\\)</span>的距离，那么只要把<span\nclass=\"math inline\">\\(u\\)</span>的子树权值（子树<span\nclass=\"math inline\">\\(dfs\\)</span>序是连续的一段）减去边权，补集加上边权就行了，只要在<span\nclass=\"math inline\">\\(dfs\\)</span>的过程中处理询问就行了，总复杂度<span\nclass=\"math inline\">\\(O((n + q)log(n))\\)</span></p>\n<p>ps:这里有一个trick,修改线段树的时候，可以先全局加上边权，子树减去两倍边权，避免了分三段讨论的情况</p>\n<h3 id=\"ac代码\">AC代码:</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> LL = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">5e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> deg[N], vis[N], id[N][<span class=\"number\">2</span>], cnt, n, q, p, w, v, l, r;</span><br><span class=\"line\">vector&lt; pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; &gt; edge[N];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">query</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> l, r, id;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector&lt;query&gt; Q[N];</span><br><span class=\"line\">LL mn[N &lt;&lt; <span class=\"number\">2</span>], dis[N], lazy[N &lt;&lt; <span class=\"number\">2</span>], ans[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, LL d)</span> </span>&#123;</span><br><span class=\"line\">\tid[rt][<span class=\"number\">0</span>] = ++cnt;</span><br><span class=\"line\">\tdis[rt] = d;</span><br><span class=\"line\">\tvis[rt] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; edge[rt].<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(vis[edge[rt][i].first])</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs</span>(edge[rt][i].first, d + edge[rt][i].second);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tid[rt][<span class=\"number\">1</span>] = cnt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">\tmn[rt] = <span class=\"built_in\">min</span>(mn[rt &lt;&lt; <span class=\"number\">1</span>], mn[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(deg[l] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\t\tmn[rt] = dis[l];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tmn[rt] = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushdown</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(lazy[rt]) &#123;</span><br><span class=\"line\">\t\tlazy[rt &lt;&lt; <span class=\"number\">1</span>] += lazy[rt];</span><br><span class=\"line\">\t\tlazy[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>] += lazy[rt];</span><br><span class=\"line\">\t\tmn[rt &lt;&lt; <span class=\"number\">1</span>] += lazy[rt];</span><br><span class=\"line\">\t\tmn[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>] += lazy[rt];</span><br><span class=\"line\">\t\tlazy[rt] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class=\"line\">\t\tlazy[rt] += val;</span><br><span class=\"line\">\t\tmn[rt] += val;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(mid &gt;= L)</span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, L, R, val);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(mid &lt; R)</span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, L, R, val);</span><br><span class=\"line\">\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mn[rt];</span><br><span class=\"line\">\t<span class=\"built_in\">pushdown</span>(rt);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\tLL ans = <span class=\"number\">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(mid &gt;= L)</span><br><span class=\"line\">\t\tans = <span class=\"built_in\">min</span>(ans, <span class=\"built_in\">get</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, L, R));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(mid &lt; R)</span><br><span class=\"line\">\t\tans = <span class=\"built_in\">min</span>(ans, <span class=\"built_in\">get</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, L, R));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">\tvis[rt] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Q[rt].<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">\t\tans[Q[rt][i].id] = <span class=\"built_in\">get</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, Q[rt][i].l, Q[rt][i].r);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; edge[rt].<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(vis[edge[rt][i].first])</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j = edge[rt][i].first, w = edge[rt][i].second;</span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, id[j][<span class=\"number\">0</span>], id[j][<span class=\"number\">1</span>], -w);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(id[j][<span class=\"number\">0</span>] &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>, id[j][<span class=\"number\">0</span>] - <span class=\"number\">1</span>, w);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(id[j][<span class=\"number\">1</span>] &lt; n)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, id[j][<span class=\"number\">1</span>] + <span class=\"number\">1</span>, n, w);</span><br><span class=\"line\">\t\t<span class=\"built_in\">solve</span>(j);</span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, id[j][<span class=\"number\">0</span>], id[j][<span class=\"number\">1</span>], w);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(id[j][<span class=\"number\">0</span>] &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, <span class=\"number\">1</span>, id[j][<span class=\"number\">0</span>] - <span class=\"number\">1</span>, -w);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(id[j][<span class=\"number\">1</span>] &lt; n)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, id[j][<span class=\"number\">1</span>] + <span class=\"number\">1</span>, n, -w);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;q);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;p, &amp;w);</span><br><span class=\"line\">\t\tedge[i].<span class=\"built_in\">push_back</span>(<span class=\"built_in\">make_pair</span>(p, w));</span><br><span class=\"line\">\t\tedge[p].<span class=\"built_in\">push_back</span>(<span class=\"built_in\">make_pair</span>(i, w));</span><br><span class=\"line\">\t\t++deg[i], ++deg[p];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\t<span class=\"built_in\">sort</span>(edge[i].<span class=\"built_in\">begin</span>(), edge[i].<span class=\"built_in\">end</span>());</span><br><span class=\"line\">\t<span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;v, &amp;l, &amp;r);</span><br><span class=\"line\">\t\tQ[v].<span class=\"built_in\">push_back</span>(&#123;l, r, i&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(vis, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(vis));</span><br><span class=\"line\">\t<span class=\"built_in\">solve</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= q; ++i)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["数据结构","线段树"]},{"title":"Codeforces 1111D Destroy the Colony 退背包+组合数","url":"/posts/33e9b2ae.html","content":"<h3 id=\"description\">Description:</h3>\n<p>There is a colony of villains with several holes aligned in a row,\nwhere each hole contains exactly one villain. Each colony arrangement\ncan be expressed as a string of even length, where the <span\nclass=\"math inline\">\\(i\\)</span>-th character of the string represents\nthe type of villain in the <span class=\"math inline\">\\(i\\)</span>-th\nhole. Iron Man can destroy a colony only if the colony arrangement is\nsuch that all villains of a certain type either live in the first half\nof the colony or in the second half of the colony. His assistant Jarvis\nhas a special power. It can swap villains of any two holes, i.e. swap\nany two characters in the string; he can do this operation any number of\ntimes. Now Iron Man asks Jarvis <span class=\"math inline\">\\(q\\)</span>\nquestions. In each question, he gives Jarvis two numbers <span\nclass=\"math inline\">\\(x\\)</span> and <span\nclass=\"math inline\">\\(y\\)</span>. Jarvis has to tell Iron Man the number\nof distinct colony arrangements he can create from the original one\nusing his powers such that all villains having the same type as those\noriginally living in <span class=\"math inline\">\\(x\\)</span>-th hole or\n<span class=\"math inline\">\\(y\\)</span>-th hole live in the same half and\nthe Iron Man can destroy that colony arrangement. Two colony\narrangements are considered to be different if there exists a hole such\nthat different types of villains are present in that hole in the\narrangements. <span id=\"more\"></span> ### Input: The first line contains a string\n<span class=\"math inline\">\\(s\\)</span> (<span class=\"math inline\">\\(2\n\\le |s| \\le 10^{5}\\)</span>), representing the initial colony\narrangement. String <span class=\"math inline\">\\(s\\)</span> can have both\nlowercase and uppercase English letters and its length is even. The\nsecond line contains a single integer <span\nclass=\"math inline\">\\(q\\)</span> (<span class=\"math inline\">\\(1 \\le q\n\\le 10^{5}\\)</span>) — the number of questions. The <span\nclass=\"math inline\">\\(i\\)</span>-th of the next <span\nclass=\"math inline\">\\(q\\)</span> lines contains two integers <span\nclass=\"math inline\">\\(x_i\\)</span> and <span\nclass=\"math inline\">\\(y_i\\)</span> (<span class=\"math inline\">\\(1 \\le\nx_i, y_i \\le |s|\\)</span>, <span class=\"math inline\">\\(x_i \\ne\ny_i\\)</span>) — the two numbers given to the Jarvis for the <span\nclass=\"math inline\">\\(i\\)</span>-th question.</p>\n<h3 id=\"output\">Output</h3>\n<p>For each question output the number of arrangements possible modulo\n<span class=\"math inline\">\\(10^9+7\\)</span>.</p>\n<h3 id=\"sample-input\">Sample Input:</h3>\n<p>abba 2 1 4 1 2</p>\n<h3 id=\"sample-output\">Sample Output:</h3>\n<p>2 0</p>\n<h3 id=\"sample-input-1\">Sample Input:</h3>\n<p>AAaa 2 1 2 1 3</p>\n<h3 id=\"sample-output-1\">Sample Output:</h3>\n<p>2 0</p>\n<h3 id=\"sample-input-2\">Sample Input:</h3>\n<p>abcd 1 1 3</p>\n<h3 id=\"sample-output-2\">Sample Output:</h3>\n<p>8</p>\n<h4 id=\"题目链接\"><a\nhref=\"https://codeforces.com/contest/1111/problem/D\">题目链接</a></h4>\n<h3 id=\"题解\">题解:</h3>\n<p>有一个长为偶数<span\nclass=\"math inline\">\\(n\\)</span>的字符串，只含大小写字母，你可以任意打乱这个字符串，<span\nclass=\"math inline\">\\(q\\)</span>次询问，每次给一个<span\nclass=\"math inline\">\\(x,\ny\\)</span>，询问满足所有相同字符均在同一半侧（左半侧或右半侧）并且原串中<span\nclass=\"math inline\">\\(x和y\\)</span>这两个位置的字符也均在同一侧的字符串种类数</p>\n<p>首先考虑没有<span class=\"math inline\">\\(xy\\)</span>限制的情况</p>\n<p>假设你选择了<span\nclass=\"math inline\">\\(a\\)</span>种字符，出现次数之和为<span\nclass=\"math inline\">\\(n/2\\)</span>,那这<span\nclass=\"math inline\">\\(a\\)</span>个字符在左边的方案数为<span\nclass=\"math inline\">\\((n/2)! / (\\prod_{i=1}^acnt_i!)\\)</span>,\n右边的字符方案数为<span class=\"math inline\">\\((n / 2)! /\n(所有不在a中的字符的出现次数的阶乘的累乘积)\\)</span>， 总方案数为<span\nclass=\"math inline\">\\(2 \\ast (n/2)! \\ast (n/2)!/ (\\prod_{ch =\n&#39;a&#39;}^{&#39;z&#39;}cnt_{ch}! \\ast \\prod_{ch = &#39;A&#39;} ^\n{&#39;Z&#39;}cnt_{ch}!)\\)</span>，这个数再乘以任选若干个字符总出现次数为<span\nclass=\"math inline\">\\(n/2\\)</span>的方案数的一半就是答案（一半是因为选自身和自身的补集会重复计算）</p>\n<p>现在考虑<span class=\"math inline\">\\(xy\\)</span>，之前的选定<span\nclass=\"math inline\">\\(a\\)</span>的方案数乘以（任选若干个不包括<span\nclass=\"math inline\">\\(x和y\\)</span>的字符总出现次数为<span\nclass=\"math inline\">\\(n/2\\)</span>的方案数）就是答案</p>\n<p>注意到<span class=\"math inline\">\\(xy\\)</span>实际上只有<span\nclass=\"math inline\">\\(52 \\ast\n52\\)</span>种，可以把它们都处理出来，运用退背包的方法可以<span\nclass=\"math inline\">\\(O(52 \\ast 52 \\ast n)\\)</span>处理出答案</p>\n<p>一层退背包：（<span\nclass=\"math inline\">\\(dp[i]\\)</span>表示不做限制次数和为<span\nclass=\"math inline\">\\(i\\)</span>的方案数，<span\nclass=\"math inline\">\\(g[j][i]\\)</span>表示不含<span\nclass=\"math inline\">\\(j\\)</span>和为<span\nclass=\"math inline\">\\(i\\)</span>的方案数）</p>\n<p><span class=\"math display\">\\[g[j][i] = dp[i]\\ \\ \\ (i &lt;\ncnt[j])\\]</span></p>\n<p><span class=\"math display\">\\[g[j][i] = dp[i] - g[j][i - cnt[j]]\\ \\ \\\n(i &gt;= cnt[j])\\]</span></p>\n<p>可以<span class=\"math inline\">\\(O(n \\ast m)\\)</span>处理出所有的<span\nclass=\"math inline\">\\(g\\)</span>, (<span\nclass=\"math inline\">\\(n\\)</span>为物品数，<span\nclass=\"math inline\">\\(m\\)</span>为背包容量)</p>\n<p>实际上用的使用不用再开一个数组<span class=\"math inline\">\\(g\\)</span>,\n从小到大更改<span\nclass=\"math inline\">\\(dp\\)</span>就可以了，处理完再倒着还原</p>\n<h3 id=\"ac代码\">AC代码:</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>, mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">qp</span><span class=\"params\">(<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> a, <span class=\"keyword\">long</span> <span class=\"keyword\">long</span> n, <span class=\"keyword\">int</span> m = mod)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> res = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\tres = res * a % m;</span><br><span class=\"line\">\t\ta = a * a % m;</span><br><span class=\"line\">\t\tn &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> fac[N], inv[N], res[<span class=\"number\">55</span>][<span class=\"number\">55</span>], num, dp[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> cnt[<span class=\"number\">55</span>], q, x, y, n;</span><br><span class=\"line\"><span class=\"keyword\">char</span> s[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">mp</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"string\">&#x27;a&#x27;</span> &lt;= x &amp;&amp; x &lt;= <span class=\"string\">&#x27;z&#x27;</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x - <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> </span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> x - <span class=\"string\">&#x27;A&#x27;</span> + <span class=\"number\">26</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tfac[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; i &lt; N; ++i) </span><br><span class=\"line\">\t\tfac[i] = fac[i - <span class=\"number\">1</span>] * i % mod;</span><br><span class=\"line\">\tinv[N - <span class=\"number\">1</span>] =  <span class=\"built_in\">qp</span>(fac[N - <span class=\"number\">1</span>], mod - <span class=\"number\">2</span>, mod);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = N - <span class=\"number\">2</span>; ~i; --i)</span><br><span class=\"line\">\t\tinv[i] = inv[i + <span class=\"number\">1</span>] * (i + <span class=\"number\">1</span>) % mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s%d&quot;</span>, s, &amp;q);</span><br><span class=\"line\">\tn = <span class=\"built_in\">strlen</span>(s);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\tcnt[<span class=\"built_in\">mp</span>(s[i])]++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tnum = fac[n / <span class=\"number\">2</span>] * fac[n / <span class=\"number\">2</span>] % mod;</span><br><span class=\"line\">\tdp[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">52</span>; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(cnt[i]) &#123;</span><br><span class=\"line\">\t\t\tnum = num * inv[cnt[i]] % mod;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = n; j &gt;= cnt[i]; --j)</span><br><span class=\"line\">\t\t\t\tdp[j] = (dp[j] + dp[j - cnt[i]]) % mod;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">52</span>; ++i) &#123;</span><br><span class=\"line\">\t\tres[i][i] = dp[n / <span class=\"number\">2</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(cnt[i]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = cnt[i]; j &lt;= n; ++j) </span><br><span class=\"line\">\t\t\t\tdp[j] = (dp[j] - dp[j - cnt[i]] + mod) % mod;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = i + <span class=\"number\">1</span>; j &lt; <span class=\"number\">52</span>; ++j) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span>(cnt[j]) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = cnt[j]; k &lt;= n; ++k) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tdp[k] = (dp[k] - dp[k - cnt[j]] + mod) % mod;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\tres[i][j] = res[j][i] = <span class=\"number\">2LL</span> * dp[n / <span class=\"number\">2</span>] % mod;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = n; k &gt;= cnt[j]; --k) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tdp[k] = (dp[k] + dp[k - cnt[j]] + mod) % mod;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = n; j &gt;= cnt[i]; --j) </span><br><span class=\"line\">\t\t\t\tdp[j] = (dp[j] + dp[j - cnt[i]] + mod) % mod;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, num * res[<span class=\"built_in\">mp</span>(s[x - <span class=\"number\">1</span>])][<span class=\"built_in\">mp</span>(s[y - <span class=\"number\">1</span>])] % mod);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["dp","组合数学"]},{"title":"Codeforces 1108F  MST Unification MST + LCA","url":"/posts/be7d02ab.html","content":"<h3 id=\"description\">Description:</h3>\n<p>You are given an undirected weighted connected graph with <span\nclass=\"math inline\">\\(n\\)</span> vertices and <span\nclass=\"math inline\">\\(m\\)</span> edges without loops and multiple edges.\nThe <span class=\"math inline\">\\(i\\)</span>-th edge is <span\nclass=\"math inline\">\\(e_i = (u_i, v_i, w_i)\\)</span>; the distance\nbetween vertices <span class=\"math inline\">\\(u_i\\)</span> and <span\nclass=\"math inline\">\\(v_i\\)</span> along the edge <span\nclass=\"math inline\">\\(e_i\\)</span> is <span\nclass=\"math inline\">\\(w_i\\)</span> (<span class=\"math inline\">\\(1 \\le\nw_i\\)</span>). The graph is connected, i. e. for any pair of vertices,\nthere is at least one path between them consisting only of edges of the\ngiven graph. A minimum spanning tree (MST) in case of positive weights\nis a subset of the edges of a connected weighted undirected graph that\nconnects all the vertices together and has minimum total cost among all\nsuch subsets (total cost is the sum of costs of chosen edges). You can\nmodify the given graph. The only operation you can perform is the\nfollowing: increase the weight of some edge by <span\nclass=\"math inline\">\\(1\\)</span>. You can increase the weight of each\nedge multiple (possibly, zero) times. Suppose that the initial MST cost\nis <span class=\"math inline\">\\(k\\)</span>. Your problem is to increase\nweights of some edges with minimum possible number of operations in such\na way that the cost of MST in the obtained graph remains <span\nclass=\"math inline\">\\(k\\)</span>, but MST is unique (it means that there\nis only one way to choose MST in the obtained graph). Your problem is to\ncalculate the minimum number of operations required to do it.\n<span id=\"more\"></span> ### Input: The first line of the input contains two\nintegers <span class=\"math inline\">\\(n\\)</span> and <span\nclass=\"math inline\">\\(m\\)</span> (<span class=\"math inline\">\\(1 \\le n\n\\le 2 \\cdot 10^5, n - 1 \\le m \\le 2 \\cdot 10^5\\)</span>) — the number of\nvertices and the number of edges in the initial graph. The next <span\nclass=\"math inline\">\\(m\\)</span> lines contain three integers each. The\n<span class=\"math inline\">\\(i\\)</span>-th line contains the description\nof the <span class=\"math inline\">\\(i\\)</span>-th edge <span\nclass=\"math inline\">\\(e_i\\)</span>. It is denoted by three integers\n<span class=\"math inline\">\\(u_i, v_i\\)</span> and <span\nclass=\"math inline\">\\(w_i\\)</span> (<span class=\"math inline\">\\(1 \\le\nu_i, v_i \\le n, u_i \\ne v_i, 1 \\le w \\le 10^9\\)</span>), where <span\nclass=\"math inline\">\\(u_i\\)</span> and <span\nclass=\"math inline\">\\(v_i\\)</span> are vertices connected by the <span\nclass=\"math inline\">\\(i\\)</span>-th edge and <span\nclass=\"math inline\">\\(w_i\\)</span> is the weight of this edge. It is\nguaranteed that the given graph doesn't contain loops and multiple edges\n(i.e. for each <span class=\"math inline\">\\(i\\)</span> from <span\nclass=\"math inline\">\\(1\\)</span> to <span\nclass=\"math inline\">\\(m\\)</span> <span class=\"math inline\">\\(u_i \\ne\nv_i\\)</span> and for each unordered pair of vertices <span\nclass=\"math inline\">\\((u, v)\\)</span> there is at most one edge\nconnecting this pair of vertices). It is also guaranteed that the given\ngraph is connected.</p>\n<h3 id=\"output\">Output</h3>\n<p>Print one integer — the minimum number of operations to unify MST of\nthe initial graph without changing the cost of MST.</p>\n<h3 id=\"sample-input\">Sample Input:</h3>\n<p>8 10 1 2 1 2 3 2 2 4 5 1 4 2 6 3 3 6 1 3 3 5 2 3 7 1 4 8 1 6 2 4</p>\n<h3 id=\"sample-output\">Sample Output:</h3>\n<p>1</p>\n<h3 id=\"sample-input-1\">Sample Input:</h3>\n<p>4 3 2 1 3 4 3 4 2 4 1</p>\n<h3 id=\"sample-output-1\">Sample Output:</h3>\n<p>0</p>\n<h3 id=\"sample-input-2\">Sample Input:</h3>\n<p>3 3 1 2 1 2 3 2 1 3 3</p>\n<h3 id=\"sample-output-2\">Sample Output:</h3>\n<p>0</p>\n<h3 id=\"sample-input-3\">Sample Input:</h3>\n<p>3 3 1 2 1 2 3 3 1 3 3</p>\n<h3 id=\"sample-output-3\">Sample Output:</h3>\n<p>1</p>\n<h3 id=\"sample-input-4\">Sample Input:</h3>\n<p>1 0</p>\n<h3 id=\"sample-output-4\">Sample Output:</h3>\n<p>0</p>\n<h3 id=\"sample-input-5\">Sample Input:</h3>\n<p>5 6 1 2 2 2 3 1 4 5 3 2 4 2 1 4 2 1 5 3</p>\n<h3 id=\"sample-output-5\">Sample Output:</h3>\n<p>2</p>\n<h4 id=\"题目链接\"><a\nhref=\"https://codeforces.com/contest/1108/problem/F\">题目链接</a></h4>\n<h3 id=\"题解\">题解:</h3>\n<p>你有一个图，你可以增加某些边的边权使得这张图的最小生成树变成唯一的并保持最小生成树权值和不变，要求最小化边权增加量</p>\n<p>我的做法:首先随便找一个最小生成树，然后考虑非树边<span\nclass=\"math inline\">\\((x, y, val)\\)</span>, 如果<span\nclass=\"math inline\">\\(x到y\\)</span>的最小生成树上唯一路径的边权最大值等于<span\nclass=\"math inline\">\\(val\\)</span>,那么这条非树边的边权要增加<span\nclass=\"math inline\">\\(1\\)</span>,\n因为这条边会导致非唯一的最小生成树，然后我就写了个树链剖分......总复杂度<span\nclass=\"math inline\">\\(O(mlogm + m log^2n)\\)</span>,\n但是这道题没有修改，根本用不着树链剖分，只要倍增LCA的时候顺便用一个东西记录路径最大值就好了，我凭空多了一个<span\nclass=\"math inline\">\\(log\\)</span>，跑了<span\nclass=\"math inline\">\\(400ms\\)</span></p>\n<p>题解的做法:考虑跑<span\nclass=\"math inline\">\\(kruskal\\)</span>的过程，一次考虑所有边权相同的边，去除那些连接了两个已联通点的边，剩下的边一个个加入，加入失败的边的数量贡献到答案里，复杂度<span\nclass=\"math inline\">\\(O(mlogm)\\)</span>,而且很短,很快，只要<span\nclass=\"math inline\">\\(100ms\\)</span></p>\n<h3 id=\"我的做法ac代码\">我的做法AC代码:</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> head[N], pnt[N &lt;&lt; <span class=\"number\">1</span>], nxt[N &lt;&lt; <span class=\"number\">1</span>], val[N &lt;&lt; <span class=\"number\">1</span>], cnt;</span><br><span class=\"line\">map&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; vis[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dep[N], dfn[N], top[N], fa[N], son[N], rnk[N], size[N], clk;</span><br><span class=\"line\"><span class=\"keyword\">int</span> mx[N &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">edge</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x, y, v;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> edge &amp;rhs) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> v &lt; rhs.v;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">adjust</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(dep[x] &gt; dep[y])</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(x, y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;seg[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> dsu[N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">\tpnt[cnt] = y;</span><br><span class=\"line\">\tval[cnt] = v;</span><br><span class=\"line\">\tnxt[cnt] = head[x];</span><br><span class=\"line\">\thead[x] = cnt++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dsu[x] == x ? x : dsu[x] = <span class=\"built_in\">find</span>(dsu[x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">unite</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> fx = <span class=\"built_in\">find</span>(x), fy = <span class=\"built_in\">find</span>(y);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(fx != fy)</span><br><span class=\"line\">\t\tdsu[fx] = fy;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">kruskal</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> res = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(seg + <span class=\"number\">1</span>, seg + m + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\tdsu[i] = i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">find</span>(seg[i].x) == <span class=\"built_in\">find</span>(seg[i].y)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\tvis[seg[i].x][seg[i].y] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tvis[seg[i].y][seg[i].x] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">unite</span>(seg[i].x, seg[i].y);</span><br><span class=\"line\">\t\tres += seg[i].v;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> pre, <span class=\"keyword\">int</span> depth)</span> </span>&#123;</span><br><span class=\"line\">\tdep[rt] = depth;</span><br><span class=\"line\">\tson[rt] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\tsize[rt] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tfa[rt] = pre;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = head[rt]; ~i; i = nxt[i]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j = pnt[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(j == pre) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!vis[rt].<span class=\"built_in\">count</span>(j)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs1</span>(j, rt, depth + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tsize[rt] += size[j];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(son[rt] == <span class=\"number\">-1</span> || size[j] &gt; size[son[rt]])</span><br><span class=\"line\">\t\t\tson[rt] = j;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> t)</span> </span>&#123;</span><br><span class=\"line\">\ttop[rt] = t;</span><br><span class=\"line\">\tdfn[rt] = clk;</span><br><span class=\"line\">\trnk[clk] = rt;</span><br><span class=\"line\">\tclk++;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(son[rt] == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">dfs2</span>(son[rt], t);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = head[rt]; ~i; i = nxt[i]) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> j = pnt[i];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(j == fa[rt] || j == son[rt]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!vis[rt].<span class=\"built_in\">count</span>(j)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">dfs2</span>(j, j);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">\tmx[rt] = <span class=\"built_in\">max</span>(mx[rt &lt;&lt; <span class=\"number\">1</span>], mx[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\tmx[rt] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> pos, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">\t\tmx[rt] = val;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pos &lt;= mid)</span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, pos, val);</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, pos, val);</span><br><span class=\"line\">\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> mx[rt];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>, ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= mid)</span><br><span class=\"line\">\t\tans = <span class=\"built_in\">max</span>(ans, <span class=\"built_in\">query</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, L, R));</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(mid &lt; R)</span><br><span class=\"line\">\t\tans = <span class=\"built_in\">max</span>(ans, <span class=\"built_in\">query</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, L, R));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ask</span><span class=\"params\">(<span class=\"keyword\">int</span> a, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> ans = <span class=\"number\">0</span>, ta = top[a], tb = top[b];</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(ta != tb) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(dep[ta] &lt; dep[tb])</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">swap</span>(ta, tb), <span class=\"built_in\">swap</span>(a, b);</span><br><span class=\"line\">\t\tans = <span class=\"built_in\">max</span>(ans, <span class=\"built_in\">query</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, dfn[ta], dfn[a]));</span><br><span class=\"line\">\t\ta = fa[ta];</span><br><span class=\"line\">\t\tta = top[a];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(a == b) <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(dep[a] &gt; dep[b]) <span class=\"built_in\">swap</span>(a, b);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(ans, <span class=\"built_in\">query</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, dfn[son[a]], dfn[b]));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">input</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(head));</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;seg[i].x, &amp;seg[i].y, &amp;seg[i].v);</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(seg[i].x, seg[i].y, seg[i].v);</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(seg[i].y, seg[i].x, seg[i].v);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tclk = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">kruskal</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">dfs1</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">dfs2</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!vis[seg[i].x].<span class=\"built_in\">count</span>(seg[i].y)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\tseg[i].<span class=\"built_in\">adjust</span>();</span><br><span class=\"line\">\t\t<span class=\"built_in\">update</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, dfn[seg[i].y], seg[i].v);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(vis[seg[i].x].<span class=\"built_in\">count</span>(seg[i].y)) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\tans += seg[i].v == <span class=\"built_in\">ask</span>(seg[i].x, seg[i].y);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">input</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">init</span>();</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, <span class=\"built_in\">solve</span>());</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"题解做法ac代码\">题解做法AC代码:</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">2e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">e</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> x, y, v;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> e &amp;rhs) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> v &lt; rhs.v;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;edges[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> dsu[N], n, m, ans, cnt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"keyword\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> x == dsu[x] ? x : dsu[x] = <span class=\"built_in\">find</span>(dsu[x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">unite</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> fx = <span class=\"built_in\">find</span>(x), fy = <span class=\"built_in\">find</span>(y);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(fx == fy)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">\tdsu[fx] = fy;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i)</span><br><span class=\"line\">\t\tdsu[i] = i;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) </span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;edges[i].x, &amp;edges[i].y, &amp;edges[i].v);</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(edges + <span class=\"number\">1</span>, edges + m + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\tj = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(j &lt;= m &amp;&amp; edges[j].v == edges[i].v) </span><br><span class=\"line\">\t\t\t++j;</span><br><span class=\"line\">\t\tcnt = j - i;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = i; k &lt; j; ++k) </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(<span class=\"built_in\">find</span>(edges[k].x) == <span class=\"built_in\">find</span>(edges[k].y))</span><br><span class=\"line\">\t\t\t\t--cnt;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k = i; k &lt; j; ++k)</span><br><span class=\"line\">\t\t\tcnt -= <span class=\"built_in\">unite</span>(edges[k].x, edges[k].y);</span><br><span class=\"line\">\t\tans += cnt;</span><br><span class=\"line\">\t\ti = j - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["最小生成树"]},{"title":"Codeforces 1108E2  Array and Segments (Hard version) 差分, 暴力","url":"/posts/e382afad.html","content":"<h3 id=\"description\">Description:</h3>\n<p>The only difference between easy and hard versions is a number of\nelements in the array. You are given an array <span\nclass=\"math inline\">\\(a\\)</span> consisting of <span\nclass=\"math inline\">\\(n\\)</span> integers. The value of the <span\nclass=\"math inline\">\\(i\\)</span>-th element of the array is <span\nclass=\"math inline\">\\(a_i\\)</span>. You are also given a set of <span\nclass=\"math inline\">\\(m\\)</span> segments. The <span\nclass=\"math inline\">\\(j\\)</span>-th segment is <span\nclass=\"math inline\">\\([l_j; r_j]\\)</span>, where <span\nclass=\"math inline\">\\(1 \\le l_j \\le r_j \\le n\\)</span>. You can choose\nsome subset of the given set of segments and decrease values on each of\nthe chosen segments by one (independently). For example, if the initial\narray <span class=\"math inline\">\\(a = [0, 0, 0, 0, 0]\\)</span> and the\ngiven segments are <span class=\"math inline\">\\([1; 3]\\)</span> and <span\nclass=\"math inline\">\\([2; 4]\\)</span> then you can choose both of them\nand the array will become <span class=\"math inline\">\\(b = [-1, -2, -2,\n-1, 0]\\)</span>. You have to choose some subset of the given segments\n(each segment can be chosen at most once) in such a way that if you\napply this subset of segments to the array <span\nclass=\"math inline\">\\(a\\)</span> and obtain the array <span\nclass=\"math inline\">\\(b\\)</span> then the value <span\nclass=\"math inline\">\\(\\max\\limits_{i=1}^{n}b_i -\n\\min\\limits_{i=1}^{n}b_i\\)</span> will be maximum possible. Note that\nyou can choose the empty set. If there are multiple answers, you can\nprint any. If you are Python programmer, consider using PyPy instead of\nPython when you submit your code. <span id=\"more\"></span> ### Input: The first\nline of the input contains two integers <span\nclass=\"math inline\">\\(n\\)</span> and <span\nclass=\"math inline\">\\(m\\)</span> (<span class=\"math inline\">\\(1 \\le n\n\\le 10^5, 0 \\le m \\le 300\\)</span>) — the length of the array <span\nclass=\"math inline\">\\(a\\)</span> and the number of segments,\nrespectively. The second line of the input contains <span\nclass=\"math inline\">\\(n\\)</span> integers <span\nclass=\"math inline\">\\(a_1, a_2, \\dots, a_n\\)</span> (<span\nclass=\"math inline\">\\(-10^6 \\le a_i \\le 10^6\\)</span>), where <span\nclass=\"math inline\">\\(a_i\\)</span> is the value of the <span\nclass=\"math inline\">\\(i\\)</span>-th element of the array <span\nclass=\"math inline\">\\(a\\)</span>. The next <span\nclass=\"math inline\">\\(m\\)</span> lines are contain two integers each.\nThe <span class=\"math inline\">\\(j\\)</span>-th of them contains two\nintegers <span class=\"math inline\">\\(l_j\\)</span> and <span\nclass=\"math inline\">\\(r_j\\)</span> (<span class=\"math inline\">\\(1 \\le\nl_j \\le r_j \\le n\\)</span>), where <span\nclass=\"math inline\">\\(l_j\\)</span> and <span\nclass=\"math inline\">\\(r_j\\)</span> are the ends of the <span\nclass=\"math inline\">\\(j\\)</span>-th segment.</p>\n<h3 id=\"output\">Output</h3>\n<p>In the first line of the output print one integer <span\nclass=\"math inline\">\\(d\\)</span> — the maximum possible value <span\nclass=\"math inline\">\\(\\max\\limits_{i=1}^{n}b_i -\n\\min\\limits_{i=1}^{n}b_i\\)</span> if <span\nclass=\"math inline\">\\(b\\)</span> is the array obtained by applying some\nsubset of the given segments to the array <span\nclass=\"math inline\">\\(a\\)</span>. In the second line of the output print\none integer <span class=\"math inline\">\\(q\\)</span> (<span\nclass=\"math inline\">\\(0 \\le q \\le m\\)</span>) — the number of segments\nyou apply. In the third line print <span\nclass=\"math inline\">\\(q\\)</span> distinct integers <span\nclass=\"math inline\">\\(c_1, c_2, \\dots, c_q\\)</span> in any order (<span\nclass=\"math inline\">\\(1 \\le c_k \\le m\\)</span>) — indices of segments\nyou apply to the array <span class=\"math inline\">\\(a\\)</span> in such a\nway that the value <span class=\"math inline\">\\(\\max\\limits_{i=1}^{n}b_i\n- \\min\\limits_{i=1}^{n}b_i\\)</span> of the obtained array <span\nclass=\"math inline\">\\(b\\)</span> is maximum possible. If there are\nmultiple answers, you can print any.</p>\n<h3 id=\"sample-input\">Sample Input:</h3>\n<p>5 4 2 -2 3 1 2 1 3 4 5 2 5 1 3</p>\n<h3 id=\"sample-output\">Sample Output:</h3>\n<p>6 2 4 1</p>\n<h3 id=\"sample-input-1\">Sample Input:</h3>\n<p>5 4 2 -2 3 1 4 3 5 3 4 2 4 2 5</p>\n<h3 id=\"sample-output-1\">Sample Output:</h3>\n<p>7 2 3 2</p>\n<h3 id=\"sample-input-2\">Sample Input:</h3>\n<p>1 0 1000000</p>\n<h3 id=\"sample-output-2\">Sample Output:</h3>\n<p>0 0</p>\n<h4 id=\"题目链接\"><a\nhref=\"https://codeforces.com/contest/1108/problem/E2\">题目链接</a></h4>\n<h3 id=\"题解\">题解:</h3>\n<p>有一个长为<span class=\"math inline\">\\(n\\)</span>的数列,有<span\nclass=\"math inline\">\\(m\\)</span>个线段，每个线段将该线段区间的所有数减一，你可以选任意个线段，要求最大化极差并输出一种方案</p>\n<p>这种极差的题一个套路是固定最大值求最小值</p>\n<p>那么我们可以枚举每一个数作为最大值的方案，对不包含这个数的线段进行操作，然后找最大最小值即可，利用差分的思想单次操作可以<span\nclass=\"math inline\">\\(O(1)\\)</span>,最后查询极值<span\nclass=\"math inline\">\\(O(n)\\)</span>,这样我们就找到了一个<span\nclass=\"math inline\">\\(O(n^2)\\)</span>的优秀算法，可以通过这题的简单版本</p>\n<p>然后我们注意到线段数很少，只有<span\nclass=\"math inline\">\\(300\\)</span>个，那么我们可以将原数列分为至多<span\nclass=\"math inline\">\\(600\\)</span>段，每一段的数作为最大值时策略是相同的，我们就的到了<span\nclass=\"math inline\">\\(O(n \\cdot m\n+m^2)\\)</span>的算法，cf机子上跑得飞快</p>\n<p>另外，可以用线段树加速操作得到<span\nclass=\"math inline\">\\(O(mlog(n))\\)</span>的做法</p>\n<p>甚至可以将<span class=\"math inline\">\\(n\\)</span>也变成<span\nclass=\"math inline\">\\(m\\)</span>,因为我们只关心每一段的极值，可以把原数列切成至多<span\nclass=\"math inline\">\\(600\\)</span>段，每一段记录最大最小值即可，复杂度为<span\nclass=\"math inline\">\\(O(m^2)\\)</span>,\n不知道为什么评论指出这个算法的老哥的代码跑的还没我<span\nclass=\"math inline\">\\(O(n \\cdot m + m^2)\\)</span>快...</p>\n<h3 id=\"ac代码\">AC代码:</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>, M = <span class=\"number\">310</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, a[N], b[N], ans, l[M], r[M], m, rec, cnt;</span><br><span class=\"line\">set&lt;<span class=\"keyword\">int</span>&gt; key;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) </span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;l[i], &amp;r[i]);</span><br><span class=\"line\">\t\tkey.<span class=\"built_in\">insert</span>(l[i]);</span><br><span class=\"line\">\t\tkey.<span class=\"built_in\">insert</span>(r[i] + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tans = *<span class=\"built_in\">max_element</span>(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>) - *<span class=\"built_in\">min_element</span>(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>);\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> it = key.<span class=\"built_in\">begin</span>(); it != key.<span class=\"built_in\">end</span>(); ++it) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = *it; ++cnt;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(b, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(b));</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mx = <span class=\"number\">-1e9</span>, mn = <span class=\"number\">1e9</span>, sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; ++j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(l[j] &lt;= i &amp;&amp; i &lt;= r[j]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\tb[l[j]]--, b[r[j] + <span class=\"number\">1</span>]++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j) &#123;</span><br><span class=\"line\">\t\t\tsum += b[j];</span><br><span class=\"line\">\t\t\tmx = <span class=\"built_in\">max</span>(mx, a[j] + sum);</span><br><span class=\"line\">\t\t\tmn = <span class=\"built_in\">min</span>(mn, a[j] + sum);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mx - mn &gt; ans) &#123;</span><br><span class=\"line\">\t\t\trec = i;</span><br><span class=\"line\">\t\t\tans = mx - mn;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(rec) &#123;</span><br><span class=\"line\">\t\tvector&lt;<span class=\"keyword\">int</span>&gt; res;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(l[i] &lt;= rec &amp;&amp; rec &lt;= r[i]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\tres.<span class=\"built_in\">push_back</span>(i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, (<span class=\"keyword\">int</span>)res.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; res.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d%c&quot;</span>, res[i], <span class=\"string\">&quot; \\n&quot;</span>[i == res.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">puts</span>(<span class=\"string\">&quot;0\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["线段树"]},{"title":"Codeforces 1107G Vasya and Maximum Profit 线段树最大子段和 + 单调栈","url":"/posts/98ecd337.html","content":"<h3 id=\"description\">Description:</h3>\n<p>Vasya got really tired of these credits (from problem F) and now\nwants to earn the money himself! He decided to make a contest to gain a\nprofit. Vasya has <span class=\"math inline\">\\(n\\)</span> problems to\nchoose from. They are numbered from <span\nclass=\"math inline\">\\(1\\)</span> to <span\nclass=\"math inline\">\\(n\\)</span>. The difficulty of the <span\nclass=\"math inline\">\\(i\\)</span>-th problem is <span\nclass=\"math inline\">\\(d_i\\)</span>. Moreover, the problems are given in\nthe increasing order by their difficulties. The difficulties of all\ntasks are pairwise distinct. In order to add the <span\nclass=\"math inline\">\\(i\\)</span>-th problem to the contest you need to\npay <span class=\"math inline\">\\(c_i\\)</span> burles to its author. For\neach problem in the contest Vasya gets <span\nclass=\"math inline\">\\(a\\)</span> burles. In order to create a contest he\nneeds to choose a consecutive subsegment of tasks. So the total earnings\nfor the contest are calculated as follows: if Vasya takes problem <span\nclass=\"math inline\">\\(i\\)</span> to the contest, he needs to pay <span\nclass=\"math inline\">\\(c_i\\)</span> to its author; for each problem in\nthe contest Vasya gets <span class=\"math inline\">\\(a\\)</span> burles;\nlet <span class=\"math inline\">\\(gap(l, r) = \\max\\limits_{l \\le i &lt; r}\n(d_{i + 1} - d_i)^2\\)</span>. If Vasya takes all the tasks with indices\nfrom <span class=\"math inline\">\\(l\\)</span> to <span\nclass=\"math inline\">\\(r\\)</span> to the contest, he also needs to pay\n<span class=\"math inline\">\\(gap(l, r)\\)</span>. If <span\nclass=\"math inline\">\\(l = r\\)</span> then <span\nclass=\"math inline\">\\(gap(l, r) = 0\\)</span>. Calculate the maximum\nprofit that Vasya can earn by taking a consecutive segment of tasks.\n<span id=\"more\"></span> ### Input: The first line contains two integers <span\nclass=\"math inline\">\\(n\\)</span> and <span\nclass=\"math inline\">\\(a\\)</span> (<span class=\"math inline\">\\(1 \\le n\n\\le 3 \\cdot 10^5\\)</span>, <span class=\"math inline\">\\(1 \\le a \\le\n10^9\\)</span>) — the number of proposed tasks and the profit for a\nsingle problem, respectively. Each of the next <span\nclass=\"math inline\">\\(n\\)</span> lines contains two integers <span\nclass=\"math inline\">\\(d_i\\)</span> and <span\nclass=\"math inline\">\\(c_i\\)</span> (<span class=\"math inline\">\\(1 \\le\nd_i, c_i \\le 10^9, d_i &lt; d_{i+1}\\)</span>).</p>\n<h3 id=\"output\">Output</h3>\n<p>Print one integer — maximum amount of burles Vasya can earn.</p>\n<h3 id=\"sample-input\">Sample Input:</h3>\n<p>5 10 1 15 5 3 6 11 7 2 11 22</p>\n<h3 id=\"sample-output\">Sample Output:</h3>\n<p>13</p>\n<h3 id=\"sample-input-1\">Sample Input:</h3>\n<p>3 5 1 8 2 19 3 11</p>\n<h3 id=\"sample-output-1\">Sample Output:</h3>\n<p>0</p>\n<h4 id=\"题目链接\"><a\nhref=\"https://codeforces.com/contest/1107/problem/G\">题目链接</a></h4>\n<h3 id=\"题解\">题解:</h3>\n<p>你现在有一个题库，里面有<span\nclass=\"math inline\">\\(n\\)</span>道题，每道题难度为<span\nclass=\"math inline\">\\(d_i\\)</span>， 保证<span\nclass=\"math inline\">\\(d_i\\)</span>严格单调增，你现在需要从中选择出一个连续子段的题来组成一场比赛，比赛每有一道题你能获得<span\nclass=\"math inline\">\\(a\\)</span>的收益，但需要给作者支付<span\nclass=\"math inline\">\\(c_i\\)</span>的费用，除此以外，你还需要支付相邻两道题的难度的差值的平方的最大值的费用（可能题目难度跨度过大会引起不满233）</p>\n<p>形式话的说，如果你选择了<span class=\"math inline\">\\(l\\)</span>到<span\nclass=\"math inline\">\\(r\\)</span>的题目，最后总收益为<span\nclass=\"math inline\">\\(a \\cdot (r-l+1)-\\sum_l^rc_i-\\max\\limits_{l\\le i\\lt\nr}(d[i+1]-d[i])^2\\)</span>, 特别地如果<span\nclass=\"math inline\">\\(l=r\\)</span>,则第三项为0</p>\n<p>首先考虑前两项，显然每道题的收益为<span\nclass=\"math inline\">\\(a-c_i\\)</span>,如果没有第三项那就是一个最大子段和问题</p>\n<p>现在考虑第三项，设<span class=\"math inline\">\\(diff[i] = d[i + 1] -\nd[i]\\)</span>,只有<span\nclass=\"math inline\">\\(n-1\\)</span>项，考虑这<span\nclass=\"math inline\">\\(n-1\\)</span>项分别作为最大值的的区间，就是左边下标最大的比它大的和右边下标最小的比它大的中间的区间即为<span\nclass=\"math inline\">\\(diff[i]\\)</span>作为最大值的区间,这个可以用单调栈<span\nclass=\"math inline\">\\(O(n)\\)</span>处理出来，然后用线段树跑<span\nclass=\"math inline\">\\(n-1\\)</span>次最大子段和就行了,总复杂度为<span\nclass=\"math inline\">\\(O(nlog(n))\\)</span></p>\n<p>ps:这里有一个问题，就是对于<span\nclass=\"math inline\">\\(diff[i]\\)</span>跑最大子段和时跑出来的区间不一定包含<span\nclass=\"math inline\">\\(i\\)</span>，但这题不是问题，因为要减去<span\nclass=\"math inline\">\\(diff[i]^2\\)</span>，不包含的话只会获得更小的值（设该区间<span\nclass=\"math inline\">\\(diff\\)</span>最大值为<span\nclass=\"math inline\">\\(diff[j]\\)</span>,显然<span\nclass=\"math inline\">\\(diff[j] \\le diff[i]\\)</span>,在处理以<span\nclass=\"math inline\">\\(diff[j]\\)</span>为最大值的区间时可以获得更大的收益)，如果一定要包含那就线段树改成询问<span\nclass=\"math inline\">\\(l\\)</span>到<span\nclass=\"math inline\">\\(i\\)</span>的包含右端点的最大值和<span\nclass=\"math inline\">\\(i+1\\)</span>到<span\nclass=\"math inline\">\\(r\\)</span>的包含左端点的最大值（可以为空）加起来就行了</p>\n<p>pps:还有就是整场比赛只有一道题(没有<span\nclass=\"math inline\">\\(diff\\)</span>)，直接<span\nclass=\"math inline\">\\(O(n)\\)</span>处理出来就行了</p>\n<h3 id=\"ac代码\">AC代码:</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> LL = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">3e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">tree</span> &#123;</span></span><br><span class=\"line\">\tLL sum, rmx, lmx, mx;</span><br><span class=\"line\">&#125;sgt[N &lt;&lt; <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> c[N], d[N], diff[N], a, n, l[N], r[N];</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">pushup</span><span class=\"params\">(<span class=\"keyword\">int</span> rt)</span> </span>&#123;</span><br><span class=\"line\">\tsgt[rt].sum = sgt[rt &lt;&lt; <span class=\"number\">1</span>].sum + sgt[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum;</span><br><span class=\"line\">\tsgt[rt].mx = <span class=\"built_in\">max</span>(sgt[rt &lt;&lt; <span class=\"number\">1</span>].mx, sgt[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].mx);</span><br><span class=\"line\">\tsgt[rt].lmx = <span class=\"built_in\">max</span>(sgt[rt &lt;&lt; <span class=\"number\">1</span>].lmx, sgt[rt &lt;&lt; <span class=\"number\">1</span>].sum + sgt[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].lmx);</span><br><span class=\"line\">\tsgt[rt].rmx = <span class=\"built_in\">max</span>(sgt[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].rmx, sgt[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].sum + sgt[rt &lt;&lt; <span class=\"number\">1</span>].rmx);</span><br><span class=\"line\">\tsgt[rt].mx = <span class=\"built_in\">max</span>(sgt[rt].mx, sgt[rt &lt;&lt; <span class=\"number\">1</span>].rmx + sgt[rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>].lmx);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">\t\tsgt[rt].sum = sgt[rt].lmx = sgt[rt].rmx = sgt[rt].mx = c[l];</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">\t<span class=\"built_in\">pushup</span>(rt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">tree <span class=\"title\">query</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R) <span class=\"keyword\">return</span> sgt[rt];</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(R &lt;= mid) <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, L, R);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &gt; mid)  <span class=\"keyword\">return</span> <span class=\"built_in\">query</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, L, R);</span><br><span class=\"line\">\ttree u = <span class=\"built_in\">query</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, L, R), v = <span class=\"built_in\">query</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, L, R), o;</span><br><span class=\"line\">\to.sum = u.sum + v.sum;</span><br><span class=\"line\">\to.mx = <span class=\"built_in\">max</span>(u.mx, v.mx);</span><br><span class=\"line\">\to.mx = <span class=\"built_in\">max</span>(o.mx, u.rmx + v.lmx);</span><br><span class=\"line\">\to.lmx = <span class=\"built_in\">max</span>(u.lmx, u.sum + v.lmx);</span><br><span class=\"line\">\to.rmx = <span class=\"built_in\">max</span>(v.rmx, v.sum + u.rmx);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> val, id;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d %d&quot;</span>, &amp;n, &amp;a);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;d[i], &amp;c[i]);</span><br><span class=\"line\">\t\tc[i] = a - c[i];</span><br><span class=\"line\">\t\tans = <span class=\"built_in\">max</span>(ans, <span class=\"number\">1LL</span> * c[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i)</span><br><span class=\"line\">\t\tdiff[i] = d[i + <span class=\"number\">1</span>] - d[i];</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">\tstack&lt;node&gt; stk;</span><br><span class=\"line\">\tstk.<span class=\"built_in\">push</span>(&#123;(<span class=\"keyword\">int</span>)<span class=\"number\">1e9</span>, <span class=\"number\">0</span>&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(stk.<span class=\"built_in\">top</span>().val &lt;= diff[i])</span><br><span class=\"line\">\t\t\tstk.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\tl[i] = stk.<span class=\"built_in\">top</span>().id + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tstk.<span class=\"built_in\">push</span>(&#123;diff[i], i&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!stk.<span class=\"built_in\">empty</span>()) stk.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\tstk.<span class=\"built_in\">push</span>(&#123;(<span class=\"keyword\">int</span>)<span class=\"number\">1e9</span>, n&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n - <span class=\"number\">1</span>; i; --i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(stk.<span class=\"built_in\">top</span>().val &lt;= diff[i])</span><br><span class=\"line\">\t\t\tstk.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\tr[i] = stk.<span class=\"built_in\">top</span>().id;</span><br><span class=\"line\">\t\tstk.<span class=\"built_in\">push</span>(&#123;diff[i], i&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\tans = <span class=\"built_in\">max</span>(ans, <span class=\"built_in\">query</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, l[i], r[i]).mx - <span class=\"number\">1LL</span> * diff[i] * diff[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["数据结构","线段树","单调栈"]},{"title":"Codeforces 1107E Vasya and Binary String 记忆化dp","url":"/posts/32a1b255.html","content":"<h3 id=\"description\">Description:</h3>\n<p>Vasya has a string <span class=\"math inline\">\\(s\\)</span> of length\n<span class=\"math inline\">\\(n\\)</span> consisting only of digits 0 and\n1. Also he has an array <span class=\"math inline\">\\(a\\)</span> of length\n<span class=\"math inline\">\\(n\\)</span>. Vasya performs the following\noperation until the string becomes empty: choose some consecutive\nsubstring of equal characters, erase it from the string and glue\ntogether the remaining parts (any of them can be empty). For example, if\nhe erases substring 111 from string 111110 he will get the string 110.\nVasya gets <span class=\"math inline\">\\(a_x\\)</span> points for erasing\nsubstring of length <span class=\"math inline\">\\(x\\)</span>. Vasya wants\nto maximize his total points, so help him with this! <span id=\"more\"></span> ###\nInput: The first line contains one integer <span\nclass=\"math inline\">\\(n\\)</span> (<span class=\"math inline\">\\(1 \\le n\n\\le 100\\)</span>) — the length of string <span\nclass=\"math inline\">\\(s\\)</span>. The second line contains string <span\nclass=\"math inline\">\\(s\\)</span>, consisting only of digits 0 and 1. The\nthird line contains <span class=\"math inline\">\\(n\\)</span> integers\n<span class=\"math inline\">\\(a_1, a_2, \\dots a_n\\)</span> (<span\nclass=\"math inline\">\\(1 \\le a_i \\le 10^9\\)</span>), where <span\nclass=\"math inline\">\\(a_i\\)</span> is the number of points for erasing\nthe substring of length <span class=\"math inline\">\\(i\\)</span>.</p>\n<h3 id=\"output\">Output</h3>\n<p>Print one integer — the maximum total points Vasya can get.</p>\n<h3 id=\"sample-input\">Sample Input:</h3>\n<p>7 1101001 3 4 9 100 1 2 3</p>\n<h3 id=\"sample-output\">Sample Output:</h3>\n<p>109</p>\n<h3 id=\"sample-input-1\">Sample Input:</h3>\n<p>5 10101 3 10 15 15 15</p>\n<h3 id=\"sample-output-1\">Sample Output:</h3>\n<p>23</p>\n<h4 id=\"题目链接\"><a\nhref=\"https://codeforces.com/contest/1107/problem/E\">题目链接</a></h4>\n<h3 id=\"题解\">题解:</h3>\n<p>你有一个长为n的01串，每次可以消去长度为<span\nclass=\"math inline\">\\(len​\\)</span>的连续相同字符，收益为<span\nclass=\"math inline\">\\(a_{len}​\\)</span>,求消去整个串的收益最大值</p>\n<p>记忆化dp</p>\n<p>设<span class=\"math inline\">\\(dp[0,1][l][r][cnt]\\)</span>代表把<span\nclass=\"math inline\">\\(l\\)</span>到<span\nclass=\"math inline\">\\(r\\)</span>删除到只剩下<span\nclass=\"math inline\">\\(cnt\\)</span>个0或1的最大收益，<span\nclass=\"math inline\">\\(ans[l][r]\\)</span>代表把<span\nclass=\"math inline\">\\(l\\)</span>到<span\nclass=\"math inline\">\\(r\\)</span>删完的最大收益</p>\n<p>转移方程为<span class=\"math inline\">\\(ans[l][r] = \\max_{cnt =\n1}^{r-l+1}(a[cnt] + dp[0,1][l][r][cnt])\\)</span>,<span\nclass=\"math inline\">\\(dp[c][l][r][cnt] = \\max_{s[i] = c, i = l}^{r -\n1}(ans[l][i-1] + dp[c][i+1][r][cnt-1])\\)</span>,cnt=1时特判一下</p>\n<p>状态数为<span class=\"math inline\">\\(O(n^3)\\)</span>,转移为<span\nclass=\"math inline\">\\(O(n)\\)</span>,总复杂度为<span\nclass=\"math inline\">\\(O(n^4)\\)</span></p>\n<h3 id=\"ac代码\">AC代码:</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">102</span>;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> dp[<span class=\"number\">2</span>][N][N][N], ans[N][N];</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, a[N];</span><br><span class=\"line\"><span class=\"keyword\">char</span> s[N]; </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">calcdp</span><span class=\"params\">(<span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> cnt)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">calcans</span><span class=\"params\">(<span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l &gt; r) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> &amp;res = ans[l][r];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(res != <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\tres = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> cnt = <span class=\"number\">1</span>; cnt &lt;= r - l + <span class=\"number\">1</span>; ++cnt) &#123;</span><br><span class=\"line\">\t\tres = <span class=\"built_in\">max</span>(res, a[cnt] + <span class=\"built_in\">calcdp</span>(<span class=\"number\">0</span>, l, r, cnt));</span><br><span class=\"line\">\t\tres = <span class=\"built_in\">max</span>(res, a[cnt] + <span class=\"built_in\">calcdp</span>(<span class=\"number\">1</span>, l, r, cnt));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> <span class=\"title\">calcdp</span><span class=\"params\">(<span class=\"keyword\">int</span> c, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> cnt)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(cnt == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> dp[c][l][r][cnt] = <span class=\"built_in\">calcans</span>(l, r);</span><br><span class=\"line\">\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> &amp;res = dp[c][l][r][cnt];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(res != <span class=\"number\">-1</span>) <span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\tres = <span class=\"number\">-1e10</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = l; i &lt; r; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(s[i] - <span class=\"string\">&#x27;0&#x27;</span> == c)</span><br><span class=\"line\">\t\t\tres = <span class=\"built_in\">max</span>(res, <span class=\"built_in\">calcans</span>(l, i - <span class=\"number\">1</span>) + <span class=\"built_in\">calcdp</span>(c, i + <span class=\"number\">1</span>, r, cnt - <span class=\"number\">1</span>));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(cnt == <span class=\"number\">1</span> &amp;&amp; s[r] - <span class=\"string\">&#x27;0&#x27;</span> == c)</span><br><span class=\"line\">\t\tres = <span class=\"built_in\">max</span>(res, <span class=\"built_in\">calcans</span>(l, r - <span class=\"number\">1</span>));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, s + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) </span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dp, <span class=\"number\">-1</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(dp));</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(ans, <span class=\"number\">-1</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(ans));</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> t, a, b, c, d;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, <span class=\"built_in\">calcans</span>(<span class=\"number\">1</span>, n));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["dp"]},{"title":"codeforces 1106题解","url":"/posts/cac007ef.html","content":"<h1 id=\"a.-lunar-new-year-and-cross-counting\">A. Lunar New Year and\nCross Counting</h1>\n<h2 id=\"description\">Description:</h2>\n<p>Lunar New Year is approaching, and you bought a matrix with lots of\n\"crosses\". This matrix <span class=\"math inline\">\\(M\\)</span> of size\n<span class=\"math inline\">\\(n \\times n\\)</span> contains only 'X' and\n'.' (without quotes). The element in the <span\nclass=\"math inline\">\\(i\\)</span>-th row and the <span\nclass=\"math inline\">\\(j\\)</span>-th column <span\nclass=\"math inline\">\\((i, j)\\)</span> is defined as <span\nclass=\"math inline\">\\(M(i, j)\\)</span>, where <span\nclass=\"math inline\">\\(1 \\leq i, j \\leq n\\)</span>. We define a cross\nappearing in the <span class=\"math inline\">\\(i\\)</span>-th row and the\n<span class=\"math inline\">\\(j\\)</span>-th column (<span\nclass=\"math inline\">\\(1 &lt; i, j &lt; n\\)</span>) if and only if $M(i,\nj) = M(i - 1, j - 1) = M(i - 1, j + 1) = M(i + 1, j - 1) = M(i + 1, j +\n1) = $ 'X'. The following figure illustrates a cross appearing at\nposition <span class=\"math inline\">\\((2, 2)\\)</span> in a <span\nclass=\"math inline\">\\(3 \\times 3\\)</span> matrix. X.X.X.X.X Your task is\nto find out the number of crosses in the given matrix <span\nclass=\"math inline\">\\(M\\)</span>. Two crosses are different if and only\nif they appear in different rows or columns. <span id=\"more\"></span> ## Input: The\nfirst line contains only one positive integer <span\nclass=\"math inline\">\\(n\\)</span> (<span class=\"math inline\">\\(1 \\leq n\n\\leq 500\\)</span>), denoting the size of the matrix <span\nclass=\"math inline\">\\(M\\)</span>. The following <span\nclass=\"math inline\">\\(n\\)</span> lines illustrate the matrix <span\nclass=\"math inline\">\\(M\\)</span>. Each line contains exactly <span\nclass=\"math inline\">\\(n\\)</span> characters, each of them is 'X' or '.'.\nThe <span class=\"math inline\">\\(j\\)</span>-th element in the <span\nclass=\"math inline\">\\(i\\)</span>-th line represents <span\nclass=\"math inline\">\\(M(i, j)\\)</span>, where <span\nclass=\"math inline\">\\(1 \\leq i, j \\leq n\\)</span>.</p>\n<h2 id=\"output\">Output</h2>\n<p>Output a single line containing only one integer number <span\nclass=\"math inline\">\\(k\\)</span> — the number of crosses in the given\nmatrix <span class=\"math inline\">\\(M\\)</span>.</p>\n<h2 id=\"sample-input\">Sample Input:</h2>\n<p>5 ..... .XXX. .XXX. .XXX. .....</p>\n<h2 id=\"sample-output\">Sample Output:</h2>\n<p>1</p>\n<h2 id=\"sample-input-1\">Sample Input:</h2>\n<p>2 XX XX</p>\n<h2 id=\"sample-output-1\">Sample Output:</h2>\n<p>0</p>\n<h2 id=\"sample-input-2\">Sample Input:</h2>\n<p>6 ...... X.X.X. .X.X.X X.X.X. .X.X.X ......</p>\n<h2 id=\"sample-output-2\">Sample Output:</h2>\n<p>4</p>\n<h3 id=\"题目链接\"><a\nhref=\"http://codeforces.com/contest/1106/problem/A\">题目链接</a></h3>\n<p>##题解:</p>\n<p><span class=\"math inline\">\\(O(n^2)\\)</span>暴力数一下就好了</p>\n<h2 id=\"ac代码\">AC代码:</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">char</span> g[<span class=\"number\">510</span>][<span class=\"number\">510</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) </span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%s&quot;</span>, &amp;g[i][<span class=\"number\">1</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">1</span>; j &lt;= n; ++j) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(g[i][j] == <span class=\"string\">&#x27;X&#x27;</span> &amp;&amp; g[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;X&#x27;</span> &amp;&amp; g[i - <span class=\"number\">1</span>][j + <span class=\"number\">1</span>] == <span class=\"string\">&#x27;X&#x27;</span> &amp;&amp; g[i + <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;X&#x27;</span> &amp;&amp; g[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>] == <span class=\"string\">&#x27;X&#x27;</span>)</span><br><span class=\"line\">\t\t\t\tans++;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"b.-lunar-new-year-and-food-ordering\">B. Lunar New Year and Food\nOrdering</h1>\n<h2 id=\"description-1\">Description:</h2>\n<p>Lunar New Year is approaching, and Bob is planning to go for a famous\nrestaurant — \"Alice's\". The restaurant \"Alice's\" serves <span\nclass=\"math inline\">\\(n\\)</span> kinds of food. The cost for the <span\nclass=\"math inline\">\\(i\\)</span>-th kind is always <span\nclass=\"math inline\">\\(c_i\\)</span>. Initially, the restaurant has enough\ningredients for serving exactly <span class=\"math inline\">\\(a_i\\)</span>\ndishes of the <span class=\"math inline\">\\(i\\)</span>-th kind. In the New\nYear's Eve, <span class=\"math inline\">\\(m\\)</span> customers will visit\nAlice's one after another and the <span\nclass=\"math inline\">\\(j\\)</span>-th customer will order <span\nclass=\"math inline\">\\(d_j\\)</span> dishes of the <span\nclass=\"math inline\">\\(t_j\\)</span>-th kind of food. The <span\nclass=\"math inline\">\\((i + 1)\\)</span>-st customer will only come after\nthe <span class=\"math inline\">\\(i\\)</span>-th customer is completely\nserved. Suppose there are <span class=\"math inline\">\\(r_i\\)</span>\ndishes of the <span class=\"math inline\">\\(i\\)</span>-th kind remaining\n(initially <span class=\"math inline\">\\(r_i = a_i\\)</span>). When a\ncustomer orders <span class=\"math inline\">\\(1\\)</span> dish of the <span\nclass=\"math inline\">\\(i\\)</span>-th kind, the following principles will\nbe processed. If <span class=\"math inline\">\\(r_i &gt; 0\\)</span>, the\ncustomer will be served exactly <span class=\"math inline\">\\(1\\)</span>\ndish of the <span class=\"math inline\">\\(i\\)</span>-th kind. The cost for\nthe dish is <span class=\"math inline\">\\(c_i\\)</span>. Meanwhile, <span\nclass=\"math inline\">\\(r_i\\)</span> will be reduced by <span\nclass=\"math inline\">\\(1\\)</span>. Otherwise, the customer will be served\n<span class=\"math inline\">\\(1\\)</span> dish of the cheapest available\nkind of food if there are any. If there are multiple cheapest kinds of\nfood, the one with the smallest index among the cheapest will be served.\nThe cost will be the cost for the dish served and the remain for the\ncorresponding dish will be reduced by <span\nclass=\"math inline\">\\(1\\)</span>. If there are no more dishes at all,\nthe customer will leave angrily. Therefore, no matter how many dishes\nare served previously, the cost for the customer is <span\nclass=\"math inline\">\\(0\\)</span>.If the customer doesn't leave after the\n<span class=\"math inline\">\\(d_j\\)</span> dishes are served, the cost for\nthe customer will be the sum of the cost for these <span\nclass=\"math inline\">\\(d_j\\)</span> dishes. Please determine the total\ncost for each of the <span class=\"math inline\">\\(m\\)</span>\ncustomers.</p>\n<h2 id=\"input\">Input:</h2>\n<p>The first line contains two integers <span\nclass=\"math inline\">\\(n\\)</span> and <span\nclass=\"math inline\">\\(m\\)</span> (<span class=\"math inline\">\\(1 \\leq n,\nm \\leq 10^5\\)</span>), representing the number of different kinds of\nfood and the number of customers, respectively. The second line contains\n<span class=\"math inline\">\\(n\\)</span> positive integers <span\nclass=\"math inline\">\\(a_1, a_2, \\ldots, a_n\\)</span> (<span\nclass=\"math inline\">\\(1 \\leq a_i \\leq 10^7\\)</span>), where <span\nclass=\"math inline\">\\(a_i\\)</span> denotes the initial remain of the\n<span class=\"math inline\">\\(i\\)</span>-th kind of dishes. The third line\ncontains <span class=\"math inline\">\\(n\\)</span> positive integers <span\nclass=\"math inline\">\\(c_1, c_2, \\ldots, c_n\\)</span> (<span\nclass=\"math inline\">\\(1 \\leq c_i \\leq 10^6\\)</span>), where <span\nclass=\"math inline\">\\(c_i\\)</span> denotes the cost of one dish of the\n<span class=\"math inline\">\\(i\\)</span>-th kind. The following <span\nclass=\"math inline\">\\(m\\)</span> lines describe the orders of the <span\nclass=\"math inline\">\\(m\\)</span> customers respectively. The <span\nclass=\"math inline\">\\(j\\)</span>-th line contains two positive integers\n<span class=\"math inline\">\\(t_j\\)</span> and <span\nclass=\"math inline\">\\(d_j\\)</span> (<span class=\"math inline\">\\(1 \\leq\nt_j \\leq n\\)</span>, <span class=\"math inline\">\\(1 \\leq d_j \\leq\n10^7\\)</span>), representing the kind of food and the number of dishes\nthe <span class=\"math inline\">\\(j\\)</span>-th customer orders,\nrespectively.</p>\n<h2 id=\"output-1\">Output</h2>\n<p>Print <span class=\"math inline\">\\(m\\)</span> lines. In the <span\nclass=\"math inline\">\\(j\\)</span>-th line print the cost for the <span\nclass=\"math inline\">\\(j\\)</span>-th customer.</p>\n<h2 id=\"sample-input-3\">Sample Input:</h2>\n<p>8 5 8 6 2 1 4 5 7 5 6 3 3 2 6 2 3 2 2 8 1 4 4 7 3 4 6 10</p>\n<h2 id=\"sample-output-3\">Sample Output:</h2>\n<p>22 24 14 10 39</p>\n<h2 id=\"sample-input-4\">Sample Input:</h2>\n<p>6 6 6 6 6 6 6 6 6 66 666 6666 66666 666666 1 6 2 6 3 6 4 6 5 6 6\n66</p>\n<h2 id=\"sample-output-4\">Sample Output:</h2>\n<p>36 396 3996 39996 399996 0</p>\n<h2 id=\"sample-input-5\">Sample Input:</h2>\n<p>6 6 6 6 6 6 6 6 6 66 666 6666 66666 666666 1 6 2 13 3 6 4 11 5 6 6\n6</p>\n<h2 id=\"sample-output-5\">Sample Output:</h2>\n<p>36 11058 99996 4333326 0 0</p>\n<h3 id=\"题目链接-1\"><a\nhref=\"http://codeforces.com/contest/1106/problem/B\">题目链接</a></h3>\n<p>##题解:</p>\n<p>模拟一下，<span class=\"math inline\">\\(O((n+m)log(n))\\)</span></p>\n<h2 id=\"ac代码-1\">AC代码:</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, a[N], c[N], t, d, cnt;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> cost, id;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> node &amp;rhs) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(cost == rhs.cost)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> id &lt; rhs.id;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> cost &lt; rhs.cost;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;temp;</span><br><span class=\"line\"></span><br><span class=\"line\">map&lt;node, <span class=\"keyword\">int</span>&gt; mp;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;c[i]);</span><br><span class=\"line\">\t\ttemp.cost = c[i];</span><br><span class=\"line\">\t\ttemp.id = i;</span><br><span class=\"line\">\t\tmp[temp] = a[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;t, &amp;d);</span><br><span class=\"line\">\t\t<span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\ttemp.cost = c[t], temp.id = t;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mp.<span class=\"built_in\">find</span>(temp) != mp.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">\t\t\tcnt = <span class=\"built_in\">min</span>(mp[temp], d);</span><br><span class=\"line\">\t\t\td -= cnt;</span><br><span class=\"line\">\t\t\tmp[temp] -= cnt;</span><br><span class=\"line\">\t\t\tans += <span class=\"number\">1LL</span> * cnt * temp.cost;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(mp[temp] == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tmp.<span class=\"built_in\">erase</span>(temp);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(d &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(mp.<span class=\"built_in\">empty</span>()) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t\ttemp = mp.<span class=\"built_in\">begin</span>()-&gt;first;</span><br><span class=\"line\">\t\t\tcnt = <span class=\"built_in\">min</span>(mp[temp], d);</span><br><span class=\"line\">\t\t\td -= cnt;</span><br><span class=\"line\">\t\t\tmp[temp] -= cnt;</span><br><span class=\"line\">\t\t\tans += <span class=\"number\">1LL</span> * cnt * temp.cost;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(mp[temp] == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tmp.<span class=\"built_in\">erase</span>(temp);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(d != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\tans = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"c.-lunar-new-year-and-number-division\">C. Lunar New Year and\nNumber Division</h1>\n<h2 id=\"description-2\">Description:</h2>\n<p>Lunar New Year is approaching, and Bob is struggling with his\nhomework – a number division problem. There are <span\nclass=\"math inline\">\\(n\\)</span> positive integers <span\nclass=\"math inline\">\\(a_1, a_2, \\ldots, a_n\\)</span> on Bob's homework\npaper, where <span class=\"math inline\">\\(n\\)</span> is always an even\nnumber. Bob is asked to divide those numbers into groups, where each\ngroup must contain at least <span class=\"math inline\">\\(2\\)</span>\nnumbers. Suppose the numbers are divided into <span\nclass=\"math inline\">\\(m\\)</span> groups, and the sum of the numbers in\nthe <span class=\"math inline\">\\(j\\)</span>-th group is <span\nclass=\"math inline\">\\(s_j\\)</span>. Bob's aim is to minimize the sum of\nthe square of <span class=\"math inline\">\\(s_j\\)</span>, that is <span\nclass=\"math inline\">\\(\\sum_{j = 1}^{m} s_j^2.\\)</span> Bob is puzzled by\nthis hard problem. Could you please help him solve it?</p>\n<h2 id=\"input-1\">Input:</h2>\n<p>The first line contains an even integer <span\nclass=\"math inline\">\\(n\\)</span> (<span class=\"math inline\">\\(2 \\leq n\n\\leq 3 \\cdot 10^5\\)</span>), denoting that there are <span\nclass=\"math inline\">\\(n\\)</span> integers on Bob's homework paper. The\nsecond line contains <span class=\"math inline\">\\(n\\)</span> integers\n<span class=\"math inline\">\\(a_1, a_2, \\ldots, a_n\\)</span> (<span\nclass=\"math inline\">\\(1 \\leq a_i \\leq 10^4\\)</span>), describing the\nnumbers you need to deal with.</p>\n<h2 id=\"output-2\">Output</h2>\n<p>A single line containing one integer, denoting the minimum of the sum\nof the square of <span class=\"math inline\">\\(s_j\\)</span>, which is\n<span class=\"math inline\">\\(\\sum_{i = j}^{m} s_j^2,\\)</span> where <span\nclass=\"math inline\">\\(m\\)</span> is the number of groups.</p>\n<h2 id=\"sample-input-6\">Sample Input:</h2>\n<p>4 8 5 2 3</p>\n<h2 id=\"sample-output-6\">Sample Output:</h2>\n<p>164</p>\n<h2 id=\"sample-input-7\">Sample Input:</h2>\n<p>6 1 1 1 2 2 2</p>\n<h2 id=\"sample-output-7\">Sample Output:</h2>\n<p>27</p>\n<h3 id=\"题目链接-2\"><a\nhref=\"http://codeforces.com/contest/1106/problem/C\">题目链接</a></h3>\n<h2 id=\"题解\">题解:</h2>\n<p>显然两个两个一起最小，不难看出最小的和最大的匹配总和最小，<span\nclass=\"math inline\">\\(O(nlog(n))\\)</span></p>\n<h2 id=\"ac代码-2\">AC代码:</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">3e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> a[N], n, tmp;</span><br><span class=\"line\"><span class=\"keyword\">long</span> <span class=\"keyword\">long</span> ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">sort</span>(a + <span class=\"number\">1</span>, a + n + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; <span class=\"number\">2</span> * i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\ttmp = a[i] + a[n + <span class=\"number\">1</span> - i];</span><br><span class=\"line\">\t\tans += <span class=\"number\">1LL</span> * tmp * tmp;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, ans);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"d.-lunar-new-year-and-a-wander\">D. Lunar New Year and a\nWander</h1>\n<h2 id=\"description-3\">Description:</h2>\n<p>Lunar New Year is approaching, and Bob decides to take a wander in a\nnearby park. The park can be represented as a connected graph with <span\nclass=\"math inline\">\\(n\\)</span> nodes and <span\nclass=\"math inline\">\\(m\\)</span> bidirectional edges. Initially Bob is\nat the node <span class=\"math inline\">\\(1\\)</span> and he records <span\nclass=\"math inline\">\\(1\\)</span> on his notebook. He can wander from one\nnode to another through those bidirectional edges. Whenever he visits a\nnode not recorded on his notebook, he records it. After he visits all\nnodes at least once, he stops wandering, thus finally a permutation of\nnodes <span class=\"math inline\">\\(a_1, a_2, \\ldots, a_n\\)</span> is\nrecorded. Wandering is a boring thing, but solving problems is\nfascinating. Bob wants to know the lexicographically smallest sequence\nof nodes he can record while wandering. Bob thinks this problem is\ntrivial, and he wants you to solve it. A sequence <span\nclass=\"math inline\">\\(x\\)</span> is lexicographically smaller than a\nsequence <span class=\"math inline\">\\(y\\)</span> if and only if one of\nthe following holds: <span class=\"math inline\">\\(x\\)</span> is a prefix\nof <span class=\"math inline\">\\(y\\)</span>, but <span\nclass=\"math inline\">\\(x \\ne y\\)</span> (this is impossible in this\nproblem as all considered sequences have the same length); in the first\nposition where <span class=\"math inline\">\\(x\\)</span> and <span\nclass=\"math inline\">\\(y\\)</span> differ, the sequence <span\nclass=\"math inline\">\\(x\\)</span> has a smaller element than the\ncorresponding element in <span class=\"math inline\">\\(y\\)</span>. ##\nInput: The first line contains two positive integers <span\nclass=\"math inline\">\\(n\\)</span> and <span\nclass=\"math inline\">\\(m\\)</span> (<span class=\"math inline\">\\(1 \\leq n,\nm \\leq 10^5\\)</span>), denoting the number of nodes and edges,\nrespectively. The following <span class=\"math inline\">\\(m\\)</span> lines\ndescribe the bidirectional edges in the graph. The <span\nclass=\"math inline\">\\(i\\)</span>-th of these lines contains two integers\n<span class=\"math inline\">\\(u_i\\)</span> and <span\nclass=\"math inline\">\\(v_i\\)</span> (<span class=\"math inline\">\\(1 \\leq\nu_i, v_i \\leq n\\)</span>), representing the nodes the <span\nclass=\"math inline\">\\(i\\)</span>-th edge connects. Note that the graph\ncan have multiple edges connecting the same two nodes and self-loops. It\nis guaranteed that the graph is connected.</p>\n<h2 id=\"output-3\">Output</h2>\n<p>Output a line containing the lexicographically smallest sequence\n<span class=\"math inline\">\\(a_1, a_2, \\ldots, a_n\\)</span> Bob can\nrecord.</p>\n<h2 id=\"sample-input-8\">Sample Input:</h2>\n<p>3 2 1 2 1 3</p>\n<h2 id=\"sample-output-8\">Sample Output:</h2>\n<p>1 2 3</p>\n<h2 id=\"sample-input-9\">Sample Input:</h2>\n<p>5 5 1 4 3 4 5 4 3 2 1 5</p>\n<h2 id=\"sample-output-9\">Sample Output:</h2>\n<p>1 4 3 2 5</p>\n<h2 id=\"sample-input-10\">Sample Input:</h2>\n<p>10 10 1 4 6 8 2 5 3 7 9 4 5 6 3 4 8 10 8 9 1 10</p>\n<h2 id=\"sample-output-10\">Sample Output:</h2>\n<p>1 4 3 7 9 8 6 5 2 10</p>\n<h3 id=\"题目链接-3\"><a\nhref=\"http://codeforces.com/contest/1106/problem/D\">题目链接</a></h3>\n<h2 id=\"题解-1\">题解:</h2>\n<p>一开始在点1,\n每次第一次到达一个点记录到答案，求字典序最小的答案序列</p>\n<p>类似Prim的思想，每次取最小的，用优先队列实现，<span\nclass=\"math inline\">\\(O(nlog(m))\\)</span></p>\n<h2 id=\"ac代码-3\">AC代码:</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\">priority_queue&lt;<span class=\"keyword\">int</span>, vector&lt;<span class=\"keyword\">int</span>&gt;, greater&lt;<span class=\"keyword\">int</span>&gt;&gt; pq;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> head[N], vis[N], pnt[N &lt;&lt; <span class=\"number\">1</span>], nxt[N &lt;&lt; <span class=\"number\">1</span>], cnt, n, m, x, y;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; ans;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\tpnt[cnt] = y;</span><br><span class=\"line\">\tnxt[cnt] = head[x];</span><br><span class=\"line\">\thead[x] = cnt++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(head, <span class=\"number\">-1</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(head));</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;x, &amp;y);</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(x, y);</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(y, x);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpq.<span class=\"built_in\">push</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!pq.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> t = pq.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">\t\tpq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(vis[t]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\tvis[t] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tans.<span class=\"built_in\">push_back</span>(t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = head[t]; ~i; i = nxt[i]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">int</span> j = pnt[i];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(vis[j]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\tpq.<span class=\"built_in\">push</span>(j);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ans.<span class=\"built_in\">size</span>(); ++i)</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d%c&quot;</span>, ans[i], <span class=\"string\">&quot; \\n&quot;</span>[i == ans.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"e.-lunar-new-year-and-red-envelopes\">E. Lunar New Year and Red\nEnvelopes</h1>\n<h2 id=\"description-4\">Description:</h2>\n<p>Lunar New Year is approaching, and Bob is going to receive some red\nenvelopes with countless money! But collecting money from red envelopes\nis a time-consuming process itself. Let's describe this problem in a\nmathematical way. Consider a timeline from time <span\nclass=\"math inline\">\\(1\\)</span> to <span\nclass=\"math inline\">\\(n\\)</span>. The <span\nclass=\"math inline\">\\(i\\)</span>-th red envelope will be available from\ntime <span class=\"math inline\">\\(s_i\\)</span> to <span\nclass=\"math inline\">\\(t_i\\)</span>, inclusive, and contain <span\nclass=\"math inline\">\\(w_i\\)</span> coins. If Bob chooses to collect the\ncoins in the <span class=\"math inline\">\\(i\\)</span>-th red envelope, he\ncan do it only in an integer point of time between <span\nclass=\"math inline\">\\(s_i\\)</span> and <span\nclass=\"math inline\">\\(t_i\\)</span>, inclusive, and he can't collect any\nmore envelopes until time <span class=\"math inline\">\\(d_i\\)</span>\n(inclusive) after that. Here <span class=\"math inline\">\\(s_i \\leq t_i\n\\leq d_i\\)</span> holds. Bob is a greedy man, he collects coins greedily\n— whenever he can collect coins at some integer time <span\nclass=\"math inline\">\\(x\\)</span>, he collects the available red envelope\nwith the maximum number of coins. If there are multiple envelopes with\nthe same maximum number of coins, Bob would choose the one whose\nparameter <span class=\"math inline\">\\(d\\)</span> is the largest. If\nthere are still multiple choices, Bob will choose one from them\nrandomly. However, Alice — his daughter — doesn't want her father to get\ntoo many coins. She could disturb Bob at no more than <span\nclass=\"math inline\">\\(m\\)</span> integer time moments. If Alice decides\nto disturb Bob at time <span class=\"math inline\">\\(x\\)</span>, he could\nnot do anything at time <span class=\"math inline\">\\(x\\)</span> and\nresumes his usual strategy at the time <span class=\"math inline\">\\(x +\n1\\)</span> (inclusive), which may lead to missing some red envelopes.\nCalculate the minimum number of coins Bob would get if Alice disturbs\nhim optimally.</p>\n<h2 id=\"input-2\">Input:</h2>\n<p>The first line contains three non-negative integers <span\nclass=\"math inline\">\\(n\\)</span>, <span class=\"math inline\">\\(m\\)</span>\nand <span class=\"math inline\">\\(k\\)</span> (<span\nclass=\"math inline\">\\(1 \\leq n \\leq 10^5\\)</span>, <span\nclass=\"math inline\">\\(0 \\leq m \\leq 200\\)</span>, <span\nclass=\"math inline\">\\(1 \\leq k \\leq 10^5\\)</span>), denoting the length\nof the timeline, the number of times Alice can disturb Bob and the total\nnumber of red envelopes, respectively. The following <span\nclass=\"math inline\">\\(k\\)</span> lines describe those <span\nclass=\"math inline\">\\(k\\)</span> red envelopes. The <span\nclass=\"math inline\">\\(i\\)</span>-th line contains four positive integers\n<span class=\"math inline\">\\(s_i\\)</span>, <span\nclass=\"math inline\">\\(t_i\\)</span>, <span\nclass=\"math inline\">\\(d_i\\)</span> and <span\nclass=\"math inline\">\\(w_i\\)</span> (<span class=\"math inline\">\\(1 \\leq\ns_i \\leq t_i \\leq d_i \\leq n\\)</span>, <span class=\"math inline\">\\(1\n\\leq w_i \\leq 10^9\\)</span>) — the time segment when the <span\nclass=\"math inline\">\\(i\\)</span>-th envelope is available, the time\nmoment Bob can continue collecting after collecting the <span\nclass=\"math inline\">\\(i\\)</span>-th envelope, and the number of coins in\nthis envelope, respectively.</p>\n<h2 id=\"output-4\">Output</h2>\n<p>Output one integer — the minimum number of coins Bob would get if\nAlice disturbs him optimally.</p>\n<h2 id=\"sample-input-11\">Sample Input:</h2>\n<p>5 0 2 1 3 4 5 2 5 5 8</p>\n<h2 id=\"sample-output-11\">Sample Output:</h2>\n<p>13 ## Sample Input:</p>\n<p>10 1 6 1 1 2 4 2 2 6 2 3 3 3 3 4 4 4 5 5 5 5 7 6 6 6 9</p>\n<h2 id=\"sample-output-12\">Sample Output:</h2>\n<p>2 ## Sample Input:</p>\n<p>12 2 6 1 5 5 4 4 6 6 2 3 8 8 3 2 9 9 5 6 10 10 7 8 12 12 9</p>\n<h2 id=\"sample-output-13\">Sample Output:</h2>\n<p>11 ### <a\nhref=\"http://codeforces.com/contest/1106/problem/E\">题目链接</a></p>\n<h2 id=\"题解-2\">题解:</h2>\n<p><span class=\"math inline\">\\(k\\)</span>个红包，每个可以在<span\nclass=\"math inline\">\\(l_i到r_i的整点选取，价值为w_i,\n选取后直到d_i不能选红包\\)</span>，你的策略是任意时刻选价值最高的，有多个则选<span\nclass=\"math inline\">\\(d_i\\)</span>最大的，还有多个则随机（其实是选什么都一样），你可以被人打扰m次，一次打扰则在一个时刻不能选红包，求选择红包总价值的最小值</p>\n<p><span class=\"math inline\">\\(O(n \\ast m)\\)</span>dp即可</p>\n<h2 id=\"ac代码-4\">AC代码:</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> LL = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">LL dp[N][<span class=\"number\">220</span>], sum[N];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">int</span> l, r, d, w, nxt, val, n, m, k;</span><br><span class=\"line\"><span class=\"keyword\">int</span> vis[N];</span><br><span class=\"line\">pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; tmp;</span><br><span class=\"line\">vector&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; t[N], s[N];</span><br><span class=\"line\">multiset&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt; mp;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;n, &amp;m, &amp;k);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= k; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;l, &amp;r, &amp;d, &amp;w);</span><br><span class=\"line\">\t\ttmp.first = -w, tmp.second = -d;</span><br><span class=\"line\">\t\ts[r].<span class=\"built_in\">push_back</span>(tmp);</span><br><span class=\"line\">\t\tt[l].<span class=\"built_in\">push_back</span>(tmp);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dp[n + <span class=\"number\">1</span>], <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(dp[n + <span class=\"number\">1</span>]));</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = n; i; --i) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;it: s[i])</span><br><span class=\"line\">\t\t\tmp.<span class=\"built_in\">insert</span>(it);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!mp.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\t\ttmp = *mp.<span class=\"built_in\">begin</span>();</span><br><span class=\"line\">\t\t\tnxt = -tmp.second + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tval = -tmp.first;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tnxt = i + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tval = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= m; ++j) &#123;</span><br><span class=\"line\">\t\t\tdp[i][j] = dp[nxt][j] + val;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(j)</span><br><span class=\"line\">\t\t\t\tdp[i][j] = <span class=\"built_in\">min</span>(dp[i][j], dp[i + <span class=\"number\">1</span>][j - <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;it: t[i]) &#123;</span><br><span class=\"line\">\t\t\tmp.<span class=\"built_in\">erase</span>(mp.<span class=\"built_in\">find</span>(it));</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, dp[<span class=\"number\">1</span>][m]);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"f.-lunar-new-year-and-a-recursive-sequence\">F. Lunar New Year\nand a Recursive Sequence</h1>\n<h2 id=\"description-5\">Description:</h2>\n<p>Lunar New Year is approaching, and Bob received a gift from his\nfriend recently — a recursive sequence! He loves this sequence very much\nand wants to play with it. Let <span class=\"math inline\">\\(f_1, f_2,\n\\ldots, f_i, \\ldots\\)</span> be an infinite sequence of positive\nintegers. Bob knows that for <span class=\"math inline\">\\(i &gt;\nk\\)</span>, <span class=\"math inline\">\\(f_i\\)</span> can be obtained by\nthe following recursive equation: <span class=\"math inline\">\\(f_i =\n\\left(f_{i - 1} ^ {b_1} \\cdot f_{i - 2} ^ {b_2} \\cdot \\cdots \\cdot f_{i\n- k} ^ {b_k}\\right) \\bmod p,\\)</span> which in short is <span\nclass=\"math inline\">\\(f_i = \\left(\\prod_{j = 1}^{k} f_{i -\nj}^{b_j}\\right) \\bmod p,\\)</span> where <span class=\"math inline\">\\(p =\n998\\,244\\,353\\)</span> (a widely-used prime), <span\nclass=\"math inline\">\\(b_1, b_2, \\ldots, b_k\\)</span> are known integer\nconstants, and <span class=\"math inline\">\\(x \\bmod y\\)</span> denotes\nthe remainder of <span class=\"math inline\">\\(x\\)</span> divided by <span\nclass=\"math inline\">\\(y\\)</span>. Bob lost the values of <span\nclass=\"math inline\">\\(f_1, f_2, \\ldots, f_k\\)</span>, which is extremely\ntroublesome – these are the basis of the sequence! Luckily, Bob\nremembers the first <span class=\"math inline\">\\(k - 1\\)</span> elements\nof the sequence: <span class=\"math inline\">\\(f_1 = f_2 = \\ldots = f_{k -\n1} = 1\\)</span> and the <span class=\"math inline\">\\(n\\)</span>-th\nelement: <span class=\"math inline\">\\(f_n = m\\)</span>. Please find any\npossible value of <span class=\"math inline\">\\(f_k\\)</span>. If no\nsolution exists, just tell Bob that it is impossible to recover his\nfavorite sequence, regardless of Bob's sadness.</p>\n<h2 id=\"input-3\">Input:</h2>\n<p>The first line contains a positive integer <span\nclass=\"math inline\">\\(k\\)</span> (<span class=\"math inline\">\\(1 \\leq k\n\\leq 100\\)</span>), denoting the length of the sequence <span\nclass=\"math inline\">\\(b_1, b_2, \\ldots, b_k\\)</span>. The second line\ncontains <span class=\"math inline\">\\(k\\)</span> positive integers <span\nclass=\"math inline\">\\(b_1, b_2, \\ldots, b_k\\)</span> (<span\nclass=\"math inline\">\\(1 \\leq b_i &lt; p\\)</span>). The third line\ncontains two positive integers <span class=\"math inline\">\\(n\\)</span>\nand <span class=\"math inline\">\\(m\\)</span> (<span\nclass=\"math inline\">\\(k &lt; n \\leq 10^9\\)</span>, <span\nclass=\"math inline\">\\(1 \\leq m &lt; p\\)</span>), which implies <span\nclass=\"math inline\">\\(f_n = m\\)</span>.</p>\n<h2 id=\"output-5\">Output</h2>\n<p>Output a possible value of <span class=\"math inline\">\\(f_k\\)</span>,\nwhere <span class=\"math inline\">\\(f_k\\)</span> is a positive integer\nsatisfying <span class=\"math inline\">\\(1 \\leq f_k &lt; p\\)</span>. If\nthere are multiple answers, print any of them. If no such <span\nclass=\"math inline\">\\(f_k\\)</span> makes <span class=\"math inline\">\\(f_n\n= m\\)</span>, output <span class=\"math inline\">\\(-1\\)</span> instead. It\nis easy to show that if there are some possible values of <span\nclass=\"math inline\">\\(f_k\\)</span>, there must be at least one\nsatisfying <span class=\"math inline\">\\(1 \\leq f_k &lt; p\\)</span>.</p>\n<h2 id=\"sample-input-12\">Sample Input:</h2>\n<p>3 2 3 5 4 16</p>\n<h2 id=\"sample-output-14\">Sample Output:</h2>\n<p>4</p>\n<h2 id=\"sample-input-13\">Sample Input:</h2>\n<p>5 4 7 1 5 6 7 14187219</p>\n<h2 id=\"sample-output-15\">Sample Output:</h2>\n<p>6</p>\n<h2 id=\"sample-input-14\">Sample Input:</h2>\n<p>8 2 3 5 6 1 7 9 10 23333 1</p>\n<h2 id=\"sample-output-16\">Sample Output:</h2>\n<p>1</p>\n<h2 id=\"sample-input-15\">Sample Input:</h2>\n<p>1 2 88888 66666</p>\n<h2 id=\"sample-output-17\">Sample Output:</h2>\n<p>-1</p>\n<h2 id=\"sample-input-16\">Sample Input:</h2>\n<p>3 998244352 998244352 998244352 4 2</p>\n<h2 id=\"sample-output-18\">Sample Output:</h2>\n<p>-1</p>\n<h2 id=\"sample-input-17\">Sample Input:</h2>\n<p>10 283 463 213 777 346 201 463 283 102 999 2333333 6263423</p>\n<h2 id=\"sample-output-19\">Sample Output:</h2>\n<p>382480067</p>\n<h3 id=\"题目链接-4\"><a\nhref=\"http://codeforces.com/contest/1106/problem/F\">题目链接</a></h3>\n<h2 id=\"题解-3\">题解:</h2>\n<p>把原式看成<span\nclass=\"math inline\">\\(f_k\\)</span>的幂次的形式，设<span\nclass=\"math inline\">\\(f_n=f_k^{h_n}\\)</span>, 则<span\nclass=\"math inline\">\\(h_1=h_2=...=h_{k-1}=0, h_k=1\\)</span>, <span\nclass=\"math inline\">\\(h_i = \\sum_{j = 1}^k(h_{i-j} \\ast b_j) \\ mod \\\n\\phi(p), (i &gt; k时)\\)</span>,用矩阵快速幂可以求解出<span\nclass=\"math inline\">\\(h_n\\)</span>, 时间复杂度为<span\nclass=\"math inline\">\\(O(k^3log(n))\\)</span>,</p>\n<p>然后要求解<span class=\"math inline\">\\(f_k^{h_n} = m \\ mod \\\np\\)</span>, 这个叫高次剩余，告辞！，可以利用<span\nclass=\"math inline\">\\(p=998244353\\)</span>的性质利用原根求解，</p>\n<p>令<span class=\"math inline\">\\(m = g ^ x\\)</span>, 其中g为p的原根3,\n利用<span class=\"math inline\">\\(BSGS\\)</span>算法可以<span\nclass=\"math inline\">\\(O(\\sqrt\nplog(p))\\)</span>算出x(用哈希表代替map可以去掉一个log),</p>\n<p>设<span class=\"math inline\">\\(f_k = g^y\\)</span>, 则<span\nclass=\"math inline\">\\(g^{y \\ast h_n} = g^x \\ mod \\ p, 则y \\ast h_n=x \\\nmod \\ \\phi(p)\\)</span>,利用<span\nclass=\"math inline\">\\(EXGCD\\)</span>解出y</p>\n<p>总复杂度<span class=\"math inline\">\\(O(k^3log(n) + \\sqrt\nplog(p))\\)</span></p>\n<h2 id=\"ac代码-5\">AC代码:</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"><span class=\"keyword\">using</span> LL = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> mod = <span class=\"number\">998244353</span>, N = <span class=\"number\">110</span>;</span><br><span class=\"line\"><span class=\"keyword\">int</span> n, m, k;</span><br><span class=\"line\"><span class=\"keyword\">int</span> b[N];</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Mat</span> &#123;</span></span><br><span class=\"line\">\tLL a[N][N];</span><br><span class=\"line\">\t<span class=\"built_in\">Mat</span>(<span class=\"keyword\">bool</span> flag = <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">memset</span>(a, <span class=\"number\">0</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(a));</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(flag)</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; N; ++i)</span><br><span class=\"line\">\t\t\t\ta[i][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tLL* <span class=\"keyword\">operator</span>[](<span class=\"keyword\">unsigned</span> id) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> a[id];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tMat <span class=\"keyword\">operator</span>*(Mat &amp;rhs) &#123;</span><br><span class=\"line\">\t\tMat res;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; ++i) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; k; ++j) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> p = <span class=\"number\">0</span>; p &lt; k; ++p) &#123;</span><br><span class=\"line\">\t\t\t\t\tres[i][j] = (res[i][j] + a[i][p] * rhs[p][j]) % (mod - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;base;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">Mat <span class=\"title\">Mat_qp</span><span class=\"params\">(Mat a, LL n)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"function\">Mat <span class=\"title\">res</span><span class=\"params\">(<span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\tres = res * a;</span><br><span class=\"line\">\t\ta = a * a;</span><br><span class=\"line\">\t\tn &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">qp</span><span class=\"params\">(LL a, LL n, LL m = mod)</span> </span>&#123;</span><br><span class=\"line\">\tLL res = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(n) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\tres = res * a % m;</span><br><span class=\"line\">\t\ta = a * a % m;</span><br><span class=\"line\">\t\tn &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">BSGS</span><span class=\"params\">(LL A, LL B, LL C)</span> </span>&#123; <span class=\"comment\">//find minium x satisfy A ** x % C = B % C </span></span><br><span class=\"line\">\tmap&lt;LL, LL&gt; mp;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(A % C == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\tLL m = <span class=\"built_in\">ceil</span>(<span class=\"built_in\">sqrt</span>(C)); <span class=\"comment\">//x = i * m - j, A ** (i * m - j) = B, A ** (i * m) = B * A ** j</span></span><br><span class=\"line\">\tLL ans = B % C;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt;= m; ++j) &#123; <span class=\"comment\">//enum j</span></span><br><span class=\"line\">\t\tmp[ans] = j;</span><br><span class=\"line\">\t\tans = ans * A % C;\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tLL t = <span class=\"built_in\">qp</span>(A, m, C);</span><br><span class=\"line\">\tans = t;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= m; ++i) &#123; <span class=\"comment\">//enum i, find j</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(mp.<span class=\"built_in\">count</span>(ans)) </span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> ((i * m - mp[ans]) % C + C) % C;</span><br><span class=\"line\">\t\tans = ans * t % mod;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">exgcd</span><span class=\"params\">(LL a, LL b, LL &amp;x, LL &amp;y)</span> </span>&#123;<span class=\"comment\">//x, y must be reference, ax + by = gcd(a, b)</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    \tx = <span class=\"number\">1</span>, y = <span class=\"number\">0</span>;</span><br><span class=\"line\">    \t<span class=\"keyword\">return</span> a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    LL d = <span class=\"built_in\">exgcd</span>(b, a % b, x, y);</span><br><span class=\"line\">    LL t = x;</span><br><span class=\"line\">    x = y, y = t - (a / b) * y;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> d; <span class=\"comment\">//d = gcd(a, b)</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\">LL <span class=\"title\">solve</span><span class=\"params\">(LL t, LL p)</span> </span>&#123;</span><br><span class=\"line\">\tLL x, y;</span><br><span class=\"line\">\tLL d = <span class=\"built_in\">exgcd</span>(t, mod - <span class=\"number\">1</span>, x, y);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(p % d) <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">\tx = ((x * p / d) % (mod - <span class=\"number\">1</span>) + (mod - <span class=\"number\">1</span>)) % (mod - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"built_in\">qp</span>(<span class=\"number\">3</span>, x, mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;k);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; k; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%lld&quot;</span>, &amp;base[<span class=\"number\">0</span>][i]);</span><br><span class=\"line\">\t\tbase[i + <span class=\"number\">1</span>][i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class=\"line\">\tMat jar = <span class=\"built_in\">Mat_qp</span>(base, n - k);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld\\n&quot;</span>, <span class=\"built_in\">solve</span>(jar[<span class=\"number\">0</span>][<span class=\"number\">0</span>], <span class=\"built_in\">BSGS</span>(<span class=\"number\">3</span>, m, mod)));</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["算法"],"tags":["codeforces"]},{"title":"线段树优化建图(cf787d, 2019Wannafly Winter Camp Day7 Div1 E)","url":"/posts/cb96abfa.html","content":"<p>线段树优化建图，用于区间到区间建边时降低空间复杂度\n建立两颗线段树，一颗in, 代表进入这个区间，一颗out,代表从这个区间出去\nin树从父亲向儿子建边，代表宏观进入整个区间，不向下寻找\nout树从儿子向父亲建边，代表出去\nin树向out树对应点建边，代表从这个点进去可以从它出去 建真正的边时： 1:\n单点向单点: out树对应点向in树对应点建边 2: 单点向区间:\nout树对应点向in树对应区间建边 3: 区间向单点:\nout树对应区间向in树对应点建边 4: 区间向区间:\nout树区间对新点P建边，P向in树对应点建边 <span id=\"more\"></span></p>\n<p><a href=\"https://codeforces.com/contest/787/problem/D/\">cf787D</a>\n最短路裸题 <figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"keyword\">using</span> LL = <span class=\"keyword\">long</span> <span class=\"keyword\">long</span>;</span><br><span class=\"line\">vector&lt;pair&lt;<span class=\"keyword\">int</span>,<span class=\"keyword\">int</span>&gt;&gt; G[N &lt;&lt; <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">int</span> in[N &lt;&lt; <span class=\"number\">2</span>], out[N &lt;&lt; <span class=\"number\">2</span>], pos[N], n, q, s, t, v, u, l, r, w, tot;</span><br><span class=\"line\">LL dis[N &lt;&lt; <span class=\"number\">3</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">inline</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y, <span class=\"keyword\">int</span> v)</span> </span>&#123;</span><br><span class=\"line\">\tG[x].<span class=\"built_in\">push_back</span>(<span class=\"built_in\">make_pair</span>(y, v));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build_in</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">\t\tpos[l] = rt;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">build_in</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">\t<span class=\"built_in\">build_in</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">\t<span class=\"built_in\">add</span>(rt, rt &lt;&lt; <span class=\"number\">1</span>, <span class=\"number\">0</span>); <span class=\"comment\">//in树父亲向儿子建边</span></span><br><span class=\"line\">\t<span class=\"built_in\">add</span>(rt, rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build_out</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">add</span>(rt, tot + rt, <span class=\"number\">0</span>); <span class=\"comment\">//in树向out树建边</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">build_out</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">\t<span class=\"built_in\">build_out</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">\t<span class=\"built_in\">add</span>(tot + (rt &lt;&lt; <span class=\"number\">1</span>), tot + rt, <span class=\"number\">0</span>); <span class=\"comment\">//out树儿子向父亲建边</span></span><br><span class=\"line\">\t<span class=\"built_in\">add</span>(tot + (rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>), tot + rt, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update_in</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> from, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(tot + pos[from], rt, val);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= mid)</span><br><span class=\"line\">\t\t<span class=\"built_in\">update_in</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, L, R, from, val);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(mid &lt; R)</span><br><span class=\"line\">\t\t<span class=\"built_in\">update_in</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, L, R, from, val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">update_out</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> pnt, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(tot + rt, pos[pnt], val);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= mid)</span><br><span class=\"line\">\t\t<span class=\"built_in\">update_out</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, L, R, pnt, val);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(mid &lt; R)</span><br><span class=\"line\">\t\t<span class=\"built_in\">update_out</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, L, R, pnt, val);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">node</span> &#123;</span></span><br><span class=\"line\">\tLL dis;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> id;</span><br><span class=\"line\">\t<span class=\"keyword\">bool</span> <span class=\"keyword\">operator</span>&lt;(<span class=\"keyword\">const</span> node &amp;rhs) <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> dis &gt; rhs.dis;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">dijk</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">memset</span>(dis, <span class=\"number\">0x3f</span>, <span class=\"built_in\"><span class=\"keyword\">sizeof</span></span>(dis));</span><br><span class=\"line\">\tdis[pos[s]] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tpriority_queue&lt;node&gt; pq;</span><br><span class=\"line\">\tpq.<span class=\"built_in\">push</span>(&#123;<span class=\"number\">0</span>, pos[s]&#125;);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!pq.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\tnode u = pq.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">\t\tpq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(dis[u.id] &lt; u.dis) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;j: G[u.id]) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(dis[j.first] &gt; u.dis + j.second) &#123;</span><br><span class=\"line\">\t\t\t\tdis[j.first] = u.dis + j.second;</span><br><span class=\"line\">\t\t\t\tpq.<span class=\"built_in\">push</span>(&#123;dis[j.first], j.first&#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;n, &amp;q, &amp;s);</span><br><span class=\"line\">\ttot = n &lt;&lt; <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">build_in</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">\t<span class=\"built_in\">build_out</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n);</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(t == <span class=\"number\">1</span>) &#123; <span class=\"comment\">//v-&gt;u</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d&quot;</span>, &amp;v, &amp;u, &amp;w);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">add</span>(pos[v] + tot, pos[u], w);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(t == <span class=\"number\">2</span>) &#123; <span class=\"comment\">//v-&gt;[l,r]</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;v, &amp;l, &amp;r, &amp;w);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">update_in</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, l, r, v, w);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(t == <span class=\"number\">3</span>) &#123; <span class=\"comment\">//[l,r]-&gt;v</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d%d%d%d&quot;</span>, &amp;v, &amp;l, &amp;r, &amp;w);</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">update_out</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>, n, l, r, v, w);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">dijk</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%lld%c&quot;</span>, dis[pos[i]] == <span class=\"number\">0x3f3f3f3f3f3f3f3f</span> ? <span class=\"number\">-1</span> : dis[pos[i]], <span class=\"string\">&quot; \\n&quot;</span>[i == n]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><a\nhref=\"https://www.zhixincode.com/contest/24/problem/E\">2019Wannafly\nWinter Camp Day7 Div1 E</a>\n给你线性探查法哈希后的序列，求字典序最小的原序列\n记一个数应该在的位置为<span class=\"math inline\">\\(pos\\)</span>,\n实际在的位置为<span class=\"math inline\">\\(s\\)</span>，那么<span\nclass=\"math inline\">\\(pos\\)</span>到<span\nclass=\"math inline\">\\(s-1\\)</span>(模<span\nclass=\"math inline\">\\(n\\)</span>意义下的)这些位置的数肯定在<span\nclass=\"math inline\">\\(s\\)</span>前被插入\n建边拓扑排序就行了，要求字典序最小就用优先队列，只有区间向单点建边只要out那颗树就行了\n<figure class=\"highlight cpp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;bits/stdc++.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> std;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"keyword\">int</span> N = <span class=\"number\">1e5</span> + <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">vector&lt;<span class=\"keyword\">int</span>&gt; G[N &lt;&lt; <span class=\"number\">2</span>], ans;</span><br><span class=\"line\"><span class=\"keyword\">int</span> deg[N &lt;&lt; <span class=\"number\">2</span>], pos[N], id[N &lt;&lt; <span class=\"number\">2</span>], a[N], n;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> x, <span class=\"keyword\">int</span> y)</span> </span>&#123;</span><br><span class=\"line\">\tG[x].<span class=\"built_in\">push_back</span>(y);</span><br><span class=\"line\">\t++deg[y];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">build</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">\tid[rt] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(l == r) &#123;</span><br><span class=\"line\">\t\tpos[l] = rt;</span><br><span class=\"line\">\t\tid[rt] = l;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">add</span>(rt &lt;&lt; <span class=\"number\">1</span>, rt);</span><br><span class=\"line\">\t<span class=\"built_in\">add</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, rt);</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid);</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Add</span><span class=\"params\">(<span class=\"keyword\">int</span> rt, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> L, <span class=\"keyword\">int</span> R, <span class=\"keyword\">int</span> pnt)</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= l &amp;&amp; r &lt;= R) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">add</span>(rt, pos[pnt]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> mid = l + r &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(L &lt;= mid)</span><br><span class=\"line\">\t\t<span class=\"built_in\">Add</span>(rt &lt;&lt; <span class=\"number\">1</span>, l, mid, L, R, pnt);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(mid &lt; R)</span><br><span class=\"line\">\t\t<span class=\"built_in\">Add</span>(rt &lt;&lt; <span class=\"number\">1</span> | <span class=\"number\">1</span>, mid + <span class=\"number\">1</span>, r, L, R, pnt);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">topo</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\tpriority_queue&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;, vector&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt;, greater&lt;pair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt;&gt;&gt; pq;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) </span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(!deg[pos[i]])</span><br><span class=\"line\">\t\t\tpq.<span class=\"built_in\">push</span>(<span class=\"built_in\">make_pair</span>(a[i], pos[i]));</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(!pq.<span class=\"built_in\">empty</span>()) &#123;</span><br><span class=\"line\">\t\tpair&lt;<span class=\"keyword\">int</span>, <span class=\"keyword\">int</span>&gt; u = pq.<span class=\"built_in\">top</span>();</span><br><span class=\"line\">\t\tpq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(u.first != <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\t\tans.<span class=\"built_in\">push_back</span>(u.first);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;it: G[u.second])</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(--deg[it] == <span class=\"number\">0</span>)</span><br><span class=\"line\">\t\t\t\tpq.<span class=\"built_in\">push</span>(<span class=\"built_in\">make_pair</span>(~id[it] ? a[id[it]] : <span class=\"number\">-1</span>, it));</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; ans.<span class=\"built_in\">size</span>(); ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d%c&quot;</span>, ans[i], <span class=\"string\">&quot; \\n&quot;</span>[i == ans.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>]);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;n);</span><br><span class=\"line\">\t<span class=\"built_in\">build</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; n; ++i) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> tmp = a[i] % n;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(tmp == i) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(tmp &lt; i)</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">Add</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>, tmp, i - <span class=\"number\">1</span>, i);</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">Add</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>, tmp, n - <span class=\"number\">1</span>, i);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(i)</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">Add</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>, n - <span class=\"number\">1</span>, <span class=\"number\">0</span>, i - <span class=\"number\">1</span>, i);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">topo</span>();</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","categories":["算法"],"tags":["数据结构","线段树"]}]